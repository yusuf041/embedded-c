
uart_exti_by_circular_buffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030c4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003184  08003184  00004184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003228  08003228  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003228  08003228  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003228  08003228  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003228  08003228  00004228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800322c  0800322c  0000422c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003230  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a10  20000068  08003298  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a78  08003298  00005a78  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d74  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001927  00000000  00000000  0000ce04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000728  00000000  00000000  0000e730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000565  00000000  00000000  0000ee58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012c23  00000000  00000000  0000f3bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6fc  00000000  00000000  00021fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006c3bb  00000000  00000000  0002c6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00098a97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ebc  00000000  00000000  00098adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0009a998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800316c 	.word	0x0800316c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800316c 	.word	0x0800316c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

uint32_t led_hiz = 1;
 800023a:	2301      	movs	r3, #1
 800023c:	607b      	str	r3, [r7, #4]
/* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023e:	f000 f9d5 	bl	80005ec <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000242:	f000 f84d 	bl	80002e0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

led_init();
 8000246:	f001 fe3d 	bl	8001ec4 <led_init>
button_init_interrupt();
 800024a:	f001 fdb9 	bl	8001dc0 <button_init_interrupt>
uart_init();
 800024e:	f001 fea9 	bl	8001fa4 <uart_init>
////		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
////		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
//		HAL_Delay(speed*100);


	  if(UART_bytes_to_read() != 0)
 8000252:	f002 f80f 	bl	8002274 <UART_bytes_to_read>
 8000256:	1e03      	subs	r3, r0, #0
 8000258:	d003      	beq.n	8000262 <main+0x2e>
	  {
		  led_hiz = UART_get_command();
 800025a:	f000 f88b 	bl	8000374 <UART_get_command>
 800025e:	0003      	movs	r3, r0
 8000260:	607b      	str	r3, [r7, #4]
	  }
	  if(button_get_state() == 0){
 8000262:	f001 fe1f 	bl	8001ea4 <button_get_state>
 8000266:	1e03      	subs	r3, r0, #0
 8000268:	d10e      	bne.n	8000288 <main+0x54>
		  	  	  togle_led();
 800026a:	f001 fe85 	bl	8001f78 <togle_led>
	  			send_time_string();
 800026e:	f000 f817 	bl	80002a0 <send_time_string>
	  			HAL_Delay(led_hiz*500);
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	0013      	movs	r3, r2
 8000276:	015b      	lsls	r3, r3, #5
 8000278:	1a9b      	subs	r3, r3, r2
 800027a:	009b      	lsls	r3, r3, #2
 800027c:	189b      	adds	r3, r3, r2
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	0018      	movs	r0, r3
 8000282:	f000 fa17 	bl	80006b4 <HAL_Delay>
 8000286:	e7e4      	b.n	8000252 <main+0x1e>
	  		}
	  		else {
	  			togle_led();
 8000288:	f001 fe76 	bl	8001f78 <togle_led>
	  			send_time_string();
 800028c:	f000 f808 	bl	80002a0 <send_time_string>
	  			HAL_Delay(led_hiz*100);
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	2264      	movs	r2, #100	@ 0x64
 8000294:	4353      	muls	r3, r2
 8000296:	0018      	movs	r0, r3
 8000298:	f000 fa0c 	bl	80006b4 <HAL_Delay>
	  if(UART_bytes_to_read() != 0)
 800029c:	e7d9      	b.n	8000252 <main+0x1e>
	...

080002a0 <send_time_string>:
  /* USER CODE END 3 */
}


void send_time_string()
{
 80002a0:	b590      	push	{r4, r7, lr}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
	uint32_t n = 0;
 80002a6:	2300      	movs	r3, #0
 80002a8:	607b      	str	r3, [r7, #4]
		static uint32_t time;
		time++;
 80002aa:	4b0b      	ldr	r3, [pc, #44]	@ (80002d8 <send_time_string+0x38>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	1c5a      	adds	r2, r3, #1
 80002b0:	4b09      	ldr	r3, [pc, #36]	@ (80002d8 <send_time_string+0x38>)
 80002b2:	601a      	str	r2, [r3, #0]

		n = UART_bytes_to_read();
 80002b4:	f001 ffde 	bl	8002274 <UART_bytes_to_read>
 80002b8:	0003      	movs	r3, r0
 80002ba:	607b      	str	r3, [r7, #4]
		printf("Zaman:%u gelen_veri boyutu[byte]:%u Buton Durum:%u\n\r", (unsigned int)time, (unsigned int)n, (unsigned int)button_get_state());
 80002bc:	4b06      	ldr	r3, [pc, #24]	@ (80002d8 <send_time_string+0x38>)
 80002be:	681c      	ldr	r4, [r3, #0]
 80002c0:	f001 fdf0 	bl	8001ea4 <button_get_state>
 80002c4:	0003      	movs	r3, r0
 80002c6:	687a      	ldr	r2, [r7, #4]
 80002c8:	4804      	ldr	r0, [pc, #16]	@ (80002dc <send_time_string+0x3c>)
 80002ca:	0021      	movs	r1, r4
 80002cc:	f002 f8b0 	bl	8002430 <iprintf>
}
 80002d0:	46c0      	nop			@ (mov r8, r8)
 80002d2:	46bd      	mov	sp, r7
 80002d4:	b003      	add	sp, #12
 80002d6:	bd90      	pop	{r4, r7, pc}
 80002d8:	20000084 	.word	0x20000084
 80002dc:	08003184 	.word	0x08003184

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b590      	push	{r4, r7, lr}
 80002e2:	b091      	sub	sp, #68	@ 0x44
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	2410      	movs	r4, #16
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	0018      	movs	r0, r3
 80002ec:	2330      	movs	r3, #48	@ 0x30
 80002ee:	001a      	movs	r2, r3
 80002f0:	2100      	movs	r1, #0
 80002f2:	f002 f8f9 	bl	80024e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f6:	003b      	movs	r3, r7
 80002f8:	0018      	movs	r0, r3
 80002fa:	2310      	movs	r3, #16
 80002fc:	001a      	movs	r2, r3
 80002fe:	2100      	movs	r1, #0
 8000300:	f002 f8f2 	bl	80024e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000304:	0021      	movs	r1, r4
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2202      	movs	r2, #2
 800030a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2201      	movs	r2, #1
 8000310:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2210      	movs	r2, #16
 8000316:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2202      	movs	r2, #2
 800031c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2200      	movs	r2, #0
 8000322:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	22a0      	movs	r2, #160	@ 0xa0
 8000328:	0392      	lsls	r2, r2, #14
 800032a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2200      	movs	r2, #0
 8000330:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000332:	187b      	adds	r3, r7, r1
 8000334:	0018      	movs	r0, r3
 8000336:	f000 fc4b 	bl	8000bd0 <HAL_RCC_OscConfig>
 800033a:	1e03      	subs	r3, r0, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800033e:	f000 f847 	bl	80003d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	003b      	movs	r3, r7
 8000344:	2207      	movs	r2, #7
 8000346:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000348:	003b      	movs	r3, r7
 800034a:	2202      	movs	r2, #2
 800034c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034e:	003b      	movs	r3, r7
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000354:	003b      	movs	r3, r7
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800035a:	003b      	movs	r3, r7
 800035c:	2101      	movs	r1, #1
 800035e:	0018      	movs	r0, r3
 8000360:	f000 ff50 	bl	8001204 <HAL_RCC_ClockConfig>
 8000364:	1e03      	subs	r3, r0, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000368:	f000 f832 	bl	80003d0 <Error_Handler>
  }
}
 800036c:	46c0      	nop			@ (mov r8, r8)
 800036e:	46bd      	mov	sp, r7
 8000370:	b011      	add	sp, #68	@ 0x44
 8000372:	bd90      	pop	{r4, r7, pc}

08000374 <UART_get_command>:
}

/* USER CODE BEGIN 4 */
int32_t UART_get_command(void)

{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0

	uint32_t blink_speed = 0;
 800037a:	2300      	movs	r3, #0
 800037c:	607b      	str	r3, [r7, #4]
	int ch=0;
 800037e:	2300      	movs	r3, #0
 8000380:	603b      	str	r3, [r7, #0]
	ch = UART_read_byte();
 8000382:	f001 ff4d 	bl	8002220 <UART_read_byte>
 8000386:	0003      	movs	r3, r0
 8000388:	603b      	str	r3, [r7, #0]

	if(ch != -1){
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	3301      	adds	r3, #1
 800038e:	d01a      	beq.n	80003c6 <UART_get_command+0x52>

	switch (ch) 				{
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	2b33      	cmp	r3, #51	@ 0x33
 8000394:	d00f      	beq.n	80003b6 <UART_get_command+0x42>
 8000396:	683b      	ldr	r3, [r7, #0]
 8000398:	2b33      	cmp	r3, #51	@ 0x33
 800039a:	dc0f      	bgt.n	80003bc <UART_get_command+0x48>
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	2b31      	cmp	r3, #49	@ 0x31
 80003a0:	d003      	beq.n	80003aa <UART_get_command+0x36>
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	2b32      	cmp	r3, #50	@ 0x32
 80003a6:	d003      	beq.n	80003b0 <UART_get_command+0x3c>
 80003a8:	e008      	b.n	80003bc <UART_get_command+0x48>
	case '1':
		blink_speed = 1;
 80003aa:	2301      	movs	r3, #1
 80003ac:	607b      	str	r3, [r7, #4]
		break;
 80003ae:	e008      	b.n	80003c2 <UART_get_command+0x4e>
	case '2':
		blink_speed = 2;
 80003b0:	2302      	movs	r3, #2
 80003b2:	607b      	str	r3, [r7, #4]
		break;
 80003b4:	e005      	b.n	80003c2 <UART_get_command+0x4e>

	case '3':
		blink_speed = 3;
 80003b6:	2303      	movs	r3, #3
 80003b8:	607b      	str	r3, [r7, #4]
		break;
 80003ba:	e002      	b.n	80003c2 <UART_get_command+0x4e>
	default:
		blink_speed = 1;
 80003bc:	2301      	movs	r3, #1
 80003be:	607b      	str	r3, [r7, #4]
		break;
 80003c0:	46c0      	nop			@ (mov r8, r8)

								}
	return blink_speed;
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	e000      	b.n	80003c8 <UART_get_command+0x54>
	}
	return 0;
 80003c6:	2300      	movs	r3, #0
}
 80003c8:	0018      	movs	r0, r3
 80003ca:	46bd      	mov	sp, r7
 80003cc:	b002      	add	sp, #8
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d4:	b672      	cpsid	i
}
 80003d6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d8:	46c0      	nop			@ (mov r8, r8)
 80003da:	e7fd      	b.n	80003d8 <Error_Handler+0x8>

080003dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000420 <HAL_MspInit+0x44>)
 80003e4:	699a      	ldr	r2, [r3, #24]
 80003e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000420 <HAL_MspInit+0x44>)
 80003e8:	2101      	movs	r1, #1
 80003ea:	430a      	orrs	r2, r1
 80003ec:	619a      	str	r2, [r3, #24]
 80003ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000420 <HAL_MspInit+0x44>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	2201      	movs	r2, #1
 80003f4:	4013      	ands	r3, r2
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fa:	4b09      	ldr	r3, [pc, #36]	@ (8000420 <HAL_MspInit+0x44>)
 80003fc:	69da      	ldr	r2, [r3, #28]
 80003fe:	4b08      	ldr	r3, [pc, #32]	@ (8000420 <HAL_MspInit+0x44>)
 8000400:	2180      	movs	r1, #128	@ 0x80
 8000402:	0549      	lsls	r1, r1, #21
 8000404:	430a      	orrs	r2, r1
 8000406:	61da      	str	r2, [r3, #28]
 8000408:	4b05      	ldr	r3, [pc, #20]	@ (8000420 <HAL_MspInit+0x44>)
 800040a:	69da      	ldr	r2, [r3, #28]
 800040c:	2380      	movs	r3, #128	@ 0x80
 800040e:	055b      	lsls	r3, r3, #21
 8000410:	4013      	ands	r3, r2
 8000412:	603b      	str	r3, [r7, #0]
 8000414:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	b002      	add	sp, #8
 800041c:	bd80      	pop	{r7, pc}
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	40021000 	.word	0x40021000

08000424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000428:	46c0      	nop			@ (mov r8, r8)
 800042a:	e7fd      	b.n	8000428 <NMI_Handler+0x4>

0800042c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000430:	46c0      	nop			@ (mov r8, r8)
 8000432:	e7fd      	b.n	8000430 <HardFault_Handler+0x4>

08000434 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000438:	46c0      	nop			@ (mov r8, r8)
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800043e:	b580      	push	{r7, lr}
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000442:	46c0      	nop			@ (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800044c:	f000 f916 	bl	800067c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000450:	46c0      	nop			@ (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b086      	sub	sp, #24
 800045a:	af00      	add	r7, sp, #0
 800045c:	60f8      	str	r0, [r7, #12]
 800045e:	60b9      	str	r1, [r7, #8]
 8000460:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000462:	2300      	movs	r3, #0
 8000464:	617b      	str	r3, [r7, #20]
 8000466:	e00a      	b.n	800047e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000468:	e000      	b.n	800046c <_read+0x16>
 800046a:	bf00      	nop
 800046c:	0001      	movs	r1, r0
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	1c5a      	adds	r2, r3, #1
 8000472:	60ba      	str	r2, [r7, #8]
 8000474:	b2ca      	uxtb	r2, r1
 8000476:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000478:	697b      	ldr	r3, [r7, #20]
 800047a:	3301      	adds	r3, #1
 800047c:	617b      	str	r3, [r7, #20]
 800047e:	697a      	ldr	r2, [r7, #20]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	429a      	cmp	r2, r3
 8000484:	dbf0      	blt.n	8000468 <_read+0x12>
  }

  return len;
 8000486:	687b      	ldr	r3, [r7, #4]
}
 8000488:	0018      	movs	r0, r3
 800048a:	46bd      	mov	sp, r7
 800048c:	b006      	add	sp, #24
 800048e:	bd80      	pop	{r7, pc}

08000490 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b086      	sub	sp, #24
 8000494:	af00      	add	r7, sp, #0
 8000496:	60f8      	str	r0, [r7, #12]
 8000498:	60b9      	str	r1, [r7, #8]
 800049a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
 80004a0:	e009      	b.n	80004b6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80004a2:	68bb      	ldr	r3, [r7, #8]
 80004a4:	1c5a      	adds	r2, r3, #1
 80004a6:	60ba      	str	r2, [r7, #8]
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 fe12 	bl	80020d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	3301      	adds	r3, #1
 80004b4:	617b      	str	r3, [r7, #20]
 80004b6:	697a      	ldr	r2, [r7, #20]
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	429a      	cmp	r2, r3
 80004bc:	dbf1      	blt.n	80004a2 <_write+0x12>
  }
  return len;
 80004be:	687b      	ldr	r3, [r7, #4]
}
 80004c0:	0018      	movs	r0, r3
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b006      	add	sp, #24
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <_close>:

int _close(int file)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004d0:	2301      	movs	r3, #1
 80004d2:	425b      	negs	r3, r3
}
 80004d4:	0018      	movs	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b002      	add	sp, #8
 80004da:	bd80      	pop	{r7, pc}

080004dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	2280      	movs	r2, #128	@ 0x80
 80004ea:	0192      	lsls	r2, r2, #6
 80004ec:	605a      	str	r2, [r3, #4]
  return 0;
 80004ee:	2300      	movs	r3, #0
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <_isatty>:

int _isatty(int file)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000500:	2301      	movs	r3, #1
}
 8000502:	0018      	movs	r0, r3
 8000504:	46bd      	mov	sp, r7
 8000506:	b002      	add	sp, #8
 8000508:	bd80      	pop	{r7, pc}

0800050a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800050a:	b580      	push	{r7, lr}
 800050c:	b084      	sub	sp, #16
 800050e:	af00      	add	r7, sp, #0
 8000510:	60f8      	str	r0, [r7, #12]
 8000512:	60b9      	str	r1, [r7, #8]
 8000514:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000516:	2300      	movs	r3, #0
}
 8000518:	0018      	movs	r0, r3
 800051a:	46bd      	mov	sp, r7
 800051c:	b004      	add	sp, #16
 800051e:	bd80      	pop	{r7, pc}

08000520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000528:	4a14      	ldr	r2, [pc, #80]	@ (800057c <_sbrk+0x5c>)
 800052a:	4b15      	ldr	r3, [pc, #84]	@ (8000580 <_sbrk+0x60>)
 800052c:	1ad3      	subs	r3, r2, r3
 800052e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000534:	4b13      	ldr	r3, [pc, #76]	@ (8000584 <_sbrk+0x64>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d102      	bne.n	8000542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800053c:	4b11      	ldr	r3, [pc, #68]	@ (8000584 <_sbrk+0x64>)
 800053e:	4a12      	ldr	r2, [pc, #72]	@ (8000588 <_sbrk+0x68>)
 8000540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000542:	4b10      	ldr	r3, [pc, #64]	@ (8000584 <_sbrk+0x64>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	18d3      	adds	r3, r2, r3
 800054a:	693a      	ldr	r2, [r7, #16]
 800054c:	429a      	cmp	r2, r3
 800054e:	d207      	bcs.n	8000560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000550:	f002 f820 	bl	8002594 <__errno>
 8000554:	0003      	movs	r3, r0
 8000556:	220c      	movs	r2, #12
 8000558:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800055a:	2301      	movs	r3, #1
 800055c:	425b      	negs	r3, r3
 800055e:	e009      	b.n	8000574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000560:	4b08      	ldr	r3, [pc, #32]	@ (8000584 <_sbrk+0x64>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000566:	4b07      	ldr	r3, [pc, #28]	@ (8000584 <_sbrk+0x64>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	18d2      	adds	r2, r2, r3
 800056e:	4b05      	ldr	r3, [pc, #20]	@ (8000584 <_sbrk+0x64>)
 8000570:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	0018      	movs	r0, r3
 8000576:	46bd      	mov	sp, r7
 8000578:	b006      	add	sp, #24
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20002000 	.word	0x20002000
 8000580:	00000400 	.word	0x00000400
 8000584:	20000088 	.word	0x20000088
 8000588:	20000a78 	.word	0x20000a78

0800058c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000590:	46c0      	nop			@ (mov r8, r8)
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000598:	480d      	ldr	r0, [pc, #52]	@ (80005d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800059a:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 800059c:	f7ff fff6 	bl	800058c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a0:	480c      	ldr	r0, [pc, #48]	@ (80005d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80005a2:	490d      	ldr	r1, [pc, #52]	@ (80005d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005a4:	4a0d      	ldr	r2, [pc, #52]	@ (80005dc <LoopForever+0xe>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a8:	e002      	b.n	80005b0 <LoopCopyDataInit>

080005aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ae:	3304      	adds	r3, #4

080005b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b4:	d3f9      	bcc.n	80005aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005b6:	4a0a      	ldr	r2, [pc, #40]	@ (80005e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005b8:	4c0a      	ldr	r4, [pc, #40]	@ (80005e4 <LoopForever+0x16>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005bc:	e001      	b.n	80005c2 <LoopFillZerobss>

080005be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c0:	3204      	adds	r2, #4

080005c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c4:	d3fb      	bcc.n	80005be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005c6:	f001 ffeb 	bl	80025a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ca:	f7ff fe33 	bl	8000234 <main>

080005ce <LoopForever>:

LoopForever:
    b LoopForever
 80005ce:	e7fe      	b.n	80005ce <LoopForever>
  ldr   r0, =_estack
 80005d0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80005d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80005dc:	08003230 	.word	0x08003230
  ldr r2, =_sbss
 80005e0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80005e4:	20000a78 	.word	0x20000a78

080005e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005e8:	e7fe      	b.n	80005e8 <ADC1_COMP_IRQHandler>
	...

080005ec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f0:	4b07      	ldr	r3, [pc, #28]	@ (8000610 <HAL_Init+0x24>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <HAL_Init+0x24>)
 80005f6:	2110      	movs	r1, #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f000 f809 	bl	8000614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000602:	f7ff feeb 	bl	80003dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000606:	2300      	movs	r3, #0
}
 8000608:	0018      	movs	r0, r3
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	40022000 	.word	0x40022000

08000614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800061c:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <HAL_InitTick+0x5c>)
 800061e:	681c      	ldr	r4, [r3, #0]
 8000620:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <HAL_InitTick+0x60>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	0019      	movs	r1, r3
 8000626:	23fa      	movs	r3, #250	@ 0xfa
 8000628:	0098      	lsls	r0, r3, #2
 800062a:	f7ff fd77 	bl	800011c <__udivsi3>
 800062e:	0003      	movs	r3, r0
 8000630:	0019      	movs	r1, r3
 8000632:	0020      	movs	r0, r4
 8000634:	f7ff fd72 	bl	800011c <__udivsi3>
 8000638:	0003      	movs	r3, r0
 800063a:	0018      	movs	r0, r3
 800063c:	f000 f92f 	bl	800089e <HAL_SYSTICK_Config>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000644:	2301      	movs	r3, #1
 8000646:	e00f      	b.n	8000668 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b03      	cmp	r3, #3
 800064c:	d80b      	bhi.n	8000666 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800064e:	6879      	ldr	r1, [r7, #4]
 8000650:	2301      	movs	r3, #1
 8000652:	425b      	negs	r3, r3
 8000654:	2200      	movs	r2, #0
 8000656:	0018      	movs	r0, r3
 8000658:	f000 f8fc 	bl	8000854 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800065c:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <HAL_InitTick+0x64>)
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000662:	2300      	movs	r3, #0
 8000664:	e000      	b.n	8000668 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
}
 8000668:	0018      	movs	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	b003      	add	sp, #12
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	20000000 	.word	0x20000000
 8000674:	20000008 	.word	0x20000008
 8000678:	20000004 	.word	0x20000004

0800067c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000680:	4b05      	ldr	r3, [pc, #20]	@ (8000698 <HAL_IncTick+0x1c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	001a      	movs	r2, r3
 8000686:	4b05      	ldr	r3, [pc, #20]	@ (800069c <HAL_IncTick+0x20>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	18d2      	adds	r2, r2, r3
 800068c:	4b03      	ldr	r3, [pc, #12]	@ (800069c <HAL_IncTick+0x20>)
 800068e:	601a      	str	r2, [r3, #0]
}
 8000690:	46c0      	nop			@ (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	20000008 	.word	0x20000008
 800069c:	2000008c 	.word	0x2000008c

080006a0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  return uwTick;
 80006a4:	4b02      	ldr	r3, [pc, #8]	@ (80006b0 <HAL_GetTick+0x10>)
 80006a6:	681b      	ldr	r3, [r3, #0]
}
 80006a8:	0018      	movs	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	2000008c 	.word	0x2000008c

080006b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006bc:	f7ff fff0 	bl	80006a0 <HAL_GetTick>
 80006c0:	0003      	movs	r3, r0
 80006c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	3301      	adds	r3, #1
 80006cc:	d005      	beq.n	80006da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ce:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <HAL_Delay+0x44>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	001a      	movs	r2, r3
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	189b      	adds	r3, r3, r2
 80006d8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	f7ff ffe0 	bl	80006a0 <HAL_GetTick>
 80006e0:	0002      	movs	r2, r0
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d8f7      	bhi.n	80006dc <HAL_Delay+0x28>
  {
  }
}
 80006ec:	46c0      	nop			@ (mov r8, r8)
 80006ee:	46c0      	nop			@ (mov r8, r8)
 80006f0:	46bd      	mov	sp, r7
 80006f2:	b004      	add	sp, #16
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	20000008 	.word	0x20000008

080006fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	0002      	movs	r2, r0
 8000704:	1dfb      	adds	r3, r7, #7
 8000706:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b7f      	cmp	r3, #127	@ 0x7f
 800070e:	d809      	bhi.n	8000724 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000710:	1dfb      	adds	r3, r7, #7
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	001a      	movs	r2, r3
 8000716:	231f      	movs	r3, #31
 8000718:	401a      	ands	r2, r3
 800071a:	4b04      	ldr	r3, [pc, #16]	@ (800072c <__NVIC_EnableIRQ+0x30>)
 800071c:	2101      	movs	r1, #1
 800071e:	4091      	lsls	r1, r2
 8000720:	000a      	movs	r2, r1
 8000722:	601a      	str	r2, [r3, #0]
  }
}
 8000724:	46c0      	nop			@ (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b002      	add	sp, #8
 800072a:	bd80      	pop	{r7, pc}
 800072c:	e000e100 	.word	0xe000e100

08000730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	0002      	movs	r2, r0
 8000738:	6039      	str	r1, [r7, #0]
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800073e:	1dfb      	adds	r3, r7, #7
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b7f      	cmp	r3, #127	@ 0x7f
 8000744:	d828      	bhi.n	8000798 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000746:	4a2f      	ldr	r2, [pc, #188]	@ (8000804 <__NVIC_SetPriority+0xd4>)
 8000748:	1dfb      	adds	r3, r7, #7
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b25b      	sxtb	r3, r3
 800074e:	089b      	lsrs	r3, r3, #2
 8000750:	33c0      	adds	r3, #192	@ 0xc0
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	589b      	ldr	r3, [r3, r2]
 8000756:	1dfa      	adds	r2, r7, #7
 8000758:	7812      	ldrb	r2, [r2, #0]
 800075a:	0011      	movs	r1, r2
 800075c:	2203      	movs	r2, #3
 800075e:	400a      	ands	r2, r1
 8000760:	00d2      	lsls	r2, r2, #3
 8000762:	21ff      	movs	r1, #255	@ 0xff
 8000764:	4091      	lsls	r1, r2
 8000766:	000a      	movs	r2, r1
 8000768:	43d2      	mvns	r2, r2
 800076a:	401a      	ands	r2, r3
 800076c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	019b      	lsls	r3, r3, #6
 8000772:	22ff      	movs	r2, #255	@ 0xff
 8000774:	401a      	ands	r2, r3
 8000776:	1dfb      	adds	r3, r7, #7
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	0018      	movs	r0, r3
 800077c:	2303      	movs	r3, #3
 800077e:	4003      	ands	r3, r0
 8000780:	00db      	lsls	r3, r3, #3
 8000782:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000784:	481f      	ldr	r0, [pc, #124]	@ (8000804 <__NVIC_SetPriority+0xd4>)
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	b25b      	sxtb	r3, r3
 800078c:	089b      	lsrs	r3, r3, #2
 800078e:	430a      	orrs	r2, r1
 8000790:	33c0      	adds	r3, #192	@ 0xc0
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000796:	e031      	b.n	80007fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000798:	4a1b      	ldr	r2, [pc, #108]	@ (8000808 <__NVIC_SetPriority+0xd8>)
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	0019      	movs	r1, r3
 80007a0:	230f      	movs	r3, #15
 80007a2:	400b      	ands	r3, r1
 80007a4:	3b08      	subs	r3, #8
 80007a6:	089b      	lsrs	r3, r3, #2
 80007a8:	3306      	adds	r3, #6
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	18d3      	adds	r3, r2, r3
 80007ae:	3304      	adds	r3, #4
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	1dfa      	adds	r2, r7, #7
 80007b4:	7812      	ldrb	r2, [r2, #0]
 80007b6:	0011      	movs	r1, r2
 80007b8:	2203      	movs	r2, #3
 80007ba:	400a      	ands	r2, r1
 80007bc:	00d2      	lsls	r2, r2, #3
 80007be:	21ff      	movs	r1, #255	@ 0xff
 80007c0:	4091      	lsls	r1, r2
 80007c2:	000a      	movs	r2, r1
 80007c4:	43d2      	mvns	r2, r2
 80007c6:	401a      	ands	r2, r3
 80007c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	019b      	lsls	r3, r3, #6
 80007ce:	22ff      	movs	r2, #255	@ 0xff
 80007d0:	401a      	ands	r2, r3
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	0018      	movs	r0, r3
 80007d8:	2303      	movs	r3, #3
 80007da:	4003      	ands	r3, r0
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007e0:	4809      	ldr	r0, [pc, #36]	@ (8000808 <__NVIC_SetPriority+0xd8>)
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	001c      	movs	r4, r3
 80007e8:	230f      	movs	r3, #15
 80007ea:	4023      	ands	r3, r4
 80007ec:	3b08      	subs	r3, #8
 80007ee:	089b      	lsrs	r3, r3, #2
 80007f0:	430a      	orrs	r2, r1
 80007f2:	3306      	adds	r3, #6
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	18c3      	adds	r3, r0, r3
 80007f8:	3304      	adds	r3, #4
 80007fa:	601a      	str	r2, [r3, #0]
}
 80007fc:	46c0      	nop			@ (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b003      	add	sp, #12
 8000802:	bd90      	pop	{r4, r7, pc}
 8000804:	e000e100 	.word	0xe000e100
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	1e5a      	subs	r2, r3, #1
 8000818:	2380      	movs	r3, #128	@ 0x80
 800081a:	045b      	lsls	r3, r3, #17
 800081c:	429a      	cmp	r2, r3
 800081e:	d301      	bcc.n	8000824 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000820:	2301      	movs	r3, #1
 8000822:	e010      	b.n	8000846 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000824:	4b0a      	ldr	r3, [pc, #40]	@ (8000850 <SysTick_Config+0x44>)
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	3a01      	subs	r2, #1
 800082a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800082c:	2301      	movs	r3, #1
 800082e:	425b      	negs	r3, r3
 8000830:	2103      	movs	r1, #3
 8000832:	0018      	movs	r0, r3
 8000834:	f7ff ff7c 	bl	8000730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000838:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <SysTick_Config+0x44>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800083e:	4b04      	ldr	r3, [pc, #16]	@ (8000850 <SysTick_Config+0x44>)
 8000840:	2207      	movs	r2, #7
 8000842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000844:	2300      	movs	r3, #0
}
 8000846:	0018      	movs	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	b002      	add	sp, #8
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			@ (mov r8, r8)
 8000850:	e000e010 	.word	0xe000e010

08000854 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
 800085e:	210f      	movs	r1, #15
 8000860:	187b      	adds	r3, r7, r1
 8000862:	1c02      	adds	r2, r0, #0
 8000864:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	187b      	adds	r3, r7, r1
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	b25b      	sxtb	r3, r3
 800086e:	0011      	movs	r1, r2
 8000870:	0018      	movs	r0, r3
 8000872:	f7ff ff5d 	bl	8000730 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000876:	46c0      	nop			@ (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b004      	add	sp, #16
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	0002      	movs	r2, r0
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800088a:	1dfb      	adds	r3, r7, #7
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b25b      	sxtb	r3, r3
 8000890:	0018      	movs	r0, r3
 8000892:	f7ff ff33 	bl	80006fc <__NVIC_EnableIRQ>
}
 8000896:	46c0      	nop			@ (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b002      	add	sp, #8
 800089c:	bd80      	pop	{r7, pc}

0800089e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b082      	sub	sp, #8
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	0018      	movs	r0, r3
 80008aa:	f7ff ffaf 	bl	800080c <SysTick_Config>
 80008ae:	0003      	movs	r3, r0
}
 80008b0:	0018      	movs	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	b002      	add	sp, #8
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008c6:	e14f      	b.n	8000b68 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2101      	movs	r1, #1
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	4091      	lsls	r1, r2
 80008d2:	000a      	movs	r2, r1
 80008d4:	4013      	ands	r3, r2
 80008d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d100      	bne.n	80008e0 <HAL_GPIO_Init+0x28>
 80008de:	e140      	b.n	8000b62 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	2203      	movs	r2, #3
 80008e6:	4013      	ands	r3, r2
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d005      	beq.n	80008f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	2203      	movs	r2, #3
 80008f2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d130      	bne.n	800095a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	2203      	movs	r2, #3
 8000904:	409a      	lsls	r2, r3
 8000906:	0013      	movs	r3, r2
 8000908:	43da      	mvns	r2, r3
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	68da      	ldr	r2, [r3, #12]
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	409a      	lsls	r2, r3
 800091a:	0013      	movs	r3, r2
 800091c:	693a      	ldr	r2, [r7, #16]
 800091e:	4313      	orrs	r3, r2
 8000920:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	693a      	ldr	r2, [r7, #16]
 8000926:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800092e:	2201      	movs	r2, #1
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	409a      	lsls	r2, r3
 8000934:	0013      	movs	r3, r2
 8000936:	43da      	mvns	r2, r3
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	4013      	ands	r3, r2
 800093c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	091b      	lsrs	r3, r3, #4
 8000944:	2201      	movs	r2, #1
 8000946:	401a      	ands	r2, r3
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	409a      	lsls	r2, r3
 800094c:	0013      	movs	r3, r2
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	4313      	orrs	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	2203      	movs	r2, #3
 8000960:	4013      	ands	r3, r2
 8000962:	2b03      	cmp	r3, #3
 8000964:	d017      	beq.n	8000996 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	2203      	movs	r2, #3
 8000972:	409a      	lsls	r2, r3
 8000974:	0013      	movs	r3, r2
 8000976:	43da      	mvns	r2, r3
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	4013      	ands	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	689a      	ldr	r2, [r3, #8]
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	409a      	lsls	r2, r3
 8000988:	0013      	movs	r3, r2
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4313      	orrs	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	2203      	movs	r2, #3
 800099c:	4013      	ands	r3, r2
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d123      	bne.n	80009ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	08da      	lsrs	r2, r3, #3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	3208      	adds	r2, #8
 80009aa:	0092      	lsls	r2, r2, #2
 80009ac:	58d3      	ldr	r3, [r2, r3]
 80009ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	2207      	movs	r2, #7
 80009b4:	4013      	ands	r3, r2
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	220f      	movs	r2, #15
 80009ba:	409a      	lsls	r2, r3
 80009bc:	0013      	movs	r3, r2
 80009be:	43da      	mvns	r2, r3
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	4013      	ands	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	691a      	ldr	r2, [r3, #16]
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	2107      	movs	r1, #7
 80009ce:	400b      	ands	r3, r1
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	409a      	lsls	r2, r3
 80009d4:	0013      	movs	r3, r2
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	4313      	orrs	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	08da      	lsrs	r2, r3, #3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3208      	adds	r2, #8
 80009e4:	0092      	lsls	r2, r2, #2
 80009e6:	6939      	ldr	r1, [r7, #16]
 80009e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	2203      	movs	r2, #3
 80009f6:	409a      	lsls	r2, r3
 80009f8:	0013      	movs	r3, r2
 80009fa:	43da      	mvns	r2, r3
 80009fc:	693b      	ldr	r3, [r7, #16]
 80009fe:	4013      	ands	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2203      	movs	r2, #3
 8000a08:	401a      	ands	r2, r3
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	409a      	lsls	r2, r3
 8000a10:	0013      	movs	r3, r2
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685a      	ldr	r2, [r3, #4]
 8000a22:	23c0      	movs	r3, #192	@ 0xc0
 8000a24:	029b      	lsls	r3, r3, #10
 8000a26:	4013      	ands	r3, r2
 8000a28:	d100      	bne.n	8000a2c <HAL_GPIO_Init+0x174>
 8000a2a:	e09a      	b.n	8000b62 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2c:	4b54      	ldr	r3, [pc, #336]	@ (8000b80 <HAL_GPIO_Init+0x2c8>)
 8000a2e:	699a      	ldr	r2, [r3, #24]
 8000a30:	4b53      	ldr	r3, [pc, #332]	@ (8000b80 <HAL_GPIO_Init+0x2c8>)
 8000a32:	2101      	movs	r1, #1
 8000a34:	430a      	orrs	r2, r1
 8000a36:	619a      	str	r2, [r3, #24]
 8000a38:	4b51      	ldr	r3, [pc, #324]	@ (8000b80 <HAL_GPIO_Init+0x2c8>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	4013      	ands	r3, r2
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a44:	4a4f      	ldr	r2, [pc, #316]	@ (8000b84 <HAL_GPIO_Init+0x2cc>)
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	089b      	lsrs	r3, r3, #2
 8000a4a:	3302      	adds	r3, #2
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	589b      	ldr	r3, [r3, r2]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	2203      	movs	r2, #3
 8000a56:	4013      	ands	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	220f      	movs	r2, #15
 8000a5c:	409a      	lsls	r2, r3
 8000a5e:	0013      	movs	r3, r2
 8000a60:	43da      	mvns	r2, r3
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	4013      	ands	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a68:	687a      	ldr	r2, [r7, #4]
 8000a6a:	2390      	movs	r3, #144	@ 0x90
 8000a6c:	05db      	lsls	r3, r3, #23
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d013      	beq.n	8000a9a <HAL_GPIO_Init+0x1e2>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a44      	ldr	r2, [pc, #272]	@ (8000b88 <HAL_GPIO_Init+0x2d0>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d00d      	beq.n	8000a96 <HAL_GPIO_Init+0x1de>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a43      	ldr	r2, [pc, #268]	@ (8000b8c <HAL_GPIO_Init+0x2d4>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d007      	beq.n	8000a92 <HAL_GPIO_Init+0x1da>
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a42      	ldr	r2, [pc, #264]	@ (8000b90 <HAL_GPIO_Init+0x2d8>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d101      	bne.n	8000a8e <HAL_GPIO_Init+0x1d6>
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	e006      	b.n	8000a9c <HAL_GPIO_Init+0x1e4>
 8000a8e:	2305      	movs	r3, #5
 8000a90:	e004      	b.n	8000a9c <HAL_GPIO_Init+0x1e4>
 8000a92:	2302      	movs	r3, #2
 8000a94:	e002      	b.n	8000a9c <HAL_GPIO_Init+0x1e4>
 8000a96:	2301      	movs	r3, #1
 8000a98:	e000      	b.n	8000a9c <HAL_GPIO_Init+0x1e4>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	2103      	movs	r1, #3
 8000aa0:	400a      	ands	r2, r1
 8000aa2:	0092      	lsls	r2, r2, #2
 8000aa4:	4093      	lsls	r3, r2
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000aac:	4935      	ldr	r1, [pc, #212]	@ (8000b84 <HAL_GPIO_Init+0x2cc>)
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	089b      	lsrs	r3, r3, #2
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aba:	4b36      	ldr	r3, [pc, #216]	@ (8000b94 <HAL_GPIO_Init+0x2dc>)
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	43da      	mvns	r2, r3
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	2380      	movs	r3, #128	@ 0x80
 8000ad0:	035b      	lsls	r3, r3, #13
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	d003      	beq.n	8000ade <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ade:	4b2d      	ldr	r3, [pc, #180]	@ (8000b94 <HAL_GPIO_Init+0x2dc>)
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b94 <HAL_GPIO_Init+0x2dc>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	43da      	mvns	r2, r3
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	2380      	movs	r3, #128	@ 0x80
 8000afa:	039b      	lsls	r3, r3, #14
 8000afc:	4013      	ands	r3, r2
 8000afe:	d003      	beq.n	8000b08 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b08:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <HAL_GPIO_Init+0x2dc>)
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000b0e:	4b21      	ldr	r3, [pc, #132]	@ (8000b94 <HAL_GPIO_Init+0x2dc>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	43da      	mvns	r2, r3
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685a      	ldr	r2, [r3, #4]
 8000b22:	2380      	movs	r3, #128	@ 0x80
 8000b24:	029b      	lsls	r3, r3, #10
 8000b26:	4013      	ands	r3, r2
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b32:	4b18      	ldr	r3, [pc, #96]	@ (8000b94 <HAL_GPIO_Init+0x2dc>)
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000b38:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <HAL_GPIO_Init+0x2dc>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	43da      	mvns	r2, r3
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	2380      	movs	r3, #128	@ 0x80
 8000b4e:	025b      	lsls	r3, r3, #9
 8000b50:	4013      	ands	r3, r2
 8000b52:	d003      	beq.n	8000b5c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b94 <HAL_GPIO_Init+0x2dc>)
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	3301      	adds	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	40da      	lsrs	r2, r3
 8000b70:	1e13      	subs	r3, r2, #0
 8000b72:	d000      	beq.n	8000b76 <HAL_GPIO_Init+0x2be>
 8000b74:	e6a8      	b.n	80008c8 <HAL_GPIO_Init+0x10>
  } 
}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	46c0      	nop			@ (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b006      	add	sp, #24
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40010000 	.word	0x40010000
 8000b88:	48000400 	.word	0x48000400
 8000b8c:	48000800 	.word	0x48000800
 8000b90:	48000c00 	.word	0x48000c00
 8000b94:	40010400 	.word	0x40010400

08000b98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	000a      	movs	r2, r1
 8000ba2:	1cbb      	adds	r3, r7, #2
 8000ba4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bac:	1cbb      	adds	r3, r7, #2
 8000bae:	881b      	ldrh	r3, [r3, #0]
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	041a      	lsls	r2, r3, #16
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	1cb9      	adds	r1, r7, #2
 8000bbc:	8809      	ldrh	r1, [r1, #0]
 8000bbe:	400b      	ands	r3, r1
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	619a      	str	r2, [r3, #24]
}
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b004      	add	sp, #16
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d101      	bne.n	8000be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e301      	b.n	80011e6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2201      	movs	r2, #1
 8000be8:	4013      	ands	r3, r2
 8000bea:	d100      	bne.n	8000bee <HAL_RCC_OscConfig+0x1e>
 8000bec:	e08d      	b.n	8000d0a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bee:	4bc3      	ldr	r3, [pc, #780]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	d00e      	beq.n	8000c18 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bfa:	4bc0      	ldr	r3, [pc, #768]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	220c      	movs	r2, #12
 8000c00:	4013      	ands	r3, r2
 8000c02:	2b08      	cmp	r3, #8
 8000c04:	d116      	bne.n	8000c34 <HAL_RCC_OscConfig+0x64>
 8000c06:	4bbd      	ldr	r3, [pc, #756]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	2380      	movs	r3, #128	@ 0x80
 8000c0c:	025b      	lsls	r3, r3, #9
 8000c0e:	401a      	ands	r2, r3
 8000c10:	2380      	movs	r3, #128	@ 0x80
 8000c12:	025b      	lsls	r3, r3, #9
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d10d      	bne.n	8000c34 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c18:	4bb8      	ldr	r3, [pc, #736]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	2380      	movs	r3, #128	@ 0x80
 8000c1e:	029b      	lsls	r3, r3, #10
 8000c20:	4013      	ands	r3, r2
 8000c22:	d100      	bne.n	8000c26 <HAL_RCC_OscConfig+0x56>
 8000c24:	e070      	b.n	8000d08 <HAL_RCC_OscConfig+0x138>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d000      	beq.n	8000c30 <HAL_RCC_OscConfig+0x60>
 8000c2e:	e06b      	b.n	8000d08 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e2d8      	b.n	80011e6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d107      	bne.n	8000c4c <HAL_RCC_OscConfig+0x7c>
 8000c3c:	4baf      	ldr	r3, [pc, #700]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4bae      	ldr	r3, [pc, #696]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000c42:	2180      	movs	r1, #128	@ 0x80
 8000c44:	0249      	lsls	r1, r1, #9
 8000c46:	430a      	orrs	r2, r1
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	e02f      	b.n	8000cac <HAL_RCC_OscConfig+0xdc>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d10c      	bne.n	8000c6e <HAL_RCC_OscConfig+0x9e>
 8000c54:	4ba9      	ldr	r3, [pc, #676]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4ba8      	ldr	r3, [pc, #672]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000c5a:	49a9      	ldr	r1, [pc, #676]	@ (8000f00 <HAL_RCC_OscConfig+0x330>)
 8000c5c:	400a      	ands	r2, r1
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	4ba6      	ldr	r3, [pc, #664]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4ba5      	ldr	r3, [pc, #660]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000c66:	49a7      	ldr	r1, [pc, #668]	@ (8000f04 <HAL_RCC_OscConfig+0x334>)
 8000c68:	400a      	ands	r2, r1
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	e01e      	b.n	8000cac <HAL_RCC_OscConfig+0xdc>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	2b05      	cmp	r3, #5
 8000c74:	d10e      	bne.n	8000c94 <HAL_RCC_OscConfig+0xc4>
 8000c76:	4ba1      	ldr	r3, [pc, #644]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	4ba0      	ldr	r3, [pc, #640]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000c7c:	2180      	movs	r1, #128	@ 0x80
 8000c7e:	02c9      	lsls	r1, r1, #11
 8000c80:	430a      	orrs	r2, r1
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	4b9d      	ldr	r3, [pc, #628]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b9c      	ldr	r3, [pc, #624]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000c8a:	2180      	movs	r1, #128	@ 0x80
 8000c8c:	0249      	lsls	r1, r1, #9
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	e00b      	b.n	8000cac <HAL_RCC_OscConfig+0xdc>
 8000c94:	4b99      	ldr	r3, [pc, #612]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b98      	ldr	r3, [pc, #608]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000c9a:	4999      	ldr	r1, [pc, #612]	@ (8000f00 <HAL_RCC_OscConfig+0x330>)
 8000c9c:	400a      	ands	r2, r1
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	4b96      	ldr	r3, [pc, #600]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b95      	ldr	r3, [pc, #596]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000ca6:	4997      	ldr	r1, [pc, #604]	@ (8000f04 <HAL_RCC_OscConfig+0x334>)
 8000ca8:	400a      	ands	r2, r1
 8000caa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d014      	beq.n	8000cde <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb4:	f7ff fcf4 	bl	80006a0 <HAL_GetTick>
 8000cb8:	0003      	movs	r3, r0
 8000cba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cbc:	e008      	b.n	8000cd0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cbe:	f7ff fcef 	bl	80006a0 <HAL_GetTick>
 8000cc2:	0002      	movs	r2, r0
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	2b64      	cmp	r3, #100	@ 0x64
 8000cca:	d901      	bls.n	8000cd0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	e28a      	b.n	80011e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd0:	4b8a      	ldr	r3, [pc, #552]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	2380      	movs	r3, #128	@ 0x80
 8000cd6:	029b      	lsls	r3, r3, #10
 8000cd8:	4013      	ands	r3, r2
 8000cda:	d0f0      	beq.n	8000cbe <HAL_RCC_OscConfig+0xee>
 8000cdc:	e015      	b.n	8000d0a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cde:	f7ff fcdf 	bl	80006a0 <HAL_GetTick>
 8000ce2:	0003      	movs	r3, r0
 8000ce4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ce6:	e008      	b.n	8000cfa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ce8:	f7ff fcda 	bl	80006a0 <HAL_GetTick>
 8000cec:	0002      	movs	r2, r0
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	2b64      	cmp	r3, #100	@ 0x64
 8000cf4:	d901      	bls.n	8000cfa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e275      	b.n	80011e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cfa:	4b80      	ldr	r3, [pc, #512]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	2380      	movs	r3, #128	@ 0x80
 8000d00:	029b      	lsls	r3, r3, #10
 8000d02:	4013      	ands	r3, r2
 8000d04:	d1f0      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x118>
 8000d06:	e000      	b.n	8000d0a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d08:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2202      	movs	r2, #2
 8000d10:	4013      	ands	r3, r2
 8000d12:	d100      	bne.n	8000d16 <HAL_RCC_OscConfig+0x146>
 8000d14:	e069      	b.n	8000dea <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d16:	4b79      	ldr	r3, [pc, #484]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	d00b      	beq.n	8000d38 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d20:	4b76      	ldr	r3, [pc, #472]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	220c      	movs	r2, #12
 8000d26:	4013      	ands	r3, r2
 8000d28:	2b08      	cmp	r3, #8
 8000d2a:	d11c      	bne.n	8000d66 <HAL_RCC_OscConfig+0x196>
 8000d2c:	4b73      	ldr	r3, [pc, #460]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000d2e:	685a      	ldr	r2, [r3, #4]
 8000d30:	2380      	movs	r3, #128	@ 0x80
 8000d32:	025b      	lsls	r3, r3, #9
 8000d34:	4013      	ands	r3, r2
 8000d36:	d116      	bne.n	8000d66 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d38:	4b70      	ldr	r3, [pc, #448]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	4013      	ands	r3, r2
 8000d40:	d005      	beq.n	8000d4e <HAL_RCC_OscConfig+0x17e>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d001      	beq.n	8000d4e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e24b      	b.n	80011e6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d4e:	4b6b      	ldr	r3, [pc, #428]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	22f8      	movs	r2, #248	@ 0xf8
 8000d54:	4393      	bics	r3, r2
 8000d56:	0019      	movs	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	00da      	lsls	r2, r3, #3
 8000d5e:	4b67      	ldr	r3, [pc, #412]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000d60:	430a      	orrs	r2, r1
 8000d62:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d64:	e041      	b.n	8000dea <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d024      	beq.n	8000db8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d6e:	4b63      	ldr	r3, [pc, #396]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	4b62      	ldr	r3, [pc, #392]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000d74:	2101      	movs	r1, #1
 8000d76:	430a      	orrs	r2, r1
 8000d78:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d7a:	f7ff fc91 	bl	80006a0 <HAL_GetTick>
 8000d7e:	0003      	movs	r3, r0
 8000d80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d82:	e008      	b.n	8000d96 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d84:	f7ff fc8c 	bl	80006a0 <HAL_GetTick>
 8000d88:	0002      	movs	r2, r0
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d901      	bls.n	8000d96 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	e227      	b.n	80011e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d96:	4b59      	ldr	r3, [pc, #356]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	d0f1      	beq.n	8000d84 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da0:	4b56      	ldr	r3, [pc, #344]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	22f8      	movs	r2, #248	@ 0xf8
 8000da6:	4393      	bics	r3, r2
 8000da8:	0019      	movs	r1, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	691b      	ldr	r3, [r3, #16]
 8000dae:	00da      	lsls	r2, r3, #3
 8000db0:	4b52      	ldr	r3, [pc, #328]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000db2:	430a      	orrs	r2, r1
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	e018      	b.n	8000dea <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000db8:	4b50      	ldr	r3, [pc, #320]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b4f      	ldr	r3, [pc, #316]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	438a      	bics	r2, r1
 8000dc2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc4:	f7ff fc6c 	bl	80006a0 <HAL_GetTick>
 8000dc8:	0003      	movs	r3, r0
 8000dca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dcc:	e008      	b.n	8000de0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dce:	f7ff fc67 	bl	80006a0 <HAL_GetTick>
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d901      	bls.n	8000de0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e202      	b.n	80011e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000de0:	4b46      	ldr	r3, [pc, #280]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2202      	movs	r2, #2
 8000de6:	4013      	ands	r3, r2
 8000de8:	d1f1      	bne.n	8000dce <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2208      	movs	r2, #8
 8000df0:	4013      	ands	r3, r2
 8000df2:	d036      	beq.n	8000e62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69db      	ldr	r3, [r3, #28]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d019      	beq.n	8000e30 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dfc:	4b3f      	ldr	r3, [pc, #252]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000dfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e00:	4b3e      	ldr	r3, [pc, #248]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000e02:	2101      	movs	r1, #1
 8000e04:	430a      	orrs	r2, r1
 8000e06:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e08:	f7ff fc4a 	bl	80006a0 <HAL_GetTick>
 8000e0c:	0003      	movs	r3, r0
 8000e0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e10:	e008      	b.n	8000e24 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e12:	f7ff fc45 	bl	80006a0 <HAL_GetTick>
 8000e16:	0002      	movs	r2, r0
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	1ad3      	subs	r3, r2, r3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d901      	bls.n	8000e24 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000e20:	2303      	movs	r3, #3
 8000e22:	e1e0      	b.n	80011e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e24:	4b35      	ldr	r3, [pc, #212]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e28:	2202      	movs	r2, #2
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	d0f1      	beq.n	8000e12 <HAL_RCC_OscConfig+0x242>
 8000e2e:	e018      	b.n	8000e62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e30:	4b32      	ldr	r3, [pc, #200]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000e32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e34:	4b31      	ldr	r3, [pc, #196]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000e36:	2101      	movs	r1, #1
 8000e38:	438a      	bics	r2, r1
 8000e3a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e3c:	f7ff fc30 	bl	80006a0 <HAL_GetTick>
 8000e40:	0003      	movs	r3, r0
 8000e42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e44:	e008      	b.n	8000e58 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e46:	f7ff fc2b 	bl	80006a0 <HAL_GetTick>
 8000e4a:	0002      	movs	r2, r0
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d901      	bls.n	8000e58 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000e54:	2303      	movs	r3, #3
 8000e56:	e1c6      	b.n	80011e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e58:	4b28      	ldr	r3, [pc, #160]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	4013      	ands	r3, r2
 8000e60:	d1f1      	bne.n	8000e46 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2204      	movs	r2, #4
 8000e68:	4013      	ands	r3, r2
 8000e6a:	d100      	bne.n	8000e6e <HAL_RCC_OscConfig+0x29e>
 8000e6c:	e0b4      	b.n	8000fd8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e6e:	201f      	movs	r0, #31
 8000e70:	183b      	adds	r3, r7, r0
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e76:	4b21      	ldr	r3, [pc, #132]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000e78:	69da      	ldr	r2, [r3, #28]
 8000e7a:	2380      	movs	r3, #128	@ 0x80
 8000e7c:	055b      	lsls	r3, r3, #21
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d110      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	4b1e      	ldr	r3, [pc, #120]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000e84:	69da      	ldr	r2, [r3, #28]
 8000e86:	4b1d      	ldr	r3, [pc, #116]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000e88:	2180      	movs	r1, #128	@ 0x80
 8000e8a:	0549      	lsls	r1, r1, #21
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	61da      	str	r2, [r3, #28]
 8000e90:	4b1a      	ldr	r3, [pc, #104]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000e92:	69da      	ldr	r2, [r3, #28]
 8000e94:	2380      	movs	r3, #128	@ 0x80
 8000e96:	055b      	lsls	r3, r3, #21
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e9e:	183b      	adds	r3, r7, r0
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea4:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <HAL_RCC_OscConfig+0x338>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	2380      	movs	r3, #128	@ 0x80
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4013      	ands	r3, r2
 8000eae:	d11a      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eb0:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <HAL_RCC_OscConfig+0x338>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <HAL_RCC_OscConfig+0x338>)
 8000eb6:	2180      	movs	r1, #128	@ 0x80
 8000eb8:	0049      	lsls	r1, r1, #1
 8000eba:	430a      	orrs	r2, r1
 8000ebc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ebe:	f7ff fbef 	bl	80006a0 <HAL_GetTick>
 8000ec2:	0003      	movs	r3, r0
 8000ec4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ec8:	f7ff fbea 	bl	80006a0 <HAL_GetTick>
 8000ecc:	0002      	movs	r2, r0
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b64      	cmp	r3, #100	@ 0x64
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e185      	b.n	80011e6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eda:	4b0b      	ldr	r3, [pc, #44]	@ (8000f08 <HAL_RCC_OscConfig+0x338>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	2380      	movs	r3, #128	@ 0x80
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d0f0      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d10e      	bne.n	8000f0c <HAL_RCC_OscConfig+0x33c>
 8000eee:	4b03      	ldr	r3, [pc, #12]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000ef0:	6a1a      	ldr	r2, [r3, #32]
 8000ef2:	4b02      	ldr	r3, [pc, #8]	@ (8000efc <HAL_RCC_OscConfig+0x32c>)
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	430a      	orrs	r2, r1
 8000ef8:	621a      	str	r2, [r3, #32]
 8000efa:	e035      	b.n	8000f68 <HAL_RCC_OscConfig+0x398>
 8000efc:	40021000 	.word	0x40021000
 8000f00:	fffeffff 	.word	0xfffeffff
 8000f04:	fffbffff 	.word	0xfffbffff
 8000f08:	40007000 	.word	0x40007000
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10c      	bne.n	8000f2e <HAL_RCC_OscConfig+0x35e>
 8000f14:	4bb6      	ldr	r3, [pc, #728]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8000f16:	6a1a      	ldr	r2, [r3, #32]
 8000f18:	4bb5      	ldr	r3, [pc, #724]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	438a      	bics	r2, r1
 8000f1e:	621a      	str	r2, [r3, #32]
 8000f20:	4bb3      	ldr	r3, [pc, #716]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8000f22:	6a1a      	ldr	r2, [r3, #32]
 8000f24:	4bb2      	ldr	r3, [pc, #712]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8000f26:	2104      	movs	r1, #4
 8000f28:	438a      	bics	r2, r1
 8000f2a:	621a      	str	r2, [r3, #32]
 8000f2c:	e01c      	b.n	8000f68 <HAL_RCC_OscConfig+0x398>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	2b05      	cmp	r3, #5
 8000f34:	d10c      	bne.n	8000f50 <HAL_RCC_OscConfig+0x380>
 8000f36:	4bae      	ldr	r3, [pc, #696]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8000f38:	6a1a      	ldr	r2, [r3, #32]
 8000f3a:	4bad      	ldr	r3, [pc, #692]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8000f3c:	2104      	movs	r1, #4
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	621a      	str	r2, [r3, #32]
 8000f42:	4bab      	ldr	r3, [pc, #684]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8000f44:	6a1a      	ldr	r2, [r3, #32]
 8000f46:	4baa      	ldr	r3, [pc, #680]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8000f48:	2101      	movs	r1, #1
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	621a      	str	r2, [r3, #32]
 8000f4e:	e00b      	b.n	8000f68 <HAL_RCC_OscConfig+0x398>
 8000f50:	4ba7      	ldr	r3, [pc, #668]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8000f52:	6a1a      	ldr	r2, [r3, #32]
 8000f54:	4ba6      	ldr	r3, [pc, #664]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8000f56:	2101      	movs	r1, #1
 8000f58:	438a      	bics	r2, r1
 8000f5a:	621a      	str	r2, [r3, #32]
 8000f5c:	4ba4      	ldr	r3, [pc, #656]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8000f5e:	6a1a      	ldr	r2, [r3, #32]
 8000f60:	4ba3      	ldr	r3, [pc, #652]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8000f62:	2104      	movs	r1, #4
 8000f64:	438a      	bics	r2, r1
 8000f66:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d014      	beq.n	8000f9a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f70:	f7ff fb96 	bl	80006a0 <HAL_GetTick>
 8000f74:	0003      	movs	r3, r0
 8000f76:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f78:	e009      	b.n	8000f8e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f7a:	f7ff fb91 	bl	80006a0 <HAL_GetTick>
 8000f7e:	0002      	movs	r2, r0
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	4a9b      	ldr	r2, [pc, #620]	@ (80011f4 <HAL_RCC_OscConfig+0x624>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e12b      	b.n	80011e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f8e:	4b98      	ldr	r3, [pc, #608]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8000f90:	6a1b      	ldr	r3, [r3, #32]
 8000f92:	2202      	movs	r2, #2
 8000f94:	4013      	ands	r3, r2
 8000f96:	d0f0      	beq.n	8000f7a <HAL_RCC_OscConfig+0x3aa>
 8000f98:	e013      	b.n	8000fc2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f9a:	f7ff fb81 	bl	80006a0 <HAL_GetTick>
 8000f9e:	0003      	movs	r3, r0
 8000fa0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fa2:	e009      	b.n	8000fb8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fa4:	f7ff fb7c 	bl	80006a0 <HAL_GetTick>
 8000fa8:	0002      	movs	r2, r0
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	4a91      	ldr	r2, [pc, #580]	@ (80011f4 <HAL_RCC_OscConfig+0x624>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d901      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e116      	b.n	80011e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fb8:	4b8d      	ldr	r3, [pc, #564]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	d1f0      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000fc2:	231f      	movs	r3, #31
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d105      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fcc:	4b88      	ldr	r3, [pc, #544]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8000fce:	69da      	ldr	r2, [r3, #28]
 8000fd0:	4b87      	ldr	r3, [pc, #540]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8000fd2:	4989      	ldr	r1, [pc, #548]	@ (80011f8 <HAL_RCC_OscConfig+0x628>)
 8000fd4:	400a      	ands	r2, r1
 8000fd6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2210      	movs	r2, #16
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d063      	beq.n	80010aa <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d12a      	bne.n	8001040 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000fea:	4b81      	ldr	r3, [pc, #516]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8000fec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fee:	4b80      	ldr	r3, [pc, #512]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8000ff0:	2104      	movs	r1, #4
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000ff6:	4b7e      	ldr	r3, [pc, #504]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8000ff8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ffa:	4b7d      	ldr	r3, [pc, #500]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	430a      	orrs	r2, r1
 8001000:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001002:	f7ff fb4d 	bl	80006a0 <HAL_GetTick>
 8001006:	0003      	movs	r3, r0
 8001008:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800100c:	f7ff fb48 	bl	80006a0 <HAL_GetTick>
 8001010:	0002      	movs	r2, r0
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e0e3      	b.n	80011e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800101e:	4b74      	ldr	r3, [pc, #464]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8001020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001022:	2202      	movs	r2, #2
 8001024:	4013      	ands	r3, r2
 8001026:	d0f1      	beq.n	800100c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001028:	4b71      	ldr	r3, [pc, #452]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 800102a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800102c:	22f8      	movs	r2, #248	@ 0xf8
 800102e:	4393      	bics	r3, r2
 8001030:	0019      	movs	r1, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	00da      	lsls	r2, r3, #3
 8001038:	4b6d      	ldr	r3, [pc, #436]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 800103a:	430a      	orrs	r2, r1
 800103c:	635a      	str	r2, [r3, #52]	@ 0x34
 800103e:	e034      	b.n	80010aa <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	3305      	adds	r3, #5
 8001046:	d111      	bne.n	800106c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001048:	4b69      	ldr	r3, [pc, #420]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 800104a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800104c:	4b68      	ldr	r3, [pc, #416]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 800104e:	2104      	movs	r1, #4
 8001050:	438a      	bics	r2, r1
 8001052:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001054:	4b66      	ldr	r3, [pc, #408]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8001056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001058:	22f8      	movs	r2, #248	@ 0xf8
 800105a:	4393      	bics	r3, r2
 800105c:	0019      	movs	r1, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	699b      	ldr	r3, [r3, #24]
 8001062:	00da      	lsls	r2, r3, #3
 8001064:	4b62      	ldr	r3, [pc, #392]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8001066:	430a      	orrs	r2, r1
 8001068:	635a      	str	r2, [r3, #52]	@ 0x34
 800106a:	e01e      	b.n	80010aa <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800106c:	4b60      	ldr	r3, [pc, #384]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 800106e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001070:	4b5f      	ldr	r3, [pc, #380]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8001072:	2104      	movs	r1, #4
 8001074:	430a      	orrs	r2, r1
 8001076:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001078:	4b5d      	ldr	r3, [pc, #372]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 800107a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800107c:	4b5c      	ldr	r3, [pc, #368]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 800107e:	2101      	movs	r1, #1
 8001080:	438a      	bics	r2, r1
 8001082:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001084:	f7ff fb0c 	bl	80006a0 <HAL_GetTick>
 8001088:	0003      	movs	r3, r0
 800108a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800108e:	f7ff fb07 	bl	80006a0 <HAL_GetTick>
 8001092:	0002      	movs	r2, r0
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e0a2      	b.n	80011e6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010a0:	4b53      	ldr	r3, [pc, #332]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 80010a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010a4:	2202      	movs	r2, #2
 80010a6:	4013      	ands	r3, r2
 80010a8:	d1f1      	bne.n	800108e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a1b      	ldr	r3, [r3, #32]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d100      	bne.n	80010b4 <HAL_RCC_OscConfig+0x4e4>
 80010b2:	e097      	b.n	80011e4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010b4:	4b4e      	ldr	r3, [pc, #312]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	220c      	movs	r2, #12
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d100      	bne.n	80010c2 <HAL_RCC_OscConfig+0x4f2>
 80010c0:	e06b      	b.n	800119a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d14c      	bne.n	8001164 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ca:	4b49      	ldr	r3, [pc, #292]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b48      	ldr	r3, [pc, #288]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 80010d0:	494a      	ldr	r1, [pc, #296]	@ (80011fc <HAL_RCC_OscConfig+0x62c>)
 80010d2:	400a      	ands	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff fae3 	bl	80006a0 <HAL_GetTick>
 80010da:	0003      	movs	r3, r0
 80010dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010e0:	f7ff fade 	bl	80006a0 <HAL_GetTick>
 80010e4:	0002      	movs	r2, r0
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e079      	b.n	80011e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f2:	4b3f      	ldr	r3, [pc, #252]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	2380      	movs	r3, #128	@ 0x80
 80010f8:	049b      	lsls	r3, r3, #18
 80010fa:	4013      	ands	r3, r2
 80010fc:	d1f0      	bne.n	80010e0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010fe:	4b3c      	ldr	r3, [pc, #240]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8001100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001102:	220f      	movs	r2, #15
 8001104:	4393      	bics	r3, r2
 8001106:	0019      	movs	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800110c:	4b38      	ldr	r3, [pc, #224]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 800110e:	430a      	orrs	r2, r1
 8001110:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001112:	4b37      	ldr	r3, [pc, #220]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	4a3a      	ldr	r2, [pc, #232]	@ (8001200 <HAL_RCC_OscConfig+0x630>)
 8001118:	4013      	ands	r3, r2
 800111a:	0019      	movs	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001124:	431a      	orrs	r2, r3
 8001126:	4b32      	ldr	r3, [pc, #200]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8001128:	430a      	orrs	r2, r1
 800112a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800112c:	4b30      	ldr	r3, [pc, #192]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b2f      	ldr	r3, [pc, #188]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8001132:	2180      	movs	r1, #128	@ 0x80
 8001134:	0449      	lsls	r1, r1, #17
 8001136:	430a      	orrs	r2, r1
 8001138:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113a:	f7ff fab1 	bl	80006a0 <HAL_GetTick>
 800113e:	0003      	movs	r3, r0
 8001140:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001144:	f7ff faac 	bl	80006a0 <HAL_GetTick>
 8001148:	0002      	movs	r2, r0
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e047      	b.n	80011e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001156:	4b26      	ldr	r3, [pc, #152]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	2380      	movs	r3, #128	@ 0x80
 800115c:	049b      	lsls	r3, r3, #18
 800115e:	4013      	ands	r3, r2
 8001160:	d0f0      	beq.n	8001144 <HAL_RCC_OscConfig+0x574>
 8001162:	e03f      	b.n	80011e4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001164:	4b22      	ldr	r3, [pc, #136]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b21      	ldr	r3, [pc, #132]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 800116a:	4924      	ldr	r1, [pc, #144]	@ (80011fc <HAL_RCC_OscConfig+0x62c>)
 800116c:	400a      	ands	r2, r1
 800116e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001170:	f7ff fa96 	bl	80006a0 <HAL_GetTick>
 8001174:	0003      	movs	r3, r0
 8001176:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800117a:	f7ff fa91 	bl	80006a0 <HAL_GetTick>
 800117e:	0002      	movs	r2, r0
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e02c      	b.n	80011e6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800118c:	4b18      	ldr	r3, [pc, #96]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	2380      	movs	r3, #128	@ 0x80
 8001192:	049b      	lsls	r3, r3, #18
 8001194:	4013      	ands	r3, r2
 8001196:	d1f0      	bne.n	800117a <HAL_RCC_OscConfig+0x5aa>
 8001198:	e024      	b.n	80011e4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a1b      	ldr	r3, [r3, #32]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d101      	bne.n	80011a6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e01f      	b.n	80011e6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80011a6:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80011ac:	4b10      	ldr	r3, [pc, #64]	@ (80011f0 <HAL_RCC_OscConfig+0x620>)
 80011ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	2380      	movs	r3, #128	@ 0x80
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	401a      	ands	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011be:	429a      	cmp	r2, r3
 80011c0:	d10e      	bne.n	80011e0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	220f      	movs	r2, #15
 80011c6:	401a      	ands	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d107      	bne.n	80011e0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	23f0      	movs	r3, #240	@ 0xf0
 80011d4:	039b      	lsls	r3, r3, #14
 80011d6:	401a      	ands	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011dc:	429a      	cmp	r2, r3
 80011de:	d001      	beq.n	80011e4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	0018      	movs	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b008      	add	sp, #32
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	40021000 	.word	0x40021000
 80011f4:	00001388 	.word	0x00001388
 80011f8:	efffffff 	.word	0xefffffff
 80011fc:	feffffff 	.word	0xfeffffff
 8001200:	ffc2ffff 	.word	0xffc2ffff

08001204 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d101      	bne.n	8001218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e0b3      	b.n	8001380 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001218:	4b5b      	ldr	r3, [pc, #364]	@ (8001388 <HAL_RCC_ClockConfig+0x184>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2201      	movs	r2, #1
 800121e:	4013      	ands	r3, r2
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d911      	bls.n	800124a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001226:	4b58      	ldr	r3, [pc, #352]	@ (8001388 <HAL_RCC_ClockConfig+0x184>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2201      	movs	r2, #1
 800122c:	4393      	bics	r3, r2
 800122e:	0019      	movs	r1, r3
 8001230:	4b55      	ldr	r3, [pc, #340]	@ (8001388 <HAL_RCC_ClockConfig+0x184>)
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001238:	4b53      	ldr	r3, [pc, #332]	@ (8001388 <HAL_RCC_ClockConfig+0x184>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2201      	movs	r2, #1
 800123e:	4013      	ands	r3, r2
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d001      	beq.n	800124a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e09a      	b.n	8001380 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2202      	movs	r2, #2
 8001250:	4013      	ands	r3, r2
 8001252:	d015      	beq.n	8001280 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2204      	movs	r2, #4
 800125a:	4013      	ands	r3, r2
 800125c:	d006      	beq.n	800126c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800125e:	4b4b      	ldr	r3, [pc, #300]	@ (800138c <HAL_RCC_ClockConfig+0x188>)
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	4b4a      	ldr	r3, [pc, #296]	@ (800138c <HAL_RCC_ClockConfig+0x188>)
 8001264:	21e0      	movs	r1, #224	@ 0xe0
 8001266:	00c9      	lsls	r1, r1, #3
 8001268:	430a      	orrs	r2, r1
 800126a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800126c:	4b47      	ldr	r3, [pc, #284]	@ (800138c <HAL_RCC_ClockConfig+0x188>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	22f0      	movs	r2, #240	@ 0xf0
 8001272:	4393      	bics	r3, r2
 8001274:	0019      	movs	r1, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	4b44      	ldr	r3, [pc, #272]	@ (800138c <HAL_RCC_ClockConfig+0x188>)
 800127c:	430a      	orrs	r2, r1
 800127e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2201      	movs	r2, #1
 8001286:	4013      	ands	r3, r2
 8001288:	d040      	beq.n	800130c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d107      	bne.n	80012a2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001292:	4b3e      	ldr	r3, [pc, #248]	@ (800138c <HAL_RCC_ClockConfig+0x188>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	2380      	movs	r3, #128	@ 0x80
 8001298:	029b      	lsls	r3, r3, #10
 800129a:	4013      	ands	r3, r2
 800129c:	d114      	bne.n	80012c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e06e      	b.n	8001380 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d107      	bne.n	80012ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012aa:	4b38      	ldr	r3, [pc, #224]	@ (800138c <HAL_RCC_ClockConfig+0x188>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	2380      	movs	r3, #128	@ 0x80
 80012b0:	049b      	lsls	r3, r3, #18
 80012b2:	4013      	ands	r3, r2
 80012b4:	d108      	bne.n	80012c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e062      	b.n	8001380 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ba:	4b34      	ldr	r3, [pc, #208]	@ (800138c <HAL_RCC_ClockConfig+0x188>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2202      	movs	r2, #2
 80012c0:	4013      	ands	r3, r2
 80012c2:	d101      	bne.n	80012c8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e05b      	b.n	8001380 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012c8:	4b30      	ldr	r3, [pc, #192]	@ (800138c <HAL_RCC_ClockConfig+0x188>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2203      	movs	r2, #3
 80012ce:	4393      	bics	r3, r2
 80012d0:	0019      	movs	r1, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	4b2d      	ldr	r3, [pc, #180]	@ (800138c <HAL_RCC_ClockConfig+0x188>)
 80012d8:	430a      	orrs	r2, r1
 80012da:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012dc:	f7ff f9e0 	bl	80006a0 <HAL_GetTick>
 80012e0:	0003      	movs	r3, r0
 80012e2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e4:	e009      	b.n	80012fa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e6:	f7ff f9db 	bl	80006a0 <HAL_GetTick>
 80012ea:	0002      	movs	r2, r0
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	4a27      	ldr	r2, [pc, #156]	@ (8001390 <HAL_RCC_ClockConfig+0x18c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e042      	b.n	8001380 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fa:	4b24      	ldr	r3, [pc, #144]	@ (800138c <HAL_RCC_ClockConfig+0x188>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	220c      	movs	r2, #12
 8001300:	401a      	ands	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	429a      	cmp	r2, r3
 800130a:	d1ec      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800130c:	4b1e      	ldr	r3, [pc, #120]	@ (8001388 <HAL_RCC_ClockConfig+0x184>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2201      	movs	r2, #1
 8001312:	4013      	ands	r3, r2
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	d211      	bcs.n	800133e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800131a:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <HAL_RCC_ClockConfig+0x184>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2201      	movs	r2, #1
 8001320:	4393      	bics	r3, r2
 8001322:	0019      	movs	r1, r3
 8001324:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <HAL_RCC_ClockConfig+0x184>)
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	430a      	orrs	r2, r1
 800132a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800132c:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <HAL_RCC_ClockConfig+0x184>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2201      	movs	r2, #1
 8001332:	4013      	ands	r3, r2
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d001      	beq.n	800133e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e020      	b.n	8001380 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2204      	movs	r2, #4
 8001344:	4013      	ands	r3, r2
 8001346:	d009      	beq.n	800135c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001348:	4b10      	ldr	r3, [pc, #64]	@ (800138c <HAL_RCC_ClockConfig+0x188>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	4a11      	ldr	r2, [pc, #68]	@ (8001394 <HAL_RCC_ClockConfig+0x190>)
 800134e:	4013      	ands	r3, r2
 8001350:	0019      	movs	r1, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68da      	ldr	r2, [r3, #12]
 8001356:	4b0d      	ldr	r3, [pc, #52]	@ (800138c <HAL_RCC_ClockConfig+0x188>)
 8001358:	430a      	orrs	r2, r1
 800135a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800135c:	f000 f820 	bl	80013a0 <HAL_RCC_GetSysClockFreq>
 8001360:	0001      	movs	r1, r0
 8001362:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <HAL_RCC_ClockConfig+0x188>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	220f      	movs	r2, #15
 800136a:	4013      	ands	r3, r2
 800136c:	4a0a      	ldr	r2, [pc, #40]	@ (8001398 <HAL_RCC_ClockConfig+0x194>)
 800136e:	5cd3      	ldrb	r3, [r2, r3]
 8001370:	000a      	movs	r2, r1
 8001372:	40da      	lsrs	r2, r3
 8001374:	4b09      	ldr	r3, [pc, #36]	@ (800139c <HAL_RCC_ClockConfig+0x198>)
 8001376:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001378:	2000      	movs	r0, #0
 800137a:	f7ff f94b 	bl	8000614 <HAL_InitTick>
  
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	0018      	movs	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	b004      	add	sp, #16
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40022000 	.word	0x40022000
 800138c:	40021000 	.word	0x40021000
 8001390:	00001388 	.word	0x00001388
 8001394:	fffff8ff 	.word	0xfffff8ff
 8001398:	080031bc 	.word	0x080031bc
 800139c:	20000000 	.word	0x20000000

080013a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80013ba:	4b20      	ldr	r3, [pc, #128]	@ (800143c <HAL_RCC_GetSysClockFreq+0x9c>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	220c      	movs	r2, #12
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d002      	beq.n	80013d0 <HAL_RCC_GetSysClockFreq+0x30>
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d003      	beq.n	80013d6 <HAL_RCC_GetSysClockFreq+0x36>
 80013ce:	e02c      	b.n	800142a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013d2:	613b      	str	r3, [r7, #16]
      break;
 80013d4:	e02c      	b.n	8001430 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	0c9b      	lsrs	r3, r3, #18
 80013da:	220f      	movs	r2, #15
 80013dc:	4013      	ands	r3, r2
 80013de:	4a19      	ldr	r2, [pc, #100]	@ (8001444 <HAL_RCC_GetSysClockFreq+0xa4>)
 80013e0:	5cd3      	ldrb	r3, [r2, r3]
 80013e2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80013e4:	4b15      	ldr	r3, [pc, #84]	@ (800143c <HAL_RCC_GetSysClockFreq+0x9c>)
 80013e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013e8:	220f      	movs	r2, #15
 80013ea:	4013      	ands	r3, r2
 80013ec:	4a16      	ldr	r2, [pc, #88]	@ (8001448 <HAL_RCC_GetSysClockFreq+0xa8>)
 80013ee:	5cd3      	ldrb	r3, [r2, r3]
 80013f0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	2380      	movs	r3, #128	@ 0x80
 80013f6:	025b      	lsls	r3, r3, #9
 80013f8:	4013      	ands	r3, r2
 80013fa:	d009      	beq.n	8001410 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	4810      	ldr	r0, [pc, #64]	@ (8001440 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001400:	f7fe fe8c 	bl	800011c <__udivsi3>
 8001404:	0003      	movs	r3, r0
 8001406:	001a      	movs	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4353      	muls	r3, r2
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	e009      	b.n	8001424 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	000a      	movs	r2, r1
 8001414:	0152      	lsls	r2, r2, #5
 8001416:	1a52      	subs	r2, r2, r1
 8001418:	0193      	lsls	r3, r2, #6
 800141a:	1a9b      	subs	r3, r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	185b      	adds	r3, r3, r1
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	613b      	str	r3, [r7, #16]
      break;
 8001428:	e002      	b.n	8001430 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800142a:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <HAL_RCC_GetSysClockFreq+0xa0>)
 800142c:	613b      	str	r3, [r7, #16]
      break;
 800142e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001430:	693b      	ldr	r3, [r7, #16]
}
 8001432:	0018      	movs	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	b006      	add	sp, #24
 8001438:	bd80      	pop	{r7, pc}
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	40021000 	.word	0x40021000
 8001440:	007a1200 	.word	0x007a1200
 8001444:	080031d4 	.word	0x080031d4
 8001448:	080031e4 	.word	0x080031e4

0800144c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001450:	4b02      	ldr	r3, [pc, #8]	@ (800145c <HAL_RCC_GetHCLKFreq+0x10>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	0018      	movs	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	46c0      	nop			@ (mov r8, r8)
 800145c:	20000000 	.word	0x20000000

08001460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001464:	f7ff fff2 	bl	800144c <HAL_RCC_GetHCLKFreq>
 8001468:	0001      	movs	r1, r0
 800146a:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <HAL_RCC_GetPCLK1Freq+0x24>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	0a1b      	lsrs	r3, r3, #8
 8001470:	2207      	movs	r2, #7
 8001472:	4013      	ands	r3, r2
 8001474:	4a04      	ldr	r2, [pc, #16]	@ (8001488 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001476:	5cd3      	ldrb	r3, [r2, r3]
 8001478:	40d9      	lsrs	r1, r3
 800147a:	000b      	movs	r3, r1
}    
 800147c:	0018      	movs	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	46c0      	nop			@ (mov r8, r8)
 8001484:	40021000 	.word	0x40021000
 8001488:	080031cc 	.word	0x080031cc

0800148c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e044      	b.n	8001528 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d107      	bne.n	80014b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2278      	movs	r2, #120	@ 0x78
 80014aa:	2100      	movs	r1, #0
 80014ac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	0018      	movs	r0, r3
 80014b2:	f000 f87d 	bl	80015b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2224      	movs	r2, #36	@ 0x24
 80014ba:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2101      	movs	r1, #1
 80014c8:	438a      	bics	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	0018      	movs	r0, r3
 80014d8:	f000 f9ba 	bl	8001850 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	0018      	movs	r0, r3
 80014e0:	f000 f876 	bl	80015d0 <UART_SetConfig>
 80014e4:	0003      	movs	r3, r0
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d101      	bne.n	80014ee <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e01c      	b.n	8001528 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	490d      	ldr	r1, [pc, #52]	@ (8001530 <HAL_UART_Init+0xa4>)
 80014fa:	400a      	ands	r2, r1
 80014fc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	212a      	movs	r1, #42	@ 0x2a
 800150a:	438a      	bics	r2, r1
 800150c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2101      	movs	r1, #1
 800151a:	430a      	orrs	r2, r1
 800151c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	0018      	movs	r0, r3
 8001522:	f000 fa49 	bl	80019b8 <UART_CheckIdleState>
 8001526:	0003      	movs	r3, r0
}
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	b002      	add	sp, #8
 800152e:	bd80      	pop	{r7, pc}
 8001530:	ffffb7ff 	.word	0xffffb7ff

08001534 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e030      	b.n	80015a8 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2224      	movs	r2, #36	@ 0x24
 800154a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2101      	movs	r1, #1
 8001558:	438a      	bics	r2, r1
 800155a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2200      	movs	r2, #0
 800156a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	0018      	movs	r0, r3
 8001578:	f000 f822 	bl	80015c0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2284      	movs	r2, #132	@ 0x84
 8001580:	2100      	movs	r1, #0
 8001582:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2280      	movs	r2, #128	@ 0x80
 800158e:	2100      	movs	r1, #0
 8001590:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2278      	movs	r2, #120	@ 0x78
 80015a2:	2100      	movs	r1, #0
 80015a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	0018      	movs	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b002      	add	sp, #8
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80015b8:	46c0      	nop			@ (mov r8, r8)
 80015ba:	46bd      	mov	sp, r7
 80015bc:	b002      	add	sp, #8
 80015be:	bd80      	pop	{r7, pc}

080015c0 <HAL_UART_MspDeInit>:
  * @brief DeInitialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 80015c8:	46c0      	nop			@ (mov r8, r8)
 80015ca:	46bd      	mov	sp, r7
 80015cc:	b002      	add	sp, #8
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80015d8:	231e      	movs	r3, #30
 80015da:	18fb      	adds	r3, r7, r3
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a8d      	ldr	r2, [pc, #564]	@ (8001834 <UART_SetConfig+0x264>)
 8001600:	4013      	ands	r3, r2
 8001602:	0019      	movs	r1, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	430a      	orrs	r2, r1
 800160c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4a88      	ldr	r2, [pc, #544]	@ (8001838 <UART_SetConfig+0x268>)
 8001616:	4013      	ands	r3, r2
 8001618:	0019      	movs	r1, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68da      	ldr	r2, [r3, #12]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	4313      	orrs	r3, r2
 8001634:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	4a7f      	ldr	r2, [pc, #508]	@ (800183c <UART_SetConfig+0x26c>)
 800163e:	4013      	ands	r3, r2
 8001640:	0019      	movs	r1, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	430a      	orrs	r2, r1
 800164a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a7b      	ldr	r2, [pc, #492]	@ (8001840 <UART_SetConfig+0x270>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d127      	bne.n	80016a6 <UART_SetConfig+0xd6>
 8001656:	4b7b      	ldr	r3, [pc, #492]	@ (8001844 <UART_SetConfig+0x274>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	2203      	movs	r2, #3
 800165c:	4013      	ands	r3, r2
 800165e:	2b03      	cmp	r3, #3
 8001660:	d00d      	beq.n	800167e <UART_SetConfig+0xae>
 8001662:	d81b      	bhi.n	800169c <UART_SetConfig+0xcc>
 8001664:	2b02      	cmp	r3, #2
 8001666:	d014      	beq.n	8001692 <UART_SetConfig+0xc2>
 8001668:	d818      	bhi.n	800169c <UART_SetConfig+0xcc>
 800166a:	2b00      	cmp	r3, #0
 800166c:	d002      	beq.n	8001674 <UART_SetConfig+0xa4>
 800166e:	2b01      	cmp	r3, #1
 8001670:	d00a      	beq.n	8001688 <UART_SetConfig+0xb8>
 8001672:	e013      	b.n	800169c <UART_SetConfig+0xcc>
 8001674:	231f      	movs	r3, #31
 8001676:	18fb      	adds	r3, r7, r3
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
 800167c:	e021      	b.n	80016c2 <UART_SetConfig+0xf2>
 800167e:	231f      	movs	r3, #31
 8001680:	18fb      	adds	r3, r7, r3
 8001682:	2202      	movs	r2, #2
 8001684:	701a      	strb	r2, [r3, #0]
 8001686:	e01c      	b.n	80016c2 <UART_SetConfig+0xf2>
 8001688:	231f      	movs	r3, #31
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	2204      	movs	r2, #4
 800168e:	701a      	strb	r2, [r3, #0]
 8001690:	e017      	b.n	80016c2 <UART_SetConfig+0xf2>
 8001692:	231f      	movs	r3, #31
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	2208      	movs	r2, #8
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	e012      	b.n	80016c2 <UART_SetConfig+0xf2>
 800169c:	231f      	movs	r3, #31
 800169e:	18fb      	adds	r3, r7, r3
 80016a0:	2210      	movs	r2, #16
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	e00d      	b.n	80016c2 <UART_SetConfig+0xf2>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a67      	ldr	r2, [pc, #412]	@ (8001848 <UART_SetConfig+0x278>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d104      	bne.n	80016ba <UART_SetConfig+0xea>
 80016b0:	231f      	movs	r3, #31
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
 80016b8:	e003      	b.n	80016c2 <UART_SetConfig+0xf2>
 80016ba:	231f      	movs	r3, #31
 80016bc:	18fb      	adds	r3, r7, r3
 80016be:	2210      	movs	r2, #16
 80016c0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69da      	ldr	r2, [r3, #28]
 80016c6:	2380      	movs	r3, #128	@ 0x80
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d15c      	bne.n	8001788 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80016ce:	231f      	movs	r3, #31
 80016d0:	18fb      	adds	r3, r7, r3
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d015      	beq.n	8001704 <UART_SetConfig+0x134>
 80016d8:	dc18      	bgt.n	800170c <UART_SetConfig+0x13c>
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d00d      	beq.n	80016fa <UART_SetConfig+0x12a>
 80016de:	dc15      	bgt.n	800170c <UART_SetConfig+0x13c>
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d002      	beq.n	80016ea <UART_SetConfig+0x11a>
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d005      	beq.n	80016f4 <UART_SetConfig+0x124>
 80016e8:	e010      	b.n	800170c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80016ea:	f7ff feb9 	bl	8001460 <HAL_RCC_GetPCLK1Freq>
 80016ee:	0003      	movs	r3, r0
 80016f0:	61bb      	str	r3, [r7, #24]
        break;
 80016f2:	e012      	b.n	800171a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80016f4:	4b55      	ldr	r3, [pc, #340]	@ (800184c <UART_SetConfig+0x27c>)
 80016f6:	61bb      	str	r3, [r7, #24]
        break;
 80016f8:	e00f      	b.n	800171a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80016fa:	f7ff fe51 	bl	80013a0 <HAL_RCC_GetSysClockFreq>
 80016fe:	0003      	movs	r3, r0
 8001700:	61bb      	str	r3, [r7, #24]
        break;
 8001702:	e00a      	b.n	800171a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001704:	2380      	movs	r3, #128	@ 0x80
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	61bb      	str	r3, [r7, #24]
        break;
 800170a:	e006      	b.n	800171a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001710:	231e      	movs	r3, #30
 8001712:	18fb      	adds	r3, r7, r3
 8001714:	2201      	movs	r2, #1
 8001716:	701a      	strb	r2, [r3, #0]
        break;
 8001718:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d100      	bne.n	8001722 <UART_SetConfig+0x152>
 8001720:	e07a      	b.n	8001818 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	005a      	lsls	r2, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	085b      	lsrs	r3, r3, #1
 800172c:	18d2      	adds	r2, r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	0019      	movs	r1, r3
 8001734:	0010      	movs	r0, r2
 8001736:	f7fe fcf1 	bl	800011c <__udivsi3>
 800173a:	0003      	movs	r3, r0
 800173c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	2b0f      	cmp	r3, #15
 8001742:	d91c      	bls.n	800177e <UART_SetConfig+0x1ae>
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	2380      	movs	r3, #128	@ 0x80
 8001748:	025b      	lsls	r3, r3, #9
 800174a:	429a      	cmp	r2, r3
 800174c:	d217      	bcs.n	800177e <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	b29a      	uxth	r2, r3
 8001752:	200e      	movs	r0, #14
 8001754:	183b      	adds	r3, r7, r0
 8001756:	210f      	movs	r1, #15
 8001758:	438a      	bics	r2, r1
 800175a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	085b      	lsrs	r3, r3, #1
 8001760:	b29b      	uxth	r3, r3
 8001762:	2207      	movs	r2, #7
 8001764:	4013      	ands	r3, r2
 8001766:	b299      	uxth	r1, r3
 8001768:	183b      	adds	r3, r7, r0
 800176a:	183a      	adds	r2, r7, r0
 800176c:	8812      	ldrh	r2, [r2, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	183a      	adds	r2, r7, r0
 8001778:	8812      	ldrh	r2, [r2, #0]
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	e04c      	b.n	8001818 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800177e:	231e      	movs	r3, #30
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
 8001786:	e047      	b.n	8001818 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001788:	231f      	movs	r3, #31
 800178a:	18fb      	adds	r3, r7, r3
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b08      	cmp	r3, #8
 8001790:	d015      	beq.n	80017be <UART_SetConfig+0x1ee>
 8001792:	dc18      	bgt.n	80017c6 <UART_SetConfig+0x1f6>
 8001794:	2b04      	cmp	r3, #4
 8001796:	d00d      	beq.n	80017b4 <UART_SetConfig+0x1e4>
 8001798:	dc15      	bgt.n	80017c6 <UART_SetConfig+0x1f6>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <UART_SetConfig+0x1d4>
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d005      	beq.n	80017ae <UART_SetConfig+0x1de>
 80017a2:	e010      	b.n	80017c6 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80017a4:	f7ff fe5c 	bl	8001460 <HAL_RCC_GetPCLK1Freq>
 80017a8:	0003      	movs	r3, r0
 80017aa:	61bb      	str	r3, [r7, #24]
        break;
 80017ac:	e012      	b.n	80017d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80017ae:	4b27      	ldr	r3, [pc, #156]	@ (800184c <UART_SetConfig+0x27c>)
 80017b0:	61bb      	str	r3, [r7, #24]
        break;
 80017b2:	e00f      	b.n	80017d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80017b4:	f7ff fdf4 	bl	80013a0 <HAL_RCC_GetSysClockFreq>
 80017b8:	0003      	movs	r3, r0
 80017ba:	61bb      	str	r3, [r7, #24]
        break;
 80017bc:	e00a      	b.n	80017d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80017be:	2380      	movs	r3, #128	@ 0x80
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	61bb      	str	r3, [r7, #24]
        break;
 80017c4:	e006      	b.n	80017d4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80017ca:	231e      	movs	r3, #30
 80017cc:	18fb      	adds	r3, r7, r3
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
        break;
 80017d2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d01e      	beq.n	8001818 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	085a      	lsrs	r2, r3, #1
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	18d2      	adds	r2, r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	0019      	movs	r1, r3
 80017ea:	0010      	movs	r0, r2
 80017ec:	f7fe fc96 	bl	800011c <__udivsi3>
 80017f0:	0003      	movs	r3, r0
 80017f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	2b0f      	cmp	r3, #15
 80017f8:	d90a      	bls.n	8001810 <UART_SetConfig+0x240>
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	2380      	movs	r3, #128	@ 0x80
 80017fe:	025b      	lsls	r3, r3, #9
 8001800:	429a      	cmp	r2, r3
 8001802:	d205      	bcs.n	8001810 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	b29a      	uxth	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	e003      	b.n	8001818 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8001810:	231e      	movs	r3, #30
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8001824:	231e      	movs	r3, #30
 8001826:	18fb      	adds	r3, r7, r3
 8001828:	781b      	ldrb	r3, [r3, #0]
}
 800182a:	0018      	movs	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	b008      	add	sp, #32
 8001830:	bd80      	pop	{r7, pc}
 8001832:	46c0      	nop			@ (mov r8, r8)
 8001834:	ffff69f3 	.word	0xffff69f3
 8001838:	ffffcfff 	.word	0xffffcfff
 800183c:	fffff4ff 	.word	0xfffff4ff
 8001840:	40013800 	.word	0x40013800
 8001844:	40021000 	.word	0x40021000
 8001848:	40004400 	.word	0x40004400
 800184c:	007a1200 	.word	0x007a1200

08001850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185c:	2208      	movs	r2, #8
 800185e:	4013      	ands	r3, r2
 8001860:	d00b      	beq.n	800187a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	4a4a      	ldr	r2, [pc, #296]	@ (8001994 <UART_AdvFeatureConfig+0x144>)
 800186a:	4013      	ands	r3, r2
 800186c:	0019      	movs	r1, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187e:	2201      	movs	r2, #1
 8001880:	4013      	ands	r3, r2
 8001882:	d00b      	beq.n	800189c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4a43      	ldr	r2, [pc, #268]	@ (8001998 <UART_AdvFeatureConfig+0x148>)
 800188c:	4013      	ands	r3, r2
 800188e:	0019      	movs	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a0:	2202      	movs	r2, #2
 80018a2:	4013      	ands	r3, r2
 80018a4:	d00b      	beq.n	80018be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	4a3b      	ldr	r2, [pc, #236]	@ (800199c <UART_AdvFeatureConfig+0x14c>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	0019      	movs	r1, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c2:	2204      	movs	r2, #4
 80018c4:	4013      	ands	r3, r2
 80018c6:	d00b      	beq.n	80018e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4a34      	ldr	r2, [pc, #208]	@ (80019a0 <UART_AdvFeatureConfig+0x150>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	0019      	movs	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e4:	2210      	movs	r2, #16
 80018e6:	4013      	ands	r3, r2
 80018e8:	d00b      	beq.n	8001902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	4a2c      	ldr	r2, [pc, #176]	@ (80019a4 <UART_AdvFeatureConfig+0x154>)
 80018f2:	4013      	ands	r3, r2
 80018f4:	0019      	movs	r1, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001906:	2220      	movs	r2, #32
 8001908:	4013      	ands	r3, r2
 800190a:	d00b      	beq.n	8001924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	4a25      	ldr	r2, [pc, #148]	@ (80019a8 <UART_AdvFeatureConfig+0x158>)
 8001914:	4013      	ands	r3, r2
 8001916:	0019      	movs	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001928:	2240      	movs	r2, #64	@ 0x40
 800192a:	4013      	ands	r3, r2
 800192c:	d01d      	beq.n	800196a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	4a1d      	ldr	r2, [pc, #116]	@ (80019ac <UART_AdvFeatureConfig+0x15c>)
 8001936:	4013      	ands	r3, r2
 8001938:	0019      	movs	r1, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800194a:	2380      	movs	r3, #128	@ 0x80
 800194c:	035b      	lsls	r3, r3, #13
 800194e:	429a      	cmp	r2, r3
 8001950:	d10b      	bne.n	800196a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	4a15      	ldr	r2, [pc, #84]	@ (80019b0 <UART_AdvFeatureConfig+0x160>)
 800195a:	4013      	ands	r3, r2
 800195c:	0019      	movs	r1, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196e:	2280      	movs	r2, #128	@ 0x80
 8001970:	4013      	ands	r3, r2
 8001972:	d00b      	beq.n	800198c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	4a0e      	ldr	r2, [pc, #56]	@ (80019b4 <UART_AdvFeatureConfig+0x164>)
 800197c:	4013      	ands	r3, r2
 800197e:	0019      	movs	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	605a      	str	r2, [r3, #4]
  }
}
 800198c:	46c0      	nop			@ (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	b002      	add	sp, #8
 8001992:	bd80      	pop	{r7, pc}
 8001994:	ffff7fff 	.word	0xffff7fff
 8001998:	fffdffff 	.word	0xfffdffff
 800199c:	fffeffff 	.word	0xfffeffff
 80019a0:	fffbffff 	.word	0xfffbffff
 80019a4:	ffffefff 	.word	0xffffefff
 80019a8:	ffffdfff 	.word	0xffffdfff
 80019ac:	ffefffff 	.word	0xffefffff
 80019b0:	ff9fffff 	.word	0xff9fffff
 80019b4:	fff7ffff 	.word	0xfff7ffff

080019b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b092      	sub	sp, #72	@ 0x48
 80019bc:	af02      	add	r7, sp, #8
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2284      	movs	r2, #132	@ 0x84
 80019c4:	2100      	movs	r1, #0
 80019c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80019c8:	f7fe fe6a 	bl	80006a0 <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2208      	movs	r2, #8
 80019d8:	4013      	ands	r3, r2
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d12c      	bne.n	8001a38 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80019de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019e0:	2280      	movs	r2, #128	@ 0x80
 80019e2:	0391      	lsls	r1, r2, #14
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	4a46      	ldr	r2, [pc, #280]	@ (8001b00 <UART_CheckIdleState+0x148>)
 80019e8:	9200      	str	r2, [sp, #0]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f000 f88c 	bl	8001b08 <UART_WaitOnFlagUntilTimeout>
 80019f0:	1e03      	subs	r3, r0, #0
 80019f2:	d021      	beq.n	8001a38 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019f4:	f3ef 8310 	mrs	r3, PRIMASK
 80019f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80019fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80019fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019fe:	2301      	movs	r3, #1
 8001a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a04:	f383 8810 	msr	PRIMASK, r3
}
 8001a08:	46c0      	nop			@ (mov r8, r8)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2180      	movs	r1, #128	@ 0x80
 8001a16:	438a      	bics	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a20:	f383 8810 	msr	PRIMASK, r3
}
 8001a24:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2220      	movs	r2, #32
 8001a2a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2278      	movs	r2, #120	@ 0x78
 8001a30:	2100      	movs	r1, #0
 8001a32:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e05f      	b.n	8001af8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2204      	movs	r2, #4
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d146      	bne.n	8001ad4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a48:	2280      	movs	r2, #128	@ 0x80
 8001a4a:	03d1      	lsls	r1, r2, #15
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	4a2c      	ldr	r2, [pc, #176]	@ (8001b00 <UART_CheckIdleState+0x148>)
 8001a50:	9200      	str	r2, [sp, #0]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f000 f858 	bl	8001b08 <UART_WaitOnFlagUntilTimeout>
 8001a58:	1e03      	subs	r3, r0, #0
 8001a5a:	d03b      	beq.n	8001ad4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8001a60:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a62:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a66:	2301      	movs	r3, #1
 8001a68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	f383 8810 	msr	PRIMASK, r3
}
 8001a70:	46c0      	nop			@ (mov r8, r8)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4921      	ldr	r1, [pc, #132]	@ (8001b04 <UART_CheckIdleState+0x14c>)
 8001a7e:	400a      	ands	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f383 8810 	msr	PRIMASK, r3
}
 8001a8c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8001a92:	61bb      	str	r3, [r7, #24]
  return(result);
 8001a94:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a96:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a98:	2301      	movs	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f383 8810 	msr	PRIMASK, r3
}
 8001aa2:	46c0      	nop			@ (mov r8, r8)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2101      	movs	r1, #1
 8001ab0:	438a      	bics	r2, r1
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ab6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
 8001aba:	f383 8810 	msr	PRIMASK, r3
}
 8001abe:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2280      	movs	r2, #128	@ 0x80
 8001ac4:	2120      	movs	r1, #32
 8001ac6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2278      	movs	r2, #120	@ 0x78
 8001acc:	2100      	movs	r1, #0
 8001ace:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e011      	b.n	8001af8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2280      	movs	r2, #128	@ 0x80
 8001ade:	2120      	movs	r1, #32
 8001ae0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2278      	movs	r2, #120	@ 0x78
 8001af2:	2100      	movs	r1, #0
 8001af4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	0018      	movs	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b010      	add	sp, #64	@ 0x40
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	01ffffff 	.word	0x01ffffff
 8001b04:	fffffedf 	.word	0xfffffedf

08001b08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	1dfb      	adds	r3, r7, #7
 8001b16:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b18:	e051      	b.n	8001bbe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	d04e      	beq.n	8001bbe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b20:	f7fe fdbe 	bl	80006a0 <HAL_GetTick>
 8001b24:	0002      	movs	r2, r0
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d302      	bcc.n	8001b36 <UART_WaitOnFlagUntilTimeout+0x2e>
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e051      	b.n	8001bde <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2204      	movs	r2, #4
 8001b42:	4013      	ands	r3, r2
 8001b44:	d03b      	beq.n	8001bbe <UART_WaitOnFlagUntilTimeout+0xb6>
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b80      	cmp	r3, #128	@ 0x80
 8001b4a:	d038      	beq.n	8001bbe <UART_WaitOnFlagUntilTimeout+0xb6>
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	2b40      	cmp	r3, #64	@ 0x40
 8001b50:	d035      	beq.n	8001bbe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	2208      	movs	r2, #8
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d111      	bne.n	8001b84 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2208      	movs	r2, #8
 8001b66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f000 f83c 	bl	8001be8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2284      	movs	r2, #132	@ 0x84
 8001b74:	2108      	movs	r1, #8
 8001b76:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2278      	movs	r2, #120	@ 0x78
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e02c      	b.n	8001bde <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	69da      	ldr	r2, [r3, #28]
 8001b8a:	2380      	movs	r3, #128	@ 0x80
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	401a      	ands	r2, r3
 8001b90:	2380      	movs	r3, #128	@ 0x80
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d112      	bne.n	8001bbe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2280      	movs	r2, #128	@ 0x80
 8001b9e:	0112      	lsls	r2, r2, #4
 8001ba0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f000 f81f 	bl	8001be8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2284      	movs	r2, #132	@ 0x84
 8001bae:	2120      	movs	r1, #32
 8001bb0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2278      	movs	r2, #120	@ 0x78
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e00f      	b.n	8001bde <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	425a      	negs	r2, r3
 8001bce:	4153      	adcs	r3, r2
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	001a      	movs	r2, r3
 8001bd4:	1dfb      	adds	r3, r7, #7
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d09e      	beq.n	8001b1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	0018      	movs	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b004      	add	sp, #16
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b08e      	sub	sp, #56	@ 0x38
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8001bf4:	617b      	str	r3, [r7, #20]
  return(result);
 8001bf6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	f383 8810 	msr	PRIMASK, r3
}
 8001c04:	46c0      	nop			@ (mov r8, r8)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4926      	ldr	r1, [pc, #152]	@ (8001cac <UART_EndRxTransfer+0xc4>)
 8001c12:	400a      	ands	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f383 8810 	msr	PRIMASK, r3
}
 8001c20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c22:	f3ef 8310 	mrs	r3, PRIMASK
 8001c26:	623b      	str	r3, [r7, #32]
  return(result);
 8001c28:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c32:	f383 8810 	msr	PRIMASK, r3
}
 8001c36:	46c0      	nop			@ (mov r8, r8)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2101      	movs	r1, #1
 8001c44:	438a      	bics	r2, r1
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c4e:	f383 8810 	msr	PRIMASK, r3
}
 8001c52:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d118      	bne.n	8001c8e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8001c60:	60bb      	str	r3, [r7, #8]
  return(result);
 8001c62:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c66:	2301      	movs	r3, #1
 8001c68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f383 8810 	msr	PRIMASK, r3
}
 8001c70:	46c0      	nop			@ (mov r8, r8)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2110      	movs	r1, #16
 8001c7e:	438a      	bics	r2, r1
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	f383 8810 	msr	PRIMASK, r3
}
 8001c8c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	2120      	movs	r1, #32
 8001c94:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b00e      	add	sp, #56	@ 0x38
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			@ (mov r8, r8)
 8001cac:	fffffedf 	.word	0xfffffedf

08001cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	0002      	movs	r2, r0
 8001cb8:	1dfb      	adds	r3, r7, #7
 8001cba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cbc:	1dfb      	adds	r3, r7, #7
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cc2:	d809      	bhi.n	8001cd8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cc4:	1dfb      	adds	r3, r7, #7
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	001a      	movs	r2, r3
 8001cca:	231f      	movs	r3, #31
 8001ccc:	401a      	ands	r2, r3
 8001cce:	4b04      	ldr	r3, [pc, #16]	@ (8001ce0 <__NVIC_EnableIRQ+0x30>)
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	4091      	lsls	r1, r2
 8001cd4:	000a      	movs	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]
  }
}
 8001cd8:	46c0      	nop			@ (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b002      	add	sp, #8
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	e000e100 	.word	0xe000e100

08001ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce4:	b590      	push	{r4, r7, lr}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	0002      	movs	r2, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	1dfb      	adds	r3, r7, #7
 8001cf0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cf2:	1dfb      	adds	r3, r7, #7
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cf8:	d828      	bhi.n	8001d4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cfa:	4a2f      	ldr	r2, [pc, #188]	@ (8001db8 <__NVIC_SetPriority+0xd4>)
 8001cfc:	1dfb      	adds	r3, r7, #7
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b25b      	sxtb	r3, r3
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	33c0      	adds	r3, #192	@ 0xc0
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	589b      	ldr	r3, [r3, r2]
 8001d0a:	1dfa      	adds	r2, r7, #7
 8001d0c:	7812      	ldrb	r2, [r2, #0]
 8001d0e:	0011      	movs	r1, r2
 8001d10:	2203      	movs	r2, #3
 8001d12:	400a      	ands	r2, r1
 8001d14:	00d2      	lsls	r2, r2, #3
 8001d16:	21ff      	movs	r1, #255	@ 0xff
 8001d18:	4091      	lsls	r1, r2
 8001d1a:	000a      	movs	r2, r1
 8001d1c:	43d2      	mvns	r2, r2
 8001d1e:	401a      	ands	r2, r3
 8001d20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	019b      	lsls	r3, r3, #6
 8001d26:	22ff      	movs	r2, #255	@ 0xff
 8001d28:	401a      	ands	r2, r3
 8001d2a:	1dfb      	adds	r3, r7, #7
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	0018      	movs	r0, r3
 8001d30:	2303      	movs	r3, #3
 8001d32:	4003      	ands	r3, r0
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d38:	481f      	ldr	r0, [pc, #124]	@ (8001db8 <__NVIC_SetPriority+0xd4>)
 8001d3a:	1dfb      	adds	r3, r7, #7
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	b25b      	sxtb	r3, r3
 8001d40:	089b      	lsrs	r3, r3, #2
 8001d42:	430a      	orrs	r2, r1
 8001d44:	33c0      	adds	r3, #192	@ 0xc0
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d4a:	e031      	b.n	8001db0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001dbc <__NVIC_SetPriority+0xd8>)
 8001d4e:	1dfb      	adds	r3, r7, #7
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	0019      	movs	r1, r3
 8001d54:	230f      	movs	r3, #15
 8001d56:	400b      	ands	r3, r1
 8001d58:	3b08      	subs	r3, #8
 8001d5a:	089b      	lsrs	r3, r3, #2
 8001d5c:	3306      	adds	r3, #6
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	18d3      	adds	r3, r2, r3
 8001d62:	3304      	adds	r3, #4
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	1dfa      	adds	r2, r7, #7
 8001d68:	7812      	ldrb	r2, [r2, #0]
 8001d6a:	0011      	movs	r1, r2
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	400a      	ands	r2, r1
 8001d70:	00d2      	lsls	r2, r2, #3
 8001d72:	21ff      	movs	r1, #255	@ 0xff
 8001d74:	4091      	lsls	r1, r2
 8001d76:	000a      	movs	r2, r1
 8001d78:	43d2      	mvns	r2, r2
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	019b      	lsls	r3, r3, #6
 8001d82:	22ff      	movs	r2, #255	@ 0xff
 8001d84:	401a      	ands	r2, r3
 8001d86:	1dfb      	adds	r3, r7, #7
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	4003      	ands	r3, r0
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d94:	4809      	ldr	r0, [pc, #36]	@ (8001dbc <__NVIC_SetPriority+0xd8>)
 8001d96:	1dfb      	adds	r3, r7, #7
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	001c      	movs	r4, r3
 8001d9c:	230f      	movs	r3, #15
 8001d9e:	4023      	ands	r3, r4
 8001da0:	3b08      	subs	r3, #8
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	430a      	orrs	r2, r1
 8001da6:	3306      	adds	r3, #6
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	18c3      	adds	r3, r0, r3
 8001dac:	3304      	adds	r3, #4
 8001dae:	601a      	str	r2, [r3, #0]
}
 8001db0:	46c0      	nop			@ (mov r8, r8)
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b003      	add	sp, #12
 8001db6:	bd90      	pop	{r4, r7, pc}
 8001db8:	e000e100 	.word	0xe000e100
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <button_init_interrupt>:


uint32_t counter_button = 0;
volatile uint32_t speed = 0;

void button_init_interrupt(){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0

	// ::: gpıo port A clock enable
	__HAL_RCC_GPIOA_CLK_ENABLE() ;
 8001dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e70 <button_init_interrupt+0xb0>)
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	4b29      	ldr	r3, [pc, #164]	@ (8001e70 <button_init_interrupt+0xb0>)
 8001dcc:	2180      	movs	r1, #128	@ 0x80
 8001dce:	0289      	lsls	r1, r1, #10
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	615a      	str	r2, [r3, #20]
 8001dd4:	4b26      	ldr	r3, [pc, #152]	@ (8001e70 <button_init_interrupt+0xb0>)
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	2380      	movs	r3, #128	@ 0x80
 8001dda:	029b      	lsls	r3, r3, #10
 8001ddc:	4013      	ands	r3, r2
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]

	// ::: SYSTEM CONFIG CLCOK ENABLE
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de2:	4b23      	ldr	r3, [pc, #140]	@ (8001e70 <button_init_interrupt+0xb0>)
 8001de4:	699a      	ldr	r2, [r3, #24]
 8001de6:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <button_init_interrupt+0xb0>)
 8001de8:	2101      	movs	r1, #1
 8001dea:	430a      	orrs	r2, r1
 8001dec:	619a      	str	r2, [r3, #24]
 8001dee:	4b20      	ldr	r3, [pc, #128]	@ (8001e70 <button_init_interrupt+0xb0>)
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	2201      	movs	r2, #1
 8001df4:	4013      	ands	r3, r2
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]

	// ::: input setting

	GPIOA->MODER &= ~(1<<0);
 8001dfa:	2390      	movs	r3, #144	@ 0x90
 8001dfc:	05db      	lsls	r3, r3, #23
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	2390      	movs	r3, #144	@ 0x90
 8001e02:	05db      	lsls	r3, r3, #23
 8001e04:	2101      	movs	r1, #1
 8001e06:	438a      	bics	r2, r1
 8001e08:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(1<<1);
 8001e0a:	2390      	movs	r3, #144	@ 0x90
 8001e0c:	05db      	lsls	r3, r3, #23
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2390      	movs	r3, #144	@ 0x90
 8001e12:	05db      	lsls	r3, r3, #23
 8001e14:	2102      	movs	r1, #2
 8001e16:	438a      	bics	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]

	GPIOA->PUPDR &= ~(1<<0); // no pull
 8001e1a:	2390      	movs	r3, #144	@ 0x90
 8001e1c:	05db      	lsls	r3, r3, #23
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	2390      	movs	r3, #144	@ 0x90
 8001e22:	05db      	lsls	r3, r3, #23
 8001e24:	2101      	movs	r1, #1
 8001e26:	438a      	bics	r2, r1
 8001e28:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR &= ~(1<<1); // no pull I NEED TO TRY FOR PULL UP WİTH ANOTHER BUTTON.
 8001e2a:	2390      	movs	r3, #144	@ 0x90
 8001e2c:	05db      	lsls	r3, r3, #23
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	2390      	movs	r3, #144	@ 0x90
 8001e32:	05db      	lsls	r3, r3, #23
 8001e34:	2102      	movs	r1, #2
 8001e36:	438a      	bics	r2, r1
 8001e38:	60da      	str	r2, [r3, #12]


	// ::: SYSTEM CONFİG SETTİNG

	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;
 8001e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001e74 <button_init_interrupt+0xb4>)
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e74 <button_init_interrupt+0xb4>)
 8001e3e:	6892      	ldr	r2, [r2, #8]
 8001e40:	609a      	str	r2, [r3, #8]

	EXTI->IMR |= EXTI_IMR_IM0 ;
 8001e42:	4b0d      	ldr	r3, [pc, #52]	@ (8001e78 <button_init_interrupt+0xb8>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <button_init_interrupt+0xb8>)
 8001e48:	2101      	movs	r1, #1
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	601a      	str	r2, [r3, #0]

	EXTI->RTSR |= EXTI_RTSR_RT0 ;
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <button_init_interrupt+0xb8>)
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <button_init_interrupt+0xb8>)
 8001e54:	2101      	movs	r1, #1
 8001e56:	430a      	orrs	r2, r1
 8001e58:	609a      	str	r2, [r3, #8]

	// ::: NVİC SETTİNG

	NVIC_SetPriority(EXTI0_1_IRQn, 1);
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	2005      	movs	r0, #5
 8001e5e:	f7ff ff41 	bl	8001ce4 <__NVIC_SetPriority>

	NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001e62:	2005      	movs	r0, #5
 8001e64:	f7ff ff24 	bl	8001cb0 <__NVIC_EnableIRQ>
}
 8001e68:	46c0      	nop			@ (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b002      	add	sp, #8
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40010000 	.word	0x40010000
 8001e78:	40010400 	.word	0x40010400

08001e7c <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0


if(EXTI_PR_PR0 == 1) {  // (EXTI->PR & EXTI_PR_PR0) == EXTI_PR_PR0

	EXTI->PR |= EXTI_PR_PR0 ;
 8001e80:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <EXTI0_1_IRQHandler+0x20>)
 8001e82:	695a      	ldr	r2, [r3, #20]
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <EXTI0_1_IRQHandler+0x20>)
 8001e86:	2101      	movs	r1, #1
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	615a      	str	r2, [r3, #20]
	counter_button++;
 8001e8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ea0 <EXTI0_1_IRQHandler+0x24>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	4b03      	ldr	r3, [pc, #12]	@ (8001ea0 <EXTI0_1_IRQHandler+0x24>)
 8001e94:	601a      	str	r2, [r3, #0]
//if(counter_button >= 3)
//{
//	counter_button = 0;
//}

}
 8001e96:	46c0      	nop			@ (mov r8, r8)
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40010400 	.word	0x40010400
 8001ea0:	20000090 	.word	0x20000090

08001ea4 <button_get_state>:

int button_get_state(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0

	if((GPIOA->IDR & (1<<0)) == led_on)
 8001ea8:	2390      	movs	r3, #144	@ 0x90
 8001eaa:	05db      	lsls	r3, r3, #23
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <button_get_state+0x16>
		{
			return led_on;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <button_get_state+0x18>
		}
	else
	{
		return led_off;
 8001eba:	2300      	movs	r3, #0
	}

}
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <led_init>:
#include "stm32f0xx_hal.h"


void togle_led(void);

void led_init(void){
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0

	RCC->AHBENR |= (1<<19);
 8001ec8:	4b23      	ldr	r3, [pc, #140]	@ (8001f58 <led_init+0x94>)
 8001eca:	695a      	ldr	r2, [r3, #20]
 8001ecc:	4b22      	ldr	r3, [pc, #136]	@ (8001f58 <led_init+0x94>)
 8001ece:	2180      	movs	r1, #128	@ 0x80
 8001ed0:	0309      	lsls	r1, r1, #12
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	615a      	str	r2, [r3, #20]

	GPIOC->MODER |= (1<<16);  // MODER8 PC8
 8001ed6:	4b21      	ldr	r3, [pc, #132]	@ (8001f5c <led_init+0x98>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4b20      	ldr	r3, [pc, #128]	@ (8001f5c <led_init+0x98>)
 8001edc:	2180      	movs	r1, #128	@ 0x80
 8001ede:	0249      	lsls	r1, r1, #9
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]
	GPIOC->MODER &= ~(1<<17);
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f5c <led_init+0x98>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8001f5c <led_init+0x98>)
 8001eea:	491d      	ldr	r1, [pc, #116]	@ (8001f60 <led_init+0x9c>)
 8001eec:	400a      	ands	r2, r1
 8001eee:	601a      	str	r2, [r3, #0]

	GPIOC->MODER |= (1<<18); // MODER9 PC9
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f5c <led_init+0x98>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b19      	ldr	r3, [pc, #100]	@ (8001f5c <led_init+0x98>)
 8001ef6:	2180      	movs	r1, #128	@ 0x80
 8001ef8:	02c9      	lsls	r1, r1, #11
 8001efa:	430a      	orrs	r2, r1
 8001efc:	601a      	str	r2, [r3, #0]
	GPIOC->MODER &= ~(1<<19);
 8001efe:	4b17      	ldr	r3, [pc, #92]	@ (8001f5c <led_init+0x98>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	4b16      	ldr	r3, [pc, #88]	@ (8001f5c <led_init+0x98>)
 8001f04:	4917      	ldr	r1, [pc, #92]	@ (8001f64 <led_init+0xa0>)
 8001f06:	400a      	ands	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]

	GPIOC->OSPEEDR &= ~(1<<16); //LOW SPEED
 8001f0a:	4b14      	ldr	r3, [pc, #80]	@ (8001f5c <led_init+0x98>)
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	4b13      	ldr	r3, [pc, #76]	@ (8001f5c <led_init+0x98>)
 8001f10:	4915      	ldr	r1, [pc, #84]	@ (8001f68 <led_init+0xa4>)
 8001f12:	400a      	ands	r2, r1
 8001f14:	609a      	str	r2, [r3, #8]
	GPIOC->OSPEEDR &= ~(1<<17); //LOW SPEED
 8001f16:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <led_init+0x98>)
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	4b10      	ldr	r3, [pc, #64]	@ (8001f5c <led_init+0x98>)
 8001f1c:	4910      	ldr	r1, [pc, #64]	@ (8001f60 <led_init+0x9c>)
 8001f1e:	400a      	ands	r2, r1
 8001f20:	609a      	str	r2, [r3, #8]
	GPIOC->OSPEEDR &= ~(1<<18); //LOW SPEED
 8001f22:	4b0e      	ldr	r3, [pc, #56]	@ (8001f5c <led_init+0x98>)
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	4b0d      	ldr	r3, [pc, #52]	@ (8001f5c <led_init+0x98>)
 8001f28:	4910      	ldr	r1, [pc, #64]	@ (8001f6c <led_init+0xa8>)
 8001f2a:	400a      	ands	r2, r1
 8001f2c:	609a      	str	r2, [r3, #8]
	GPIOC->OSPEEDR &= ~(1<<19); //LOW SPEED
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <led_init+0x98>)
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	4b0a      	ldr	r3, [pc, #40]	@ (8001f5c <led_init+0x98>)
 8001f34:	490b      	ldr	r1, [pc, #44]	@ (8001f64 <led_init+0xa0>)
 8001f36:	400a      	ands	r2, r1
 8001f38:	609a      	str	r2, [r3, #8]

	GPIOC->OTYPER &= ~(1<<8);
 8001f3a:	4b08      	ldr	r3, [pc, #32]	@ (8001f5c <led_init+0x98>)
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	4b07      	ldr	r3, [pc, #28]	@ (8001f5c <led_init+0x98>)
 8001f40:	490b      	ldr	r1, [pc, #44]	@ (8001f70 <led_init+0xac>)
 8001f42:	400a      	ands	r2, r1
 8001f44:	605a      	str	r2, [r3, #4]
	GPIOC->OTYPER &= ~(1<<9);
 8001f46:	4b05      	ldr	r3, [pc, #20]	@ (8001f5c <led_init+0x98>)
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	4b04      	ldr	r3, [pc, #16]	@ (8001f5c <led_init+0x98>)
 8001f4c:	4909      	ldr	r1, [pc, #36]	@ (8001f74 <led_init+0xb0>)
 8001f4e:	400a      	ands	r2, r1
 8001f50:	605a      	str	r2, [r3, #4]

}
 8001f52:	46c0      	nop			@ (mov r8, r8)
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	48000800 	.word	0x48000800
 8001f60:	fffdffff 	.word	0xfffdffff
 8001f64:	fff7ffff 	.word	0xfff7ffff
 8001f68:	fffeffff 	.word	0xfffeffff
 8001f6c:	fffbffff 	.word	0xfffbffff
 8001f70:	fffffeff 	.word	0xfffffeff
 8001f74:	fffffdff 	.word	0xfffffdff

08001f78 <togle_led>:
	GPIOC->ODR &= ~(1 << 8);
		GPIOC->ODR &= ~(1 << 9);
}

void togle_led(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8001f7c:	2380      	movs	r3, #128	@ 0x80
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4a07      	ldr	r2, [pc, #28]	@ (8001fa0 <togle_led+0x28>)
 8001f82:	0019      	movs	r1, r3
 8001f84:	0010      	movs	r0, r2
 8001f86:	f7fe fe07 	bl	8000b98 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8001f8a:	2380      	movs	r3, #128	@ 0x80
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4a04      	ldr	r2, [pc, #16]	@ (8001fa0 <togle_led+0x28>)
 8001f90:	0019      	movs	r1, r3
 8001f92:	0010      	movs	r0, r2
 8001f94:	f7fe fe00 	bl	8000b98 <HAL_GPIO_TogglePin>
}
 8001f98:	46c0      	nop			@ (mov r8, r8)
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	46c0      	nop			@ (mov r8, r8)
 8001fa0:	48000800 	.word	0x48000800

08001fa4 <uart_init>:
// uint32_t counter = 0;


void uart_init(void)

{
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b089      	sub	sp, #36	@ 0x24
 8001fa8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef uart_pins;

__HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	4b45      	ldr	r3, [pc, #276]	@ (80020c0 <uart_init+0x11c>)
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	4b44      	ldr	r3, [pc, #272]	@ (80020c0 <uart_init+0x11c>)
 8001fb0:	2180      	movs	r1, #128	@ 0x80
 8001fb2:	0289      	lsls	r1, r1, #10
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	615a      	str	r2, [r3, #20]
 8001fb8:	4b41      	ldr	r3, [pc, #260]	@ (80020c0 <uart_init+0x11c>)
 8001fba:	695a      	ldr	r2, [r3, #20]
 8001fbc:	2380      	movs	r3, #128	@ 0x80
 8001fbe:	029b      	lsls	r3, r3, #10
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_USART2_CLK_ENABLE();
 8001fc6:	4b3e      	ldr	r3, [pc, #248]	@ (80020c0 <uart_init+0x11c>)
 8001fc8:	69da      	ldr	r2, [r3, #28]
 8001fca:	4b3d      	ldr	r3, [pc, #244]	@ (80020c0 <uart_init+0x11c>)
 8001fcc:	2180      	movs	r1, #128	@ 0x80
 8001fce:	0289      	lsls	r1, r1, #10
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	61da      	str	r2, [r3, #28]
 8001fd4:	4b3a      	ldr	r3, [pc, #232]	@ (80020c0 <uart_init+0x11c>)
 8001fd6:	69da      	ldr	r2, [r3, #28]
 8001fd8:	2380      	movs	r3, #128	@ 0x80
 8001fda:	029b      	lsls	r3, r3, #10
 8001fdc:	4013      	ands	r3, r2
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]


/*   GPIO CONF PA2*/

uart_pins.Alternate = GPIO_AF1_USART2;
 8001fe2:	240c      	movs	r4, #12
 8001fe4:	193b      	adds	r3, r7, r4
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	611a      	str	r2, [r3, #16]
uart_pins.Mode = GPIO_MODE_AF_PP;
 8001fea:	193b      	adds	r3, r7, r4
 8001fec:	2202      	movs	r2, #2
 8001fee:	605a      	str	r2, [r3, #4]
uart_pins.Pin = GPIO_PIN_2;
 8001ff0:	193b      	adds	r3, r7, r4
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	601a      	str	r2, [r3, #0]
uart_pins.Pull = GPIO_NOPULL;
 8001ff6:	193b      	adds	r3, r7, r4
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
uart_pins.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001ffc:	193b      	adds	r3, r7, r4
 8001ffe:	2201      	movs	r2, #1
 8002000:	60da      	str	r2, [r3, #12]
HAL_GPIO_Init(GPIOA, &uart_pins);
 8002002:	193a      	adds	r2, r7, r4
 8002004:	2390      	movs	r3, #144	@ 0x90
 8002006:	05db      	lsls	r3, r3, #23
 8002008:	0011      	movs	r1, r2
 800200a:	0018      	movs	r0, r3
 800200c:	f7fe fc54 	bl	80008b8 <HAL_GPIO_Init>


/*   GPIO CONF PA3*/
uart_pins.Alternate = GPIO_AF1_USART2;
 8002010:	0021      	movs	r1, r4
 8002012:	187b      	adds	r3, r7, r1
 8002014:	2201      	movs	r2, #1
 8002016:	611a      	str	r2, [r3, #16]
uart_pins.Mode = GPIO_MODE_AF_PP;
 8002018:	187b      	adds	r3, r7, r1
 800201a:	2202      	movs	r2, #2
 800201c:	605a      	str	r2, [r3, #4]
uart_pins.Pin = GPIO_PIN_3;
 800201e:	187b      	adds	r3, r7, r1
 8002020:	2208      	movs	r2, #8
 8002022:	601a      	str	r2, [r3, #0]
uart_pins.Pull = GPIO_NOPULL;
 8002024:	187b      	adds	r3, r7, r1
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
uart_pins.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800202a:	187b      	adds	r3, r7, r1
 800202c:	2201      	movs	r2, #1
 800202e:	60da      	str	r2, [r3, #12]
HAL_GPIO_Init(GPIOA, &uart_pins);
 8002030:	187a      	adds	r2, r7, r1
 8002032:	2390      	movs	r3, #144	@ 0x90
 8002034:	05db      	lsls	r3, r3, #23
 8002036:	0011      	movs	r1, r2
 8002038:	0018      	movs	r0, r3
 800203a:	f7fe fc3d 	bl	80008b8 <HAL_GPIO_Init>

/*  UART CONFG */

my_uart.Instance = USART2;
 800203e:	4b21      	ldr	r3, [pc, #132]	@ (80020c4 <uart_init+0x120>)
 8002040:	4a21      	ldr	r2, [pc, #132]	@ (80020c8 <uart_init+0x124>)
 8002042:	601a      	str	r2, [r3, #0]
my_uart.Init.BaudRate = 9600;
 8002044:	4b1f      	ldr	r3, [pc, #124]	@ (80020c4 <uart_init+0x120>)
 8002046:	2296      	movs	r2, #150	@ 0x96
 8002048:	0192      	lsls	r2, r2, #6
 800204a:	605a      	str	r2, [r3, #4]
my_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204c:	4b1d      	ldr	r3, [pc, #116]	@ (80020c4 <uart_init+0x120>)
 800204e:	2200      	movs	r2, #0
 8002050:	619a      	str	r2, [r3, #24]
my_uart.Init.Mode= UART_MODE_TX_RX;
 8002052:	4b1c      	ldr	r3, [pc, #112]	@ (80020c4 <uart_init+0x120>)
 8002054:	220c      	movs	r2, #12
 8002056:	615a      	str	r2, [r3, #20]
my_uart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002058:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <uart_init+0x120>)
 800205a:	2200      	movs	r2, #0
 800205c:	621a      	str	r2, [r3, #32]
my_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 800205e:	4b19      	ldr	r3, [pc, #100]	@ (80020c4 <uart_init+0x120>)
 8002060:	2200      	movs	r2, #0
 8002062:	61da      	str	r2, [r3, #28]
my_uart.Init.Parity = UART_PARITY_NONE;
 8002064:	4b17      	ldr	r3, [pc, #92]	@ (80020c4 <uart_init+0x120>)
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]
my_uart.Init.StopBits = UART_STOPBITS_1;
 800206a:	4b16      	ldr	r3, [pc, #88]	@ (80020c4 <uart_init+0x120>)
 800206c:	2200      	movs	r2, #0
 800206e:	60da      	str	r2, [r3, #12]
my_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8002070:	4b14      	ldr	r3, [pc, #80]	@ (80020c4 <uart_init+0x120>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
my_uart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002076:	4b13      	ldr	r3, [pc, #76]	@ (80020c4 <uart_init+0x120>)
 8002078:	2200      	movs	r2, #0
 800207a:	625a      	str	r2, [r3, #36]	@ 0x24

if(HAL_UART_DeInit(&my_uart) != HAL_OK)
 800207c:	4b11      	ldr	r3, [pc, #68]	@ (80020c4 <uart_init+0x120>)
 800207e:	0018      	movs	r0, r3
 8002080:	f7ff fa58 	bl	8001534 <HAL_UART_DeInit>
 8002084:	1e03      	subs	r3, r0, #0
 8002086:	d001      	beq.n	800208c <uart_init+0xe8>
 {
   //ERROR
		UART_Error_Handler();
 8002088:	f000 f820 	bl	80020cc <UART_Error_Handler>
 }

 if(HAL_UART_Init(&my_uart) != HAL_OK)
 800208c:	4b0d      	ldr	r3, [pc, #52]	@ (80020c4 <uart_init+0x120>)
 800208e:	0018      	movs	r0, r3
 8002090:	f7ff f9fc 	bl	800148c <HAL_UART_Init>
 8002094:	1e03      	subs	r3, r0, #0
 8002096:	d001      	beq.n	800209c <uart_init+0xf8>
 {
		//ERROR
   UART_Error_Handler();
 8002098:	f000 f818 	bl	80020cc <UART_Error_Handler>
 }


USART2->CR1 |= (1<<5);   //rx interrupt enable
 800209c:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <uart_init+0x124>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <uart_init+0x124>)
 80020a2:	2120      	movs	r1, #32
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]

HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020a8:	2200      	movs	r2, #0
 80020aa:	2100      	movs	r1, #0
 80020ac:	201c      	movs	r0, #28
 80020ae:	f7fe fbd1 	bl	8000854 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020b2:	201c      	movs	r0, #28
 80020b4:	f7fe fbe3 	bl	800087e <HAL_NVIC_EnableIRQ>

}
 80020b8:	46c0      	nop			@ (mov r8, r8)
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b009      	add	sp, #36	@ 0x24
 80020be:	bd90      	pop	{r4, r7, pc}
 80020c0:	40021000 	.word	0x40021000
 80020c4:	20000094 	.word	0x20000094
 80020c8:	40004400 	.word	0x40004400

080020cc <UART_Error_Handler>:


static void UART_Error_Handler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
     while(1)
 80020d0:	46c0      	nop			@ (mov r8, r8)
 80020d2:	e7fd      	b.n	80020d0 <UART_Error_Handler+0x4>

080020d4 <__io_putchar>:
    }
}


int __io_putchar(int ch)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	UART_send_byte(ch);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	0018      	movs	r0, r3
 80020e2:	f000 f863 	bl	80021ac <UART_send_byte>
	  return ch;
 80020e6:	687b      	ldr	r3, [r7, #4]
}
 80020e8:	0018      	movs	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	b002      	add	sp, #8
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <USART2_IRQHandler>:


void USART2_IRQHandler(void)

{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
	// RX ile ile ilgili kesme var.

	if((USART2->ISR & USART_ISR_RXNE) != RESET && (USART2->CR1 & USART_CR1_RXNEIE) != RESET)
 80020f4:	4b2a      	ldr	r3, [pc, #168]	@ (80021a0 <USART2_IRQHandler+0xb0>)
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	2220      	movs	r2, #32
 80020fa:	4013      	ands	r3, r2
 80020fc:	d01c      	beq.n	8002138 <USART2_IRQHandler+0x48>
 80020fe:	4b28      	ldr	r3, [pc, #160]	@ (80021a0 <USART2_IRQHandler+0xb0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2220      	movs	r2, #32
 8002104:	4013      	ands	r3, r2
 8002106:	d017      	beq.n	8002138 <USART2_IRQHandler+0x48>
//		{
//			status_flag = 1;
//			counter = 0;
//		}

		UART_buffer_RX.buffer[UART_buffer_RX.head_pointer] = USART2->RDR ;
 8002108:	4b25      	ldr	r3, [pc, #148]	@ (80021a0 <USART2_IRQHandler+0xb0>)
 800210a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800210c:	b299      	uxth	r1, r3
 800210e:	4b25      	ldr	r3, [pc, #148]	@ (80021a4 <USART2_IRQHandler+0xb4>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4b24      	ldr	r3, [pc, #144]	@ (80021a4 <USART2_IRQHandler+0xb4>)
 8002114:	3202      	adds	r2, #2
 8002116:	0092      	lsls	r2, r2, #2
 8002118:	50d1      	str	r1, [r2, r3]
		UART_buffer_RX.head_pointer ++;
 800211a:	4b22      	ldr	r3, [pc, #136]	@ (80021a4 <USART2_IRQHandler+0xb4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	4b20      	ldr	r3, [pc, #128]	@ (80021a4 <USART2_IRQHandler+0xb4>)
 8002122:	601a      	str	r2, [r3, #0]
		if(UART_buffer_RX.head_pointer == buffer_size)
 8002124:	4b1f      	ldr	r3, [pc, #124]	@ (80021a4 <USART2_IRQHandler+0xb4>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	2380      	movs	r3, #128	@ 0x80
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	429a      	cmp	r2, r3
 800212e:	d132      	bne.n	8002196 <USART2_IRQHandler+0xa6>
		{
			UART_buffer_RX.head_pointer = 0;
 8002130:	4b1c      	ldr	r3, [pc, #112]	@ (80021a4 <USART2_IRQHandler+0xb4>)
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
		}

		return ;
 8002136:	e02e      	b.n	8002196 <USART2_IRQHandler+0xa6>
	}

	// TX ile ile ilgili kesme var.

	if((USART2->ISR & USART_ISR_TXE) != RESET && (USART2->CR1 & USART_CR1_TXEIE) != RESET)
 8002138:	4b19      	ldr	r3, [pc, #100]	@ (80021a0 <USART2_IRQHandler+0xb0>)
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	2280      	movs	r2, #128	@ 0x80
 800213e:	4013      	ands	r3, r2
 8002140:	d02c      	beq.n	800219c <USART2_IRQHandler+0xac>
 8002142:	4b17      	ldr	r3, [pc, #92]	@ (80021a0 <USART2_IRQHandler+0xb0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2280      	movs	r2, #128	@ 0x80
 8002148:	4013      	ands	r3, r2
 800214a:	d027      	beq.n	800219c <USART2_IRQHandler+0xac>
//		{
//			status_flag = 1;
//			counter = 0;
//		}

		if(UART_buffer_TX.head_pointer != UART_buffer_TX.tail_pointer)
 800214c:	4b16      	ldr	r3, [pc, #88]	@ (80021a8 <USART2_IRQHandler+0xb8>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b15      	ldr	r3, [pc, #84]	@ (80021a8 <USART2_IRQHandler+0xb8>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	429a      	cmp	r2, r3
 8002156:	d017      	beq.n	8002188 <USART2_IRQHandler+0x98>
			// head pointer should be different than tail
			// because ı need to make sure buffer is full or there is some things

		{
			USART2->TDR = UART_buffer_TX.buffer[UART_buffer_TX.tail_pointer];
 8002158:	4b13      	ldr	r3, [pc, #76]	@ (80021a8 <USART2_IRQHandler+0xb8>)
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	4b12      	ldr	r3, [pc, #72]	@ (80021a8 <USART2_IRQHandler+0xb8>)
 800215e:	3202      	adds	r2, #2
 8002160:	0092      	lsls	r2, r2, #2
 8002162:	58d2      	ldr	r2, [r2, r3]
 8002164:	4b0e      	ldr	r3, [pc, #56]	@ (80021a0 <USART2_IRQHandler+0xb0>)
 8002166:	b292      	uxth	r2, r2
 8002168:	851a      	strh	r2, [r3, #40]	@ 0x28
			UART_buffer_TX.tail_pointer++;
 800216a:	4b0f      	ldr	r3, [pc, #60]	@ (80021a8 <USART2_IRQHandler+0xb8>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	4b0d      	ldr	r3, [pc, #52]	@ (80021a8 <USART2_IRQHandler+0xb8>)
 8002172:	605a      	str	r2, [r3, #4]

			if(UART_buffer_TX.tail_pointer == buffer_size)
 8002174:	4b0c      	ldr	r3, [pc, #48]	@ (80021a8 <USART2_IRQHandler+0xb8>)
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	2380      	movs	r3, #128	@ 0x80
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	429a      	cmp	r2, r3
 800217e:	d10c      	bne.n	800219a <USART2_IRQHandler+0xaa>
			{
				UART_buffer_TX.tail_pointer = 0;
 8002180:	4b09      	ldr	r3, [pc, #36]	@ (80021a8 <USART2_IRQHandler+0xb8>)
 8002182:	2200      	movs	r2, #0
 8002184:	605a      	str	r2, [r3, #4]
		else
		{
			CLEAR_BIT(USART2->CR1,USART_CR1_TXEIE);
		}

		return ;
 8002186:	e008      	b.n	800219a <USART2_IRQHandler+0xaa>
			CLEAR_BIT(USART2->CR1,USART_CR1_TXEIE);
 8002188:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <USART2_IRQHandler+0xb0>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b04      	ldr	r3, [pc, #16]	@ (80021a0 <USART2_IRQHandler+0xb0>)
 800218e:	2180      	movs	r1, #128	@ 0x80
 8002190:	438a      	bics	r2, r1
 8002192:	601a      	str	r2, [r3, #0]
		return ;
 8002194:	e001      	b.n	800219a <USART2_IRQHandler+0xaa>
		return ;
 8002196:	46c0      	nop			@ (mov r8, r8)
 8002198:	e000      	b.n	800219c <USART2_IRQHandler+0xac>
		return ;
 800219a:	46c0      	nop			@ (mov r8, r8)
	}
}
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40004400 	.word	0x40004400
 80021a4:	2000011c 	.word	0x2000011c
 80021a8:	20000524 	.word	0x20000524

080021ac <UART_send_byte>:

void UART_send_byte(uint8_t data)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	0002      	movs	r2, r0
 80021b4:	1dfb      	adds	r3, r7, #7
 80021b6:	701a      	strb	r2, [r3, #0]
	UART_buffer_TX.buffer[UART_buffer_TX.head_pointer] = data;
 80021b8:	4b0f      	ldr	r3, [pc, #60]	@ (80021f8 <UART_send_byte+0x4c>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	1dfb      	adds	r3, r7, #7
 80021be:	7819      	ldrb	r1, [r3, #0]
 80021c0:	4b0d      	ldr	r3, [pc, #52]	@ (80021f8 <UART_send_byte+0x4c>)
 80021c2:	3202      	adds	r2, #2
 80021c4:	0092      	lsls	r2, r2, #2
 80021c6:	50d1      	str	r1, [r2, r3]
	UART_buffer_TX.head_pointer++;
 80021c8:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <UART_send_byte+0x4c>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <UART_send_byte+0x4c>)
 80021d0:	601a      	str	r2, [r3, #0]

	if(UART_buffer_TX.head_pointer == buffer_size)
 80021d2:	4b09      	ldr	r3, [pc, #36]	@ (80021f8 <UART_send_byte+0x4c>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	2380      	movs	r3, #128	@ 0x80
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	429a      	cmp	r2, r3
 80021dc:	d102      	bne.n	80021e4 <UART_send_byte+0x38>
	{
		UART_buffer_TX.head_pointer = 0;
 80021de:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <UART_send_byte+0x4c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
	}

	SET_BIT(USART2->CR1,USART_CR1_TXEIE);
 80021e4:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <UART_send_byte+0x50>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b04      	ldr	r3, [pc, #16]	@ (80021fc <UART_send_byte+0x50>)
 80021ea:	2180      	movs	r1, #128	@ 0x80
 80021ec:	430a      	orrs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]


}
 80021f0:	46c0      	nop			@ (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b002      	add	sp, #8
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000524 	.word	0x20000524
 80021fc:	40004400 	.word	0x40004400

08002200 <UART_is_buffer_empty>:

static int32_t UART_is_buffer_empty(volatile UART_buffer_t* buffer)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]

	return (buffer->head_pointer == buffer->tail_pointer?1:0);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	425a      	negs	r2, r3
 8002214:	4153      	adcs	r3, r2
 8002216:	b2db      	uxtb	r3, r3
//		return 1;
//	} else {
//		return 0;
//	}

}
 8002218:	0018      	movs	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	b002      	add	sp, #8
 800221e:	bd80      	pop	{r7, pc}

08002220 <UART_read_byte>:

int32_t UART_read_byte(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
	int ch = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]

	if(UART_is_buffer_empty(&UART_buffer_RX) == 1)
 800222a:	4b11      	ldr	r3, [pc, #68]	@ (8002270 <UART_read_byte+0x50>)
 800222c:	0018      	movs	r0, r3
 800222e:	f7ff ffe7 	bl	8002200 <UART_is_buffer_empty>
 8002232:	0003      	movs	r3, r0
 8002234:	2b01      	cmp	r3, #1
 8002236:	d103      	bne.n	8002240 <UART_read_byte+0x20>
	{
		ch = -1;
 8002238:	2301      	movs	r3, #1
 800223a:	425b      	negs	r3, r3
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	e012      	b.n	8002266 <UART_read_byte+0x46>
	}

	else
	{

		ch = UART_buffer_RX.buffer[UART_buffer_RX.tail_pointer++];
 8002240:	4b0b      	ldr	r3, [pc, #44]	@ (8002270 <UART_read_byte+0x50>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	1c59      	adds	r1, r3, #1
 8002246:	4a0a      	ldr	r2, [pc, #40]	@ (8002270 <UART_read_byte+0x50>)
 8002248:	6051      	str	r1, [r2, #4]
 800224a:	4a09      	ldr	r2, [pc, #36]	@ (8002270 <UART_read_byte+0x50>)
 800224c:	3302      	adds	r3, #2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	589b      	ldr	r3, [r3, r2]
 8002252:	607b      	str	r3, [r7, #4]
	//	UART_buffer_RX.tail_pointer++;

		if(UART_buffer_RX.tail_pointer == buffer_size)
 8002254:	4b06      	ldr	r3, [pc, #24]	@ (8002270 <UART_read_byte+0x50>)
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	2380      	movs	r3, #128	@ 0x80
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	429a      	cmp	r2, r3
 800225e:	d102      	bne.n	8002266 <UART_read_byte+0x46>
		{
			UART_buffer_RX.tail_pointer = 0;
 8002260:	4b03      	ldr	r3, [pc, #12]	@ (8002270 <UART_read_byte+0x50>)
 8002262:	2200      	movs	r2, #0
 8002264:	605a      	str	r2, [r3, #4]
		}
	}

	return ch;
 8002266:	687b      	ldr	r3, [r7, #4]
}
 8002268:	0018      	movs	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	b002      	add	sp, #8
 800226e:	bd80      	pop	{r7, pc}
 8002270:	2000011c 	.word	0x2000011c

08002274 <UART_bytes_to_read>:
		}

}

uint32_t UART_bytes_to_read(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0

	if(UART_buffer_RX.head_pointer >= UART_buffer_RX.tail_pointer)
 8002278:	4b0a      	ldr	r3, [pc, #40]	@ (80022a4 <UART_bytes_to_read+0x30>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	4b09      	ldr	r3, [pc, #36]	@ (80022a4 <UART_bytes_to_read+0x30>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	429a      	cmp	r2, r3
 8002282:	d305      	bcc.n	8002290 <UART_bytes_to_read+0x1c>
	{
		return UART_buffer_RX.head_pointer - UART_buffer_RX.tail_pointer;
 8002284:	4b07      	ldr	r3, [pc, #28]	@ (80022a4 <UART_bytes_to_read+0x30>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <UART_bytes_to_read+0x30>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	e006      	b.n	800229e <UART_bytes_to_read+0x2a>
	}
	else
	{
		return (buffer_size + UART_buffer_RX.head_pointer - UART_buffer_RX.tail_pointer);
 8002290:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <UART_bytes_to_read+0x30>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4b03      	ldr	r3, [pc, #12]	@ (80022a4 <UART_bytes_to_read+0x30>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	3301      	adds	r3, #1
 800229c:	33ff      	adds	r3, #255	@ 0xff
	}

}
 800229e:	0018      	movs	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	2000011c 	.word	0x2000011c

080022a8 <std>:
 80022a8:	2300      	movs	r3, #0
 80022aa:	b510      	push	{r4, lr}
 80022ac:	0004      	movs	r4, r0
 80022ae:	6003      	str	r3, [r0, #0]
 80022b0:	6043      	str	r3, [r0, #4]
 80022b2:	6083      	str	r3, [r0, #8]
 80022b4:	8181      	strh	r1, [r0, #12]
 80022b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80022b8:	81c2      	strh	r2, [r0, #14]
 80022ba:	6103      	str	r3, [r0, #16]
 80022bc:	6143      	str	r3, [r0, #20]
 80022be:	6183      	str	r3, [r0, #24]
 80022c0:	0019      	movs	r1, r3
 80022c2:	2208      	movs	r2, #8
 80022c4:	305c      	adds	r0, #92	@ 0x5c
 80022c6:	f000 f90f 	bl	80024e8 <memset>
 80022ca:	4b0b      	ldr	r3, [pc, #44]	@ (80022f8 <std+0x50>)
 80022cc:	6224      	str	r4, [r4, #32]
 80022ce:	6263      	str	r3, [r4, #36]	@ 0x24
 80022d0:	4b0a      	ldr	r3, [pc, #40]	@ (80022fc <std+0x54>)
 80022d2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80022d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002300 <std+0x58>)
 80022d6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80022d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002304 <std+0x5c>)
 80022da:	6323      	str	r3, [r4, #48]	@ 0x30
 80022dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002308 <std+0x60>)
 80022de:	429c      	cmp	r4, r3
 80022e0:	d005      	beq.n	80022ee <std+0x46>
 80022e2:	4b0a      	ldr	r3, [pc, #40]	@ (800230c <std+0x64>)
 80022e4:	429c      	cmp	r4, r3
 80022e6:	d002      	beq.n	80022ee <std+0x46>
 80022e8:	4b09      	ldr	r3, [pc, #36]	@ (8002310 <std+0x68>)
 80022ea:	429c      	cmp	r4, r3
 80022ec:	d103      	bne.n	80022f6 <std+0x4e>
 80022ee:	0020      	movs	r0, r4
 80022f0:	3058      	adds	r0, #88	@ 0x58
 80022f2:	f000 f979 	bl	80025e8 <__retarget_lock_init_recursive>
 80022f6:	bd10      	pop	{r4, pc}
 80022f8:	08002451 	.word	0x08002451
 80022fc:	08002479 	.word	0x08002479
 8002300:	080024b1 	.word	0x080024b1
 8002304:	080024dd 	.word	0x080024dd
 8002308:	2000092c 	.word	0x2000092c
 800230c:	20000994 	.word	0x20000994
 8002310:	200009fc 	.word	0x200009fc

08002314 <stdio_exit_handler>:
 8002314:	b510      	push	{r4, lr}
 8002316:	4a03      	ldr	r2, [pc, #12]	@ (8002324 <stdio_exit_handler+0x10>)
 8002318:	4903      	ldr	r1, [pc, #12]	@ (8002328 <stdio_exit_handler+0x14>)
 800231a:	4804      	ldr	r0, [pc, #16]	@ (800232c <stdio_exit_handler+0x18>)
 800231c:	f000 f86c 	bl	80023f8 <_fwalk_sglue>
 8002320:	bd10      	pop	{r4, pc}
 8002322:	46c0      	nop			@ (mov r8, r8)
 8002324:	2000000c 	.word	0x2000000c
 8002328:	08002e79 	.word	0x08002e79
 800232c:	2000001c 	.word	0x2000001c

08002330 <cleanup_stdio>:
 8002330:	6841      	ldr	r1, [r0, #4]
 8002332:	4b0b      	ldr	r3, [pc, #44]	@ (8002360 <cleanup_stdio+0x30>)
 8002334:	b510      	push	{r4, lr}
 8002336:	0004      	movs	r4, r0
 8002338:	4299      	cmp	r1, r3
 800233a:	d001      	beq.n	8002340 <cleanup_stdio+0x10>
 800233c:	f000 fd9c 	bl	8002e78 <_fflush_r>
 8002340:	68a1      	ldr	r1, [r4, #8]
 8002342:	4b08      	ldr	r3, [pc, #32]	@ (8002364 <cleanup_stdio+0x34>)
 8002344:	4299      	cmp	r1, r3
 8002346:	d002      	beq.n	800234e <cleanup_stdio+0x1e>
 8002348:	0020      	movs	r0, r4
 800234a:	f000 fd95 	bl	8002e78 <_fflush_r>
 800234e:	68e1      	ldr	r1, [r4, #12]
 8002350:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <cleanup_stdio+0x38>)
 8002352:	4299      	cmp	r1, r3
 8002354:	d002      	beq.n	800235c <cleanup_stdio+0x2c>
 8002356:	0020      	movs	r0, r4
 8002358:	f000 fd8e 	bl	8002e78 <_fflush_r>
 800235c:	bd10      	pop	{r4, pc}
 800235e:	46c0      	nop			@ (mov r8, r8)
 8002360:	2000092c 	.word	0x2000092c
 8002364:	20000994 	.word	0x20000994
 8002368:	200009fc 	.word	0x200009fc

0800236c <global_stdio_init.part.0>:
 800236c:	b510      	push	{r4, lr}
 800236e:	4b09      	ldr	r3, [pc, #36]	@ (8002394 <global_stdio_init.part.0+0x28>)
 8002370:	4a09      	ldr	r2, [pc, #36]	@ (8002398 <global_stdio_init.part.0+0x2c>)
 8002372:	2104      	movs	r1, #4
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	4809      	ldr	r0, [pc, #36]	@ (800239c <global_stdio_init.part.0+0x30>)
 8002378:	2200      	movs	r2, #0
 800237a:	f7ff ff95 	bl	80022a8 <std>
 800237e:	2201      	movs	r2, #1
 8002380:	2109      	movs	r1, #9
 8002382:	4807      	ldr	r0, [pc, #28]	@ (80023a0 <global_stdio_init.part.0+0x34>)
 8002384:	f7ff ff90 	bl	80022a8 <std>
 8002388:	2202      	movs	r2, #2
 800238a:	2112      	movs	r1, #18
 800238c:	4805      	ldr	r0, [pc, #20]	@ (80023a4 <global_stdio_init.part.0+0x38>)
 800238e:	f7ff ff8b 	bl	80022a8 <std>
 8002392:	bd10      	pop	{r4, pc}
 8002394:	20000a64 	.word	0x20000a64
 8002398:	08002315 	.word	0x08002315
 800239c:	2000092c 	.word	0x2000092c
 80023a0:	20000994 	.word	0x20000994
 80023a4:	200009fc 	.word	0x200009fc

080023a8 <__sfp_lock_acquire>:
 80023a8:	b510      	push	{r4, lr}
 80023aa:	4802      	ldr	r0, [pc, #8]	@ (80023b4 <__sfp_lock_acquire+0xc>)
 80023ac:	f000 f91d 	bl	80025ea <__retarget_lock_acquire_recursive>
 80023b0:	bd10      	pop	{r4, pc}
 80023b2:	46c0      	nop			@ (mov r8, r8)
 80023b4:	20000a6d 	.word	0x20000a6d

080023b8 <__sfp_lock_release>:
 80023b8:	b510      	push	{r4, lr}
 80023ba:	4802      	ldr	r0, [pc, #8]	@ (80023c4 <__sfp_lock_release+0xc>)
 80023bc:	f000 f916 	bl	80025ec <__retarget_lock_release_recursive>
 80023c0:	bd10      	pop	{r4, pc}
 80023c2:	46c0      	nop			@ (mov r8, r8)
 80023c4:	20000a6d 	.word	0x20000a6d

080023c8 <__sinit>:
 80023c8:	b510      	push	{r4, lr}
 80023ca:	0004      	movs	r4, r0
 80023cc:	f7ff ffec 	bl	80023a8 <__sfp_lock_acquire>
 80023d0:	6a23      	ldr	r3, [r4, #32]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d002      	beq.n	80023dc <__sinit+0x14>
 80023d6:	f7ff ffef 	bl	80023b8 <__sfp_lock_release>
 80023da:	bd10      	pop	{r4, pc}
 80023dc:	4b04      	ldr	r3, [pc, #16]	@ (80023f0 <__sinit+0x28>)
 80023de:	6223      	str	r3, [r4, #32]
 80023e0:	4b04      	ldr	r3, [pc, #16]	@ (80023f4 <__sinit+0x2c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f6      	bne.n	80023d6 <__sinit+0xe>
 80023e8:	f7ff ffc0 	bl	800236c <global_stdio_init.part.0>
 80023ec:	e7f3      	b.n	80023d6 <__sinit+0xe>
 80023ee:	46c0      	nop			@ (mov r8, r8)
 80023f0:	08002331 	.word	0x08002331
 80023f4:	20000a64 	.word	0x20000a64

080023f8 <_fwalk_sglue>:
 80023f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023fa:	0014      	movs	r4, r2
 80023fc:	2600      	movs	r6, #0
 80023fe:	9000      	str	r0, [sp, #0]
 8002400:	9101      	str	r1, [sp, #4]
 8002402:	68a5      	ldr	r5, [r4, #8]
 8002404:	6867      	ldr	r7, [r4, #4]
 8002406:	3f01      	subs	r7, #1
 8002408:	d504      	bpl.n	8002414 <_fwalk_sglue+0x1c>
 800240a:	6824      	ldr	r4, [r4, #0]
 800240c:	2c00      	cmp	r4, #0
 800240e:	d1f8      	bne.n	8002402 <_fwalk_sglue+0xa>
 8002410:	0030      	movs	r0, r6
 8002412:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002414:	89ab      	ldrh	r3, [r5, #12]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d908      	bls.n	800242c <_fwalk_sglue+0x34>
 800241a:	220e      	movs	r2, #14
 800241c:	5eab      	ldrsh	r3, [r5, r2]
 800241e:	3301      	adds	r3, #1
 8002420:	d004      	beq.n	800242c <_fwalk_sglue+0x34>
 8002422:	0029      	movs	r1, r5
 8002424:	9800      	ldr	r0, [sp, #0]
 8002426:	9b01      	ldr	r3, [sp, #4]
 8002428:	4798      	blx	r3
 800242a:	4306      	orrs	r6, r0
 800242c:	3568      	adds	r5, #104	@ 0x68
 800242e:	e7ea      	b.n	8002406 <_fwalk_sglue+0xe>

08002430 <iprintf>:
 8002430:	b40f      	push	{r0, r1, r2, r3}
 8002432:	b507      	push	{r0, r1, r2, lr}
 8002434:	4905      	ldr	r1, [pc, #20]	@ (800244c <iprintf+0x1c>)
 8002436:	ab04      	add	r3, sp, #16
 8002438:	6808      	ldr	r0, [r1, #0]
 800243a:	cb04      	ldmia	r3!, {r2}
 800243c:	6881      	ldr	r1, [r0, #8]
 800243e:	9301      	str	r3, [sp, #4]
 8002440:	f000 f9fa 	bl	8002838 <_vfiprintf_r>
 8002444:	b003      	add	sp, #12
 8002446:	bc08      	pop	{r3}
 8002448:	b004      	add	sp, #16
 800244a:	4718      	bx	r3
 800244c:	20000018 	.word	0x20000018

08002450 <__sread>:
 8002450:	b570      	push	{r4, r5, r6, lr}
 8002452:	000c      	movs	r4, r1
 8002454:	250e      	movs	r5, #14
 8002456:	5f49      	ldrsh	r1, [r1, r5]
 8002458:	f000 f874 	bl	8002544 <_read_r>
 800245c:	2800      	cmp	r0, #0
 800245e:	db03      	blt.n	8002468 <__sread+0x18>
 8002460:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002462:	181b      	adds	r3, r3, r0
 8002464:	6563      	str	r3, [r4, #84]	@ 0x54
 8002466:	bd70      	pop	{r4, r5, r6, pc}
 8002468:	89a3      	ldrh	r3, [r4, #12]
 800246a:	4a02      	ldr	r2, [pc, #8]	@ (8002474 <__sread+0x24>)
 800246c:	4013      	ands	r3, r2
 800246e:	81a3      	strh	r3, [r4, #12]
 8002470:	e7f9      	b.n	8002466 <__sread+0x16>
 8002472:	46c0      	nop			@ (mov r8, r8)
 8002474:	ffffefff 	.word	0xffffefff

08002478 <__swrite>:
 8002478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800247a:	001f      	movs	r7, r3
 800247c:	898b      	ldrh	r3, [r1, #12]
 800247e:	0005      	movs	r5, r0
 8002480:	000c      	movs	r4, r1
 8002482:	0016      	movs	r6, r2
 8002484:	05db      	lsls	r3, r3, #23
 8002486:	d505      	bpl.n	8002494 <__swrite+0x1c>
 8002488:	230e      	movs	r3, #14
 800248a:	5ec9      	ldrsh	r1, [r1, r3]
 800248c:	2200      	movs	r2, #0
 800248e:	2302      	movs	r3, #2
 8002490:	f000 f844 	bl	800251c <_lseek_r>
 8002494:	89a3      	ldrh	r3, [r4, #12]
 8002496:	4a05      	ldr	r2, [pc, #20]	@ (80024ac <__swrite+0x34>)
 8002498:	0028      	movs	r0, r5
 800249a:	4013      	ands	r3, r2
 800249c:	81a3      	strh	r3, [r4, #12]
 800249e:	0032      	movs	r2, r6
 80024a0:	230e      	movs	r3, #14
 80024a2:	5ee1      	ldrsh	r1, [r4, r3]
 80024a4:	003b      	movs	r3, r7
 80024a6:	f000 f861 	bl	800256c <_write_r>
 80024aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024ac:	ffffefff 	.word	0xffffefff

080024b0 <__sseek>:
 80024b0:	b570      	push	{r4, r5, r6, lr}
 80024b2:	000c      	movs	r4, r1
 80024b4:	250e      	movs	r5, #14
 80024b6:	5f49      	ldrsh	r1, [r1, r5]
 80024b8:	f000 f830 	bl	800251c <_lseek_r>
 80024bc:	89a3      	ldrh	r3, [r4, #12]
 80024be:	1c42      	adds	r2, r0, #1
 80024c0:	d103      	bne.n	80024ca <__sseek+0x1a>
 80024c2:	4a05      	ldr	r2, [pc, #20]	@ (80024d8 <__sseek+0x28>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	81a3      	strh	r3, [r4, #12]
 80024c8:	bd70      	pop	{r4, r5, r6, pc}
 80024ca:	2280      	movs	r2, #128	@ 0x80
 80024cc:	0152      	lsls	r2, r2, #5
 80024ce:	4313      	orrs	r3, r2
 80024d0:	81a3      	strh	r3, [r4, #12]
 80024d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80024d4:	e7f8      	b.n	80024c8 <__sseek+0x18>
 80024d6:	46c0      	nop			@ (mov r8, r8)
 80024d8:	ffffefff 	.word	0xffffefff

080024dc <__sclose>:
 80024dc:	b510      	push	{r4, lr}
 80024de:	230e      	movs	r3, #14
 80024e0:	5ec9      	ldrsh	r1, [r1, r3]
 80024e2:	f000 f809 	bl	80024f8 <_close_r>
 80024e6:	bd10      	pop	{r4, pc}

080024e8 <memset>:
 80024e8:	0003      	movs	r3, r0
 80024ea:	1882      	adds	r2, r0, r2
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d100      	bne.n	80024f2 <memset+0xa>
 80024f0:	4770      	bx	lr
 80024f2:	7019      	strb	r1, [r3, #0]
 80024f4:	3301      	adds	r3, #1
 80024f6:	e7f9      	b.n	80024ec <memset+0x4>

080024f8 <_close_r>:
 80024f8:	2300      	movs	r3, #0
 80024fa:	b570      	push	{r4, r5, r6, lr}
 80024fc:	4d06      	ldr	r5, [pc, #24]	@ (8002518 <_close_r+0x20>)
 80024fe:	0004      	movs	r4, r0
 8002500:	0008      	movs	r0, r1
 8002502:	602b      	str	r3, [r5, #0]
 8002504:	f7fd ffe0 	bl	80004c8 <_close>
 8002508:	1c43      	adds	r3, r0, #1
 800250a:	d103      	bne.n	8002514 <_close_r+0x1c>
 800250c:	682b      	ldr	r3, [r5, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d000      	beq.n	8002514 <_close_r+0x1c>
 8002512:	6023      	str	r3, [r4, #0]
 8002514:	bd70      	pop	{r4, r5, r6, pc}
 8002516:	46c0      	nop			@ (mov r8, r8)
 8002518:	20000a68 	.word	0x20000a68

0800251c <_lseek_r>:
 800251c:	b570      	push	{r4, r5, r6, lr}
 800251e:	0004      	movs	r4, r0
 8002520:	0008      	movs	r0, r1
 8002522:	0011      	movs	r1, r2
 8002524:	001a      	movs	r2, r3
 8002526:	2300      	movs	r3, #0
 8002528:	4d05      	ldr	r5, [pc, #20]	@ (8002540 <_lseek_r+0x24>)
 800252a:	602b      	str	r3, [r5, #0]
 800252c:	f7fd ffed 	bl	800050a <_lseek>
 8002530:	1c43      	adds	r3, r0, #1
 8002532:	d103      	bne.n	800253c <_lseek_r+0x20>
 8002534:	682b      	ldr	r3, [r5, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d000      	beq.n	800253c <_lseek_r+0x20>
 800253a:	6023      	str	r3, [r4, #0]
 800253c:	bd70      	pop	{r4, r5, r6, pc}
 800253e:	46c0      	nop			@ (mov r8, r8)
 8002540:	20000a68 	.word	0x20000a68

08002544 <_read_r>:
 8002544:	b570      	push	{r4, r5, r6, lr}
 8002546:	0004      	movs	r4, r0
 8002548:	0008      	movs	r0, r1
 800254a:	0011      	movs	r1, r2
 800254c:	001a      	movs	r2, r3
 800254e:	2300      	movs	r3, #0
 8002550:	4d05      	ldr	r5, [pc, #20]	@ (8002568 <_read_r+0x24>)
 8002552:	602b      	str	r3, [r5, #0]
 8002554:	f7fd ff7f 	bl	8000456 <_read>
 8002558:	1c43      	adds	r3, r0, #1
 800255a:	d103      	bne.n	8002564 <_read_r+0x20>
 800255c:	682b      	ldr	r3, [r5, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d000      	beq.n	8002564 <_read_r+0x20>
 8002562:	6023      	str	r3, [r4, #0]
 8002564:	bd70      	pop	{r4, r5, r6, pc}
 8002566:	46c0      	nop			@ (mov r8, r8)
 8002568:	20000a68 	.word	0x20000a68

0800256c <_write_r>:
 800256c:	b570      	push	{r4, r5, r6, lr}
 800256e:	0004      	movs	r4, r0
 8002570:	0008      	movs	r0, r1
 8002572:	0011      	movs	r1, r2
 8002574:	001a      	movs	r2, r3
 8002576:	2300      	movs	r3, #0
 8002578:	4d05      	ldr	r5, [pc, #20]	@ (8002590 <_write_r+0x24>)
 800257a:	602b      	str	r3, [r5, #0]
 800257c:	f7fd ff88 	bl	8000490 <_write>
 8002580:	1c43      	adds	r3, r0, #1
 8002582:	d103      	bne.n	800258c <_write_r+0x20>
 8002584:	682b      	ldr	r3, [r5, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d000      	beq.n	800258c <_write_r+0x20>
 800258a:	6023      	str	r3, [r4, #0]
 800258c:	bd70      	pop	{r4, r5, r6, pc}
 800258e:	46c0      	nop			@ (mov r8, r8)
 8002590:	20000a68 	.word	0x20000a68

08002594 <__errno>:
 8002594:	4b01      	ldr	r3, [pc, #4]	@ (800259c <__errno+0x8>)
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	4770      	bx	lr
 800259a:	46c0      	nop			@ (mov r8, r8)
 800259c:	20000018 	.word	0x20000018

080025a0 <__libc_init_array>:
 80025a0:	b570      	push	{r4, r5, r6, lr}
 80025a2:	2600      	movs	r6, #0
 80025a4:	4c0c      	ldr	r4, [pc, #48]	@ (80025d8 <__libc_init_array+0x38>)
 80025a6:	4d0d      	ldr	r5, [pc, #52]	@ (80025dc <__libc_init_array+0x3c>)
 80025a8:	1b64      	subs	r4, r4, r5
 80025aa:	10a4      	asrs	r4, r4, #2
 80025ac:	42a6      	cmp	r6, r4
 80025ae:	d109      	bne.n	80025c4 <__libc_init_array+0x24>
 80025b0:	2600      	movs	r6, #0
 80025b2:	f000 fddb 	bl	800316c <_init>
 80025b6:	4c0a      	ldr	r4, [pc, #40]	@ (80025e0 <__libc_init_array+0x40>)
 80025b8:	4d0a      	ldr	r5, [pc, #40]	@ (80025e4 <__libc_init_array+0x44>)
 80025ba:	1b64      	subs	r4, r4, r5
 80025bc:	10a4      	asrs	r4, r4, #2
 80025be:	42a6      	cmp	r6, r4
 80025c0:	d105      	bne.n	80025ce <__libc_init_array+0x2e>
 80025c2:	bd70      	pop	{r4, r5, r6, pc}
 80025c4:	00b3      	lsls	r3, r6, #2
 80025c6:	58eb      	ldr	r3, [r5, r3]
 80025c8:	4798      	blx	r3
 80025ca:	3601      	adds	r6, #1
 80025cc:	e7ee      	b.n	80025ac <__libc_init_array+0xc>
 80025ce:	00b3      	lsls	r3, r6, #2
 80025d0:	58eb      	ldr	r3, [r5, r3]
 80025d2:	4798      	blx	r3
 80025d4:	3601      	adds	r6, #1
 80025d6:	e7f2      	b.n	80025be <__libc_init_array+0x1e>
 80025d8:	08003228 	.word	0x08003228
 80025dc:	08003228 	.word	0x08003228
 80025e0:	0800322c 	.word	0x0800322c
 80025e4:	08003228 	.word	0x08003228

080025e8 <__retarget_lock_init_recursive>:
 80025e8:	4770      	bx	lr

080025ea <__retarget_lock_acquire_recursive>:
 80025ea:	4770      	bx	lr

080025ec <__retarget_lock_release_recursive>:
 80025ec:	4770      	bx	lr
	...

080025f0 <_free_r>:
 80025f0:	b570      	push	{r4, r5, r6, lr}
 80025f2:	0005      	movs	r5, r0
 80025f4:	1e0c      	subs	r4, r1, #0
 80025f6:	d010      	beq.n	800261a <_free_r+0x2a>
 80025f8:	3c04      	subs	r4, #4
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	da00      	bge.n	8002602 <_free_r+0x12>
 8002600:	18e4      	adds	r4, r4, r3
 8002602:	0028      	movs	r0, r5
 8002604:	f000 f8e0 	bl	80027c8 <__malloc_lock>
 8002608:	4a1d      	ldr	r2, [pc, #116]	@ (8002680 <_free_r+0x90>)
 800260a:	6813      	ldr	r3, [r2, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d105      	bne.n	800261c <_free_r+0x2c>
 8002610:	6063      	str	r3, [r4, #4]
 8002612:	6014      	str	r4, [r2, #0]
 8002614:	0028      	movs	r0, r5
 8002616:	f000 f8df 	bl	80027d8 <__malloc_unlock>
 800261a:	bd70      	pop	{r4, r5, r6, pc}
 800261c:	42a3      	cmp	r3, r4
 800261e:	d908      	bls.n	8002632 <_free_r+0x42>
 8002620:	6820      	ldr	r0, [r4, #0]
 8002622:	1821      	adds	r1, r4, r0
 8002624:	428b      	cmp	r3, r1
 8002626:	d1f3      	bne.n	8002610 <_free_r+0x20>
 8002628:	6819      	ldr	r1, [r3, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	1809      	adds	r1, r1, r0
 800262e:	6021      	str	r1, [r4, #0]
 8002630:	e7ee      	b.n	8002610 <_free_r+0x20>
 8002632:	001a      	movs	r2, r3
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <_free_r+0x4e>
 800263a:	42a3      	cmp	r3, r4
 800263c:	d9f9      	bls.n	8002632 <_free_r+0x42>
 800263e:	6811      	ldr	r1, [r2, #0]
 8002640:	1850      	adds	r0, r2, r1
 8002642:	42a0      	cmp	r0, r4
 8002644:	d10b      	bne.n	800265e <_free_r+0x6e>
 8002646:	6820      	ldr	r0, [r4, #0]
 8002648:	1809      	adds	r1, r1, r0
 800264a:	1850      	adds	r0, r2, r1
 800264c:	6011      	str	r1, [r2, #0]
 800264e:	4283      	cmp	r3, r0
 8002650:	d1e0      	bne.n	8002614 <_free_r+0x24>
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	1841      	adds	r1, r0, r1
 8002658:	6011      	str	r1, [r2, #0]
 800265a:	6053      	str	r3, [r2, #4]
 800265c:	e7da      	b.n	8002614 <_free_r+0x24>
 800265e:	42a0      	cmp	r0, r4
 8002660:	d902      	bls.n	8002668 <_free_r+0x78>
 8002662:	230c      	movs	r3, #12
 8002664:	602b      	str	r3, [r5, #0]
 8002666:	e7d5      	b.n	8002614 <_free_r+0x24>
 8002668:	6820      	ldr	r0, [r4, #0]
 800266a:	1821      	adds	r1, r4, r0
 800266c:	428b      	cmp	r3, r1
 800266e:	d103      	bne.n	8002678 <_free_r+0x88>
 8002670:	6819      	ldr	r1, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	1809      	adds	r1, r1, r0
 8002676:	6021      	str	r1, [r4, #0]
 8002678:	6063      	str	r3, [r4, #4]
 800267a:	6054      	str	r4, [r2, #4]
 800267c:	e7ca      	b.n	8002614 <_free_r+0x24>
 800267e:	46c0      	nop			@ (mov r8, r8)
 8002680:	20000a74 	.word	0x20000a74

08002684 <sbrk_aligned>:
 8002684:	b570      	push	{r4, r5, r6, lr}
 8002686:	4e0f      	ldr	r6, [pc, #60]	@ (80026c4 <sbrk_aligned+0x40>)
 8002688:	000d      	movs	r5, r1
 800268a:	6831      	ldr	r1, [r6, #0]
 800268c:	0004      	movs	r4, r0
 800268e:	2900      	cmp	r1, #0
 8002690:	d102      	bne.n	8002698 <sbrk_aligned+0x14>
 8002692:	f000 fcbd 	bl	8003010 <_sbrk_r>
 8002696:	6030      	str	r0, [r6, #0]
 8002698:	0029      	movs	r1, r5
 800269a:	0020      	movs	r0, r4
 800269c:	f000 fcb8 	bl	8003010 <_sbrk_r>
 80026a0:	1c43      	adds	r3, r0, #1
 80026a2:	d103      	bne.n	80026ac <sbrk_aligned+0x28>
 80026a4:	2501      	movs	r5, #1
 80026a6:	426d      	negs	r5, r5
 80026a8:	0028      	movs	r0, r5
 80026aa:	bd70      	pop	{r4, r5, r6, pc}
 80026ac:	2303      	movs	r3, #3
 80026ae:	1cc5      	adds	r5, r0, #3
 80026b0:	439d      	bics	r5, r3
 80026b2:	42a8      	cmp	r0, r5
 80026b4:	d0f8      	beq.n	80026a8 <sbrk_aligned+0x24>
 80026b6:	1a29      	subs	r1, r5, r0
 80026b8:	0020      	movs	r0, r4
 80026ba:	f000 fca9 	bl	8003010 <_sbrk_r>
 80026be:	3001      	adds	r0, #1
 80026c0:	d1f2      	bne.n	80026a8 <sbrk_aligned+0x24>
 80026c2:	e7ef      	b.n	80026a4 <sbrk_aligned+0x20>
 80026c4:	20000a70 	.word	0x20000a70

080026c8 <_malloc_r>:
 80026c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80026ca:	2203      	movs	r2, #3
 80026cc:	1ccb      	adds	r3, r1, #3
 80026ce:	4393      	bics	r3, r2
 80026d0:	3308      	adds	r3, #8
 80026d2:	0005      	movs	r5, r0
 80026d4:	001f      	movs	r7, r3
 80026d6:	2b0c      	cmp	r3, #12
 80026d8:	d234      	bcs.n	8002744 <_malloc_r+0x7c>
 80026da:	270c      	movs	r7, #12
 80026dc:	42b9      	cmp	r1, r7
 80026de:	d833      	bhi.n	8002748 <_malloc_r+0x80>
 80026e0:	0028      	movs	r0, r5
 80026e2:	f000 f871 	bl	80027c8 <__malloc_lock>
 80026e6:	4e37      	ldr	r6, [pc, #220]	@ (80027c4 <_malloc_r+0xfc>)
 80026e8:	6833      	ldr	r3, [r6, #0]
 80026ea:	001c      	movs	r4, r3
 80026ec:	2c00      	cmp	r4, #0
 80026ee:	d12f      	bne.n	8002750 <_malloc_r+0x88>
 80026f0:	0039      	movs	r1, r7
 80026f2:	0028      	movs	r0, r5
 80026f4:	f7ff ffc6 	bl	8002684 <sbrk_aligned>
 80026f8:	0004      	movs	r4, r0
 80026fa:	1c43      	adds	r3, r0, #1
 80026fc:	d15f      	bne.n	80027be <_malloc_r+0xf6>
 80026fe:	6834      	ldr	r4, [r6, #0]
 8002700:	9400      	str	r4, [sp, #0]
 8002702:	9b00      	ldr	r3, [sp, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d14a      	bne.n	800279e <_malloc_r+0xd6>
 8002708:	2c00      	cmp	r4, #0
 800270a:	d052      	beq.n	80027b2 <_malloc_r+0xea>
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	0028      	movs	r0, r5
 8002710:	18e3      	adds	r3, r4, r3
 8002712:	9900      	ldr	r1, [sp, #0]
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	f000 fc7b 	bl	8003010 <_sbrk_r>
 800271a:	9b01      	ldr	r3, [sp, #4]
 800271c:	4283      	cmp	r3, r0
 800271e:	d148      	bne.n	80027b2 <_malloc_r+0xea>
 8002720:	6823      	ldr	r3, [r4, #0]
 8002722:	0028      	movs	r0, r5
 8002724:	1aff      	subs	r7, r7, r3
 8002726:	0039      	movs	r1, r7
 8002728:	f7ff ffac 	bl	8002684 <sbrk_aligned>
 800272c:	3001      	adds	r0, #1
 800272e:	d040      	beq.n	80027b2 <_malloc_r+0xea>
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	19db      	adds	r3, r3, r7
 8002734:	6023      	str	r3, [r4, #0]
 8002736:	6833      	ldr	r3, [r6, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	2a00      	cmp	r2, #0
 800273c:	d133      	bne.n	80027a6 <_malloc_r+0xde>
 800273e:	9b00      	ldr	r3, [sp, #0]
 8002740:	6033      	str	r3, [r6, #0]
 8002742:	e019      	b.n	8002778 <_malloc_r+0xb0>
 8002744:	2b00      	cmp	r3, #0
 8002746:	dac9      	bge.n	80026dc <_malloc_r+0x14>
 8002748:	230c      	movs	r3, #12
 800274a:	602b      	str	r3, [r5, #0]
 800274c:	2000      	movs	r0, #0
 800274e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002750:	6821      	ldr	r1, [r4, #0]
 8002752:	1bc9      	subs	r1, r1, r7
 8002754:	d420      	bmi.n	8002798 <_malloc_r+0xd0>
 8002756:	290b      	cmp	r1, #11
 8002758:	d90a      	bls.n	8002770 <_malloc_r+0xa8>
 800275a:	19e2      	adds	r2, r4, r7
 800275c:	6027      	str	r7, [r4, #0]
 800275e:	42a3      	cmp	r3, r4
 8002760:	d104      	bne.n	800276c <_malloc_r+0xa4>
 8002762:	6032      	str	r2, [r6, #0]
 8002764:	6863      	ldr	r3, [r4, #4]
 8002766:	6011      	str	r1, [r2, #0]
 8002768:	6053      	str	r3, [r2, #4]
 800276a:	e005      	b.n	8002778 <_malloc_r+0xb0>
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	e7f9      	b.n	8002764 <_malloc_r+0x9c>
 8002770:	6862      	ldr	r2, [r4, #4]
 8002772:	42a3      	cmp	r3, r4
 8002774:	d10e      	bne.n	8002794 <_malloc_r+0xcc>
 8002776:	6032      	str	r2, [r6, #0]
 8002778:	0028      	movs	r0, r5
 800277a:	f000 f82d 	bl	80027d8 <__malloc_unlock>
 800277e:	0020      	movs	r0, r4
 8002780:	2207      	movs	r2, #7
 8002782:	300b      	adds	r0, #11
 8002784:	1d23      	adds	r3, r4, #4
 8002786:	4390      	bics	r0, r2
 8002788:	1ac2      	subs	r2, r0, r3
 800278a:	4298      	cmp	r0, r3
 800278c:	d0df      	beq.n	800274e <_malloc_r+0x86>
 800278e:	1a1b      	subs	r3, r3, r0
 8002790:	50a3      	str	r3, [r4, r2]
 8002792:	e7dc      	b.n	800274e <_malloc_r+0x86>
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	e7ef      	b.n	8002778 <_malloc_r+0xb0>
 8002798:	0023      	movs	r3, r4
 800279a:	6864      	ldr	r4, [r4, #4]
 800279c:	e7a6      	b.n	80026ec <_malloc_r+0x24>
 800279e:	9c00      	ldr	r4, [sp, #0]
 80027a0:	6863      	ldr	r3, [r4, #4]
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	e7ad      	b.n	8002702 <_malloc_r+0x3a>
 80027a6:	001a      	movs	r2, r3
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	42a3      	cmp	r3, r4
 80027ac:	d1fb      	bne.n	80027a6 <_malloc_r+0xde>
 80027ae:	2300      	movs	r3, #0
 80027b0:	e7da      	b.n	8002768 <_malloc_r+0xa0>
 80027b2:	230c      	movs	r3, #12
 80027b4:	0028      	movs	r0, r5
 80027b6:	602b      	str	r3, [r5, #0]
 80027b8:	f000 f80e 	bl	80027d8 <__malloc_unlock>
 80027bc:	e7c6      	b.n	800274c <_malloc_r+0x84>
 80027be:	6007      	str	r7, [r0, #0]
 80027c0:	e7da      	b.n	8002778 <_malloc_r+0xb0>
 80027c2:	46c0      	nop			@ (mov r8, r8)
 80027c4:	20000a74 	.word	0x20000a74

080027c8 <__malloc_lock>:
 80027c8:	b510      	push	{r4, lr}
 80027ca:	4802      	ldr	r0, [pc, #8]	@ (80027d4 <__malloc_lock+0xc>)
 80027cc:	f7ff ff0d 	bl	80025ea <__retarget_lock_acquire_recursive>
 80027d0:	bd10      	pop	{r4, pc}
 80027d2:	46c0      	nop			@ (mov r8, r8)
 80027d4:	20000a6c 	.word	0x20000a6c

080027d8 <__malloc_unlock>:
 80027d8:	b510      	push	{r4, lr}
 80027da:	4802      	ldr	r0, [pc, #8]	@ (80027e4 <__malloc_unlock+0xc>)
 80027dc:	f7ff ff06 	bl	80025ec <__retarget_lock_release_recursive>
 80027e0:	bd10      	pop	{r4, pc}
 80027e2:	46c0      	nop			@ (mov r8, r8)
 80027e4:	20000a6c 	.word	0x20000a6c

080027e8 <__sfputc_r>:
 80027e8:	6893      	ldr	r3, [r2, #8]
 80027ea:	b510      	push	{r4, lr}
 80027ec:	3b01      	subs	r3, #1
 80027ee:	6093      	str	r3, [r2, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	da04      	bge.n	80027fe <__sfputc_r+0x16>
 80027f4:	6994      	ldr	r4, [r2, #24]
 80027f6:	42a3      	cmp	r3, r4
 80027f8:	db07      	blt.n	800280a <__sfputc_r+0x22>
 80027fa:	290a      	cmp	r1, #10
 80027fc:	d005      	beq.n	800280a <__sfputc_r+0x22>
 80027fe:	6813      	ldr	r3, [r2, #0]
 8002800:	1c58      	adds	r0, r3, #1
 8002802:	6010      	str	r0, [r2, #0]
 8002804:	7019      	strb	r1, [r3, #0]
 8002806:	0008      	movs	r0, r1
 8002808:	bd10      	pop	{r4, pc}
 800280a:	f000 fb60 	bl	8002ece <__swbuf_r>
 800280e:	0001      	movs	r1, r0
 8002810:	e7f9      	b.n	8002806 <__sfputc_r+0x1e>

08002812 <__sfputs_r>:
 8002812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002814:	0006      	movs	r6, r0
 8002816:	000f      	movs	r7, r1
 8002818:	0014      	movs	r4, r2
 800281a:	18d5      	adds	r5, r2, r3
 800281c:	42ac      	cmp	r4, r5
 800281e:	d101      	bne.n	8002824 <__sfputs_r+0x12>
 8002820:	2000      	movs	r0, #0
 8002822:	e007      	b.n	8002834 <__sfputs_r+0x22>
 8002824:	7821      	ldrb	r1, [r4, #0]
 8002826:	003a      	movs	r2, r7
 8002828:	0030      	movs	r0, r6
 800282a:	f7ff ffdd 	bl	80027e8 <__sfputc_r>
 800282e:	3401      	adds	r4, #1
 8002830:	1c43      	adds	r3, r0, #1
 8002832:	d1f3      	bne.n	800281c <__sfputs_r+0xa>
 8002834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002838 <_vfiprintf_r>:
 8002838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800283a:	b0a1      	sub	sp, #132	@ 0x84
 800283c:	000f      	movs	r7, r1
 800283e:	0015      	movs	r5, r2
 8002840:	001e      	movs	r6, r3
 8002842:	9003      	str	r0, [sp, #12]
 8002844:	2800      	cmp	r0, #0
 8002846:	d004      	beq.n	8002852 <_vfiprintf_r+0x1a>
 8002848:	6a03      	ldr	r3, [r0, #32]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <_vfiprintf_r+0x1a>
 800284e:	f7ff fdbb 	bl	80023c8 <__sinit>
 8002852:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002854:	07db      	lsls	r3, r3, #31
 8002856:	d405      	bmi.n	8002864 <_vfiprintf_r+0x2c>
 8002858:	89bb      	ldrh	r3, [r7, #12]
 800285a:	059b      	lsls	r3, r3, #22
 800285c:	d402      	bmi.n	8002864 <_vfiprintf_r+0x2c>
 800285e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002860:	f7ff fec3 	bl	80025ea <__retarget_lock_acquire_recursive>
 8002864:	89bb      	ldrh	r3, [r7, #12]
 8002866:	071b      	lsls	r3, r3, #28
 8002868:	d502      	bpl.n	8002870 <_vfiprintf_r+0x38>
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d113      	bne.n	8002898 <_vfiprintf_r+0x60>
 8002870:	0039      	movs	r1, r7
 8002872:	9803      	ldr	r0, [sp, #12]
 8002874:	f000 fb6e 	bl	8002f54 <__swsetup_r>
 8002878:	2800      	cmp	r0, #0
 800287a:	d00d      	beq.n	8002898 <_vfiprintf_r+0x60>
 800287c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800287e:	07db      	lsls	r3, r3, #31
 8002880:	d503      	bpl.n	800288a <_vfiprintf_r+0x52>
 8002882:	2001      	movs	r0, #1
 8002884:	4240      	negs	r0, r0
 8002886:	b021      	add	sp, #132	@ 0x84
 8002888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800288a:	89bb      	ldrh	r3, [r7, #12]
 800288c:	059b      	lsls	r3, r3, #22
 800288e:	d4f8      	bmi.n	8002882 <_vfiprintf_r+0x4a>
 8002890:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002892:	f7ff feab 	bl	80025ec <__retarget_lock_release_recursive>
 8002896:	e7f4      	b.n	8002882 <_vfiprintf_r+0x4a>
 8002898:	2300      	movs	r3, #0
 800289a:	ac08      	add	r4, sp, #32
 800289c:	6163      	str	r3, [r4, #20]
 800289e:	3320      	adds	r3, #32
 80028a0:	7663      	strb	r3, [r4, #25]
 80028a2:	3310      	adds	r3, #16
 80028a4:	76a3      	strb	r3, [r4, #26]
 80028a6:	9607      	str	r6, [sp, #28]
 80028a8:	002e      	movs	r6, r5
 80028aa:	7833      	ldrb	r3, [r6, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <_vfiprintf_r+0x7c>
 80028b0:	2b25      	cmp	r3, #37	@ 0x25
 80028b2:	d148      	bne.n	8002946 <_vfiprintf_r+0x10e>
 80028b4:	1b73      	subs	r3, r6, r5
 80028b6:	9305      	str	r3, [sp, #20]
 80028b8:	42ae      	cmp	r6, r5
 80028ba:	d00b      	beq.n	80028d4 <_vfiprintf_r+0x9c>
 80028bc:	002a      	movs	r2, r5
 80028be:	0039      	movs	r1, r7
 80028c0:	9803      	ldr	r0, [sp, #12]
 80028c2:	f7ff ffa6 	bl	8002812 <__sfputs_r>
 80028c6:	3001      	adds	r0, #1
 80028c8:	d100      	bne.n	80028cc <_vfiprintf_r+0x94>
 80028ca:	e0ae      	b.n	8002a2a <_vfiprintf_r+0x1f2>
 80028cc:	6963      	ldr	r3, [r4, #20]
 80028ce:	9a05      	ldr	r2, [sp, #20]
 80028d0:	189b      	adds	r3, r3, r2
 80028d2:	6163      	str	r3, [r4, #20]
 80028d4:	7833      	ldrb	r3, [r6, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d100      	bne.n	80028dc <_vfiprintf_r+0xa4>
 80028da:	e0a6      	b.n	8002a2a <_vfiprintf_r+0x1f2>
 80028dc:	2201      	movs	r2, #1
 80028de:	2300      	movs	r3, #0
 80028e0:	4252      	negs	r2, r2
 80028e2:	6062      	str	r2, [r4, #4]
 80028e4:	a904      	add	r1, sp, #16
 80028e6:	3254      	adds	r2, #84	@ 0x54
 80028e8:	1852      	adds	r2, r2, r1
 80028ea:	1c75      	adds	r5, r6, #1
 80028ec:	6023      	str	r3, [r4, #0]
 80028ee:	60e3      	str	r3, [r4, #12]
 80028f0:	60a3      	str	r3, [r4, #8]
 80028f2:	7013      	strb	r3, [r2, #0]
 80028f4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80028f6:	4b59      	ldr	r3, [pc, #356]	@ (8002a5c <_vfiprintf_r+0x224>)
 80028f8:	2205      	movs	r2, #5
 80028fa:	0018      	movs	r0, r3
 80028fc:	7829      	ldrb	r1, [r5, #0]
 80028fe:	9305      	str	r3, [sp, #20]
 8002900:	f000 fb98 	bl	8003034 <memchr>
 8002904:	1c6e      	adds	r6, r5, #1
 8002906:	2800      	cmp	r0, #0
 8002908:	d11f      	bne.n	800294a <_vfiprintf_r+0x112>
 800290a:	6822      	ldr	r2, [r4, #0]
 800290c:	06d3      	lsls	r3, r2, #27
 800290e:	d504      	bpl.n	800291a <_vfiprintf_r+0xe2>
 8002910:	2353      	movs	r3, #83	@ 0x53
 8002912:	a904      	add	r1, sp, #16
 8002914:	185b      	adds	r3, r3, r1
 8002916:	2120      	movs	r1, #32
 8002918:	7019      	strb	r1, [r3, #0]
 800291a:	0713      	lsls	r3, r2, #28
 800291c:	d504      	bpl.n	8002928 <_vfiprintf_r+0xf0>
 800291e:	2353      	movs	r3, #83	@ 0x53
 8002920:	a904      	add	r1, sp, #16
 8002922:	185b      	adds	r3, r3, r1
 8002924:	212b      	movs	r1, #43	@ 0x2b
 8002926:	7019      	strb	r1, [r3, #0]
 8002928:	782b      	ldrb	r3, [r5, #0]
 800292a:	2b2a      	cmp	r3, #42	@ 0x2a
 800292c:	d016      	beq.n	800295c <_vfiprintf_r+0x124>
 800292e:	002e      	movs	r6, r5
 8002930:	2100      	movs	r1, #0
 8002932:	200a      	movs	r0, #10
 8002934:	68e3      	ldr	r3, [r4, #12]
 8002936:	7832      	ldrb	r2, [r6, #0]
 8002938:	1c75      	adds	r5, r6, #1
 800293a:	3a30      	subs	r2, #48	@ 0x30
 800293c:	2a09      	cmp	r2, #9
 800293e:	d950      	bls.n	80029e2 <_vfiprintf_r+0x1aa>
 8002940:	2900      	cmp	r1, #0
 8002942:	d111      	bne.n	8002968 <_vfiprintf_r+0x130>
 8002944:	e017      	b.n	8002976 <_vfiprintf_r+0x13e>
 8002946:	3601      	adds	r6, #1
 8002948:	e7af      	b.n	80028aa <_vfiprintf_r+0x72>
 800294a:	9b05      	ldr	r3, [sp, #20]
 800294c:	6822      	ldr	r2, [r4, #0]
 800294e:	1ac0      	subs	r0, r0, r3
 8002950:	2301      	movs	r3, #1
 8002952:	4083      	lsls	r3, r0
 8002954:	4313      	orrs	r3, r2
 8002956:	0035      	movs	r5, r6
 8002958:	6023      	str	r3, [r4, #0]
 800295a:	e7cc      	b.n	80028f6 <_vfiprintf_r+0xbe>
 800295c:	9b07      	ldr	r3, [sp, #28]
 800295e:	1d19      	adds	r1, r3, #4
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	9107      	str	r1, [sp, #28]
 8002964:	2b00      	cmp	r3, #0
 8002966:	db01      	blt.n	800296c <_vfiprintf_r+0x134>
 8002968:	930b      	str	r3, [sp, #44]	@ 0x2c
 800296a:	e004      	b.n	8002976 <_vfiprintf_r+0x13e>
 800296c:	425b      	negs	r3, r3
 800296e:	60e3      	str	r3, [r4, #12]
 8002970:	2302      	movs	r3, #2
 8002972:	4313      	orrs	r3, r2
 8002974:	6023      	str	r3, [r4, #0]
 8002976:	7833      	ldrb	r3, [r6, #0]
 8002978:	2b2e      	cmp	r3, #46	@ 0x2e
 800297a:	d10c      	bne.n	8002996 <_vfiprintf_r+0x15e>
 800297c:	7873      	ldrb	r3, [r6, #1]
 800297e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002980:	d134      	bne.n	80029ec <_vfiprintf_r+0x1b4>
 8002982:	9b07      	ldr	r3, [sp, #28]
 8002984:	3602      	adds	r6, #2
 8002986:	1d1a      	adds	r2, r3, #4
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	9207      	str	r2, [sp, #28]
 800298c:	2b00      	cmp	r3, #0
 800298e:	da01      	bge.n	8002994 <_vfiprintf_r+0x15c>
 8002990:	2301      	movs	r3, #1
 8002992:	425b      	negs	r3, r3
 8002994:	9309      	str	r3, [sp, #36]	@ 0x24
 8002996:	4d32      	ldr	r5, [pc, #200]	@ (8002a60 <_vfiprintf_r+0x228>)
 8002998:	2203      	movs	r2, #3
 800299a:	0028      	movs	r0, r5
 800299c:	7831      	ldrb	r1, [r6, #0]
 800299e:	f000 fb49 	bl	8003034 <memchr>
 80029a2:	2800      	cmp	r0, #0
 80029a4:	d006      	beq.n	80029b4 <_vfiprintf_r+0x17c>
 80029a6:	2340      	movs	r3, #64	@ 0x40
 80029a8:	1b40      	subs	r0, r0, r5
 80029aa:	4083      	lsls	r3, r0
 80029ac:	6822      	ldr	r2, [r4, #0]
 80029ae:	3601      	adds	r6, #1
 80029b0:	4313      	orrs	r3, r2
 80029b2:	6023      	str	r3, [r4, #0]
 80029b4:	7831      	ldrb	r1, [r6, #0]
 80029b6:	2206      	movs	r2, #6
 80029b8:	482a      	ldr	r0, [pc, #168]	@ (8002a64 <_vfiprintf_r+0x22c>)
 80029ba:	1c75      	adds	r5, r6, #1
 80029bc:	7621      	strb	r1, [r4, #24]
 80029be:	f000 fb39 	bl	8003034 <memchr>
 80029c2:	2800      	cmp	r0, #0
 80029c4:	d040      	beq.n	8002a48 <_vfiprintf_r+0x210>
 80029c6:	4b28      	ldr	r3, [pc, #160]	@ (8002a68 <_vfiprintf_r+0x230>)
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d122      	bne.n	8002a12 <_vfiprintf_r+0x1da>
 80029cc:	2207      	movs	r2, #7
 80029ce:	9b07      	ldr	r3, [sp, #28]
 80029d0:	3307      	adds	r3, #7
 80029d2:	4393      	bics	r3, r2
 80029d4:	3308      	adds	r3, #8
 80029d6:	9307      	str	r3, [sp, #28]
 80029d8:	6963      	ldr	r3, [r4, #20]
 80029da:	9a04      	ldr	r2, [sp, #16]
 80029dc:	189b      	adds	r3, r3, r2
 80029de:	6163      	str	r3, [r4, #20]
 80029e0:	e762      	b.n	80028a8 <_vfiprintf_r+0x70>
 80029e2:	4343      	muls	r3, r0
 80029e4:	002e      	movs	r6, r5
 80029e6:	2101      	movs	r1, #1
 80029e8:	189b      	adds	r3, r3, r2
 80029ea:	e7a4      	b.n	8002936 <_vfiprintf_r+0xfe>
 80029ec:	2300      	movs	r3, #0
 80029ee:	200a      	movs	r0, #10
 80029f0:	0019      	movs	r1, r3
 80029f2:	3601      	adds	r6, #1
 80029f4:	6063      	str	r3, [r4, #4]
 80029f6:	7832      	ldrb	r2, [r6, #0]
 80029f8:	1c75      	adds	r5, r6, #1
 80029fa:	3a30      	subs	r2, #48	@ 0x30
 80029fc:	2a09      	cmp	r2, #9
 80029fe:	d903      	bls.n	8002a08 <_vfiprintf_r+0x1d0>
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0c8      	beq.n	8002996 <_vfiprintf_r+0x15e>
 8002a04:	9109      	str	r1, [sp, #36]	@ 0x24
 8002a06:	e7c6      	b.n	8002996 <_vfiprintf_r+0x15e>
 8002a08:	4341      	muls	r1, r0
 8002a0a:	002e      	movs	r6, r5
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	1889      	adds	r1, r1, r2
 8002a10:	e7f1      	b.n	80029f6 <_vfiprintf_r+0x1be>
 8002a12:	aa07      	add	r2, sp, #28
 8002a14:	9200      	str	r2, [sp, #0]
 8002a16:	0021      	movs	r1, r4
 8002a18:	003a      	movs	r2, r7
 8002a1a:	4b14      	ldr	r3, [pc, #80]	@ (8002a6c <_vfiprintf_r+0x234>)
 8002a1c:	9803      	ldr	r0, [sp, #12]
 8002a1e:	e000      	b.n	8002a22 <_vfiprintf_r+0x1ea>
 8002a20:	bf00      	nop
 8002a22:	9004      	str	r0, [sp, #16]
 8002a24:	9b04      	ldr	r3, [sp, #16]
 8002a26:	3301      	adds	r3, #1
 8002a28:	d1d6      	bne.n	80029d8 <_vfiprintf_r+0x1a0>
 8002a2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a2c:	07db      	lsls	r3, r3, #31
 8002a2e:	d405      	bmi.n	8002a3c <_vfiprintf_r+0x204>
 8002a30:	89bb      	ldrh	r3, [r7, #12]
 8002a32:	059b      	lsls	r3, r3, #22
 8002a34:	d402      	bmi.n	8002a3c <_vfiprintf_r+0x204>
 8002a36:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002a38:	f7ff fdd8 	bl	80025ec <__retarget_lock_release_recursive>
 8002a3c:	89bb      	ldrh	r3, [r7, #12]
 8002a3e:	065b      	lsls	r3, r3, #25
 8002a40:	d500      	bpl.n	8002a44 <_vfiprintf_r+0x20c>
 8002a42:	e71e      	b.n	8002882 <_vfiprintf_r+0x4a>
 8002a44:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002a46:	e71e      	b.n	8002886 <_vfiprintf_r+0x4e>
 8002a48:	aa07      	add	r2, sp, #28
 8002a4a:	9200      	str	r2, [sp, #0]
 8002a4c:	0021      	movs	r1, r4
 8002a4e:	003a      	movs	r2, r7
 8002a50:	4b06      	ldr	r3, [pc, #24]	@ (8002a6c <_vfiprintf_r+0x234>)
 8002a52:	9803      	ldr	r0, [sp, #12]
 8002a54:	f000 f87c 	bl	8002b50 <_printf_i>
 8002a58:	e7e3      	b.n	8002a22 <_vfiprintf_r+0x1ea>
 8002a5a:	46c0      	nop			@ (mov r8, r8)
 8002a5c:	080031f4 	.word	0x080031f4
 8002a60:	080031fa 	.word	0x080031fa
 8002a64:	080031fe 	.word	0x080031fe
 8002a68:	00000000 	.word	0x00000000
 8002a6c:	08002813 	.word	0x08002813

08002a70 <_printf_common>:
 8002a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a72:	0016      	movs	r6, r2
 8002a74:	9301      	str	r3, [sp, #4]
 8002a76:	688a      	ldr	r2, [r1, #8]
 8002a78:	690b      	ldr	r3, [r1, #16]
 8002a7a:	000c      	movs	r4, r1
 8002a7c:	9000      	str	r0, [sp, #0]
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	da00      	bge.n	8002a84 <_printf_common+0x14>
 8002a82:	0013      	movs	r3, r2
 8002a84:	0022      	movs	r2, r4
 8002a86:	6033      	str	r3, [r6, #0]
 8002a88:	3243      	adds	r2, #67	@ 0x43
 8002a8a:	7812      	ldrb	r2, [r2, #0]
 8002a8c:	2a00      	cmp	r2, #0
 8002a8e:	d001      	beq.n	8002a94 <_printf_common+0x24>
 8002a90:	3301      	adds	r3, #1
 8002a92:	6033      	str	r3, [r6, #0]
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	069b      	lsls	r3, r3, #26
 8002a98:	d502      	bpl.n	8002aa0 <_printf_common+0x30>
 8002a9a:	6833      	ldr	r3, [r6, #0]
 8002a9c:	3302      	adds	r3, #2
 8002a9e:	6033      	str	r3, [r6, #0]
 8002aa0:	6822      	ldr	r2, [r4, #0]
 8002aa2:	2306      	movs	r3, #6
 8002aa4:	0015      	movs	r5, r2
 8002aa6:	401d      	ands	r5, r3
 8002aa8:	421a      	tst	r2, r3
 8002aaa:	d027      	beq.n	8002afc <_printf_common+0x8c>
 8002aac:	0023      	movs	r3, r4
 8002aae:	3343      	adds	r3, #67	@ 0x43
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	1e5a      	subs	r2, r3, #1
 8002ab4:	4193      	sbcs	r3, r2
 8002ab6:	6822      	ldr	r2, [r4, #0]
 8002ab8:	0692      	lsls	r2, r2, #26
 8002aba:	d430      	bmi.n	8002b1e <_printf_common+0xae>
 8002abc:	0022      	movs	r2, r4
 8002abe:	9901      	ldr	r1, [sp, #4]
 8002ac0:	9800      	ldr	r0, [sp, #0]
 8002ac2:	9d08      	ldr	r5, [sp, #32]
 8002ac4:	3243      	adds	r2, #67	@ 0x43
 8002ac6:	47a8      	blx	r5
 8002ac8:	3001      	adds	r0, #1
 8002aca:	d025      	beq.n	8002b18 <_printf_common+0xa8>
 8002acc:	2206      	movs	r2, #6
 8002ace:	6823      	ldr	r3, [r4, #0]
 8002ad0:	2500      	movs	r5, #0
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d105      	bne.n	8002ae4 <_printf_common+0x74>
 8002ad8:	6833      	ldr	r3, [r6, #0]
 8002ada:	68e5      	ldr	r5, [r4, #12]
 8002adc:	1aed      	subs	r5, r5, r3
 8002ade:	43eb      	mvns	r3, r5
 8002ae0:	17db      	asrs	r3, r3, #31
 8002ae2:	401d      	ands	r5, r3
 8002ae4:	68a3      	ldr	r3, [r4, #8]
 8002ae6:	6922      	ldr	r2, [r4, #16]
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	dd01      	ble.n	8002af0 <_printf_common+0x80>
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	18ed      	adds	r5, r5, r3
 8002af0:	2600      	movs	r6, #0
 8002af2:	42b5      	cmp	r5, r6
 8002af4:	d120      	bne.n	8002b38 <_printf_common+0xc8>
 8002af6:	2000      	movs	r0, #0
 8002af8:	e010      	b.n	8002b1c <_printf_common+0xac>
 8002afa:	3501      	adds	r5, #1
 8002afc:	68e3      	ldr	r3, [r4, #12]
 8002afe:	6832      	ldr	r2, [r6, #0]
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	42ab      	cmp	r3, r5
 8002b04:	ddd2      	ble.n	8002aac <_printf_common+0x3c>
 8002b06:	0022      	movs	r2, r4
 8002b08:	2301      	movs	r3, #1
 8002b0a:	9901      	ldr	r1, [sp, #4]
 8002b0c:	9800      	ldr	r0, [sp, #0]
 8002b0e:	9f08      	ldr	r7, [sp, #32]
 8002b10:	3219      	adds	r2, #25
 8002b12:	47b8      	blx	r7
 8002b14:	3001      	adds	r0, #1
 8002b16:	d1f0      	bne.n	8002afa <_printf_common+0x8a>
 8002b18:	2001      	movs	r0, #1
 8002b1a:	4240      	negs	r0, r0
 8002b1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002b1e:	2030      	movs	r0, #48	@ 0x30
 8002b20:	18e1      	adds	r1, r4, r3
 8002b22:	3143      	adds	r1, #67	@ 0x43
 8002b24:	7008      	strb	r0, [r1, #0]
 8002b26:	0021      	movs	r1, r4
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	3145      	adds	r1, #69	@ 0x45
 8002b2c:	7809      	ldrb	r1, [r1, #0]
 8002b2e:	18a2      	adds	r2, r4, r2
 8002b30:	3243      	adds	r2, #67	@ 0x43
 8002b32:	3302      	adds	r3, #2
 8002b34:	7011      	strb	r1, [r2, #0]
 8002b36:	e7c1      	b.n	8002abc <_printf_common+0x4c>
 8002b38:	0022      	movs	r2, r4
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	9901      	ldr	r1, [sp, #4]
 8002b3e:	9800      	ldr	r0, [sp, #0]
 8002b40:	9f08      	ldr	r7, [sp, #32]
 8002b42:	321a      	adds	r2, #26
 8002b44:	47b8      	blx	r7
 8002b46:	3001      	adds	r0, #1
 8002b48:	d0e6      	beq.n	8002b18 <_printf_common+0xa8>
 8002b4a:	3601      	adds	r6, #1
 8002b4c:	e7d1      	b.n	8002af2 <_printf_common+0x82>
	...

08002b50 <_printf_i>:
 8002b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b52:	b08b      	sub	sp, #44	@ 0x2c
 8002b54:	9206      	str	r2, [sp, #24]
 8002b56:	000a      	movs	r2, r1
 8002b58:	3243      	adds	r2, #67	@ 0x43
 8002b5a:	9307      	str	r3, [sp, #28]
 8002b5c:	9005      	str	r0, [sp, #20]
 8002b5e:	9203      	str	r2, [sp, #12]
 8002b60:	7e0a      	ldrb	r2, [r1, #24]
 8002b62:	000c      	movs	r4, r1
 8002b64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002b66:	2a78      	cmp	r2, #120	@ 0x78
 8002b68:	d809      	bhi.n	8002b7e <_printf_i+0x2e>
 8002b6a:	2a62      	cmp	r2, #98	@ 0x62
 8002b6c:	d80b      	bhi.n	8002b86 <_printf_i+0x36>
 8002b6e:	2a00      	cmp	r2, #0
 8002b70:	d100      	bne.n	8002b74 <_printf_i+0x24>
 8002b72:	e0bc      	b.n	8002cee <_printf_i+0x19e>
 8002b74:	497b      	ldr	r1, [pc, #492]	@ (8002d64 <_printf_i+0x214>)
 8002b76:	9104      	str	r1, [sp, #16]
 8002b78:	2a58      	cmp	r2, #88	@ 0x58
 8002b7a:	d100      	bne.n	8002b7e <_printf_i+0x2e>
 8002b7c:	e090      	b.n	8002ca0 <_printf_i+0x150>
 8002b7e:	0025      	movs	r5, r4
 8002b80:	3542      	adds	r5, #66	@ 0x42
 8002b82:	702a      	strb	r2, [r5, #0]
 8002b84:	e022      	b.n	8002bcc <_printf_i+0x7c>
 8002b86:	0010      	movs	r0, r2
 8002b88:	3863      	subs	r0, #99	@ 0x63
 8002b8a:	2815      	cmp	r0, #21
 8002b8c:	d8f7      	bhi.n	8002b7e <_printf_i+0x2e>
 8002b8e:	f7fd fabb 	bl	8000108 <__gnu_thumb1_case_shi>
 8002b92:	0016      	.short	0x0016
 8002b94:	fff6001f 	.word	0xfff6001f
 8002b98:	fff6fff6 	.word	0xfff6fff6
 8002b9c:	001ffff6 	.word	0x001ffff6
 8002ba0:	fff6fff6 	.word	0xfff6fff6
 8002ba4:	fff6fff6 	.word	0xfff6fff6
 8002ba8:	003600a1 	.word	0x003600a1
 8002bac:	fff60080 	.word	0xfff60080
 8002bb0:	00b2fff6 	.word	0x00b2fff6
 8002bb4:	0036fff6 	.word	0x0036fff6
 8002bb8:	fff6fff6 	.word	0xfff6fff6
 8002bbc:	0084      	.short	0x0084
 8002bbe:	0025      	movs	r5, r4
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	3542      	adds	r5, #66	@ 0x42
 8002bc4:	1d11      	adds	r1, r2, #4
 8002bc6:	6019      	str	r1, [r3, #0]
 8002bc8:	6813      	ldr	r3, [r2, #0]
 8002bca:	702b      	strb	r3, [r5, #0]
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0a0      	b.n	8002d12 <_printf_i+0x1c2>
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	6809      	ldr	r1, [r1, #0]
 8002bd4:	1d02      	adds	r2, r0, #4
 8002bd6:	060d      	lsls	r5, r1, #24
 8002bd8:	d50b      	bpl.n	8002bf2 <_printf_i+0xa2>
 8002bda:	6806      	ldr	r6, [r0, #0]
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	2e00      	cmp	r6, #0
 8002be0:	da03      	bge.n	8002bea <_printf_i+0x9a>
 8002be2:	232d      	movs	r3, #45	@ 0x2d
 8002be4:	9a03      	ldr	r2, [sp, #12]
 8002be6:	4276      	negs	r6, r6
 8002be8:	7013      	strb	r3, [r2, #0]
 8002bea:	4b5e      	ldr	r3, [pc, #376]	@ (8002d64 <_printf_i+0x214>)
 8002bec:	270a      	movs	r7, #10
 8002bee:	9304      	str	r3, [sp, #16]
 8002bf0:	e018      	b.n	8002c24 <_printf_i+0xd4>
 8002bf2:	6806      	ldr	r6, [r0, #0]
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	0649      	lsls	r1, r1, #25
 8002bf8:	d5f1      	bpl.n	8002bde <_printf_i+0x8e>
 8002bfa:	b236      	sxth	r6, r6
 8002bfc:	e7ef      	b.n	8002bde <_printf_i+0x8e>
 8002bfe:	6808      	ldr	r0, [r1, #0]
 8002c00:	6819      	ldr	r1, [r3, #0]
 8002c02:	c940      	ldmia	r1!, {r6}
 8002c04:	0605      	lsls	r5, r0, #24
 8002c06:	d402      	bmi.n	8002c0e <_printf_i+0xbe>
 8002c08:	0640      	lsls	r0, r0, #25
 8002c0a:	d500      	bpl.n	8002c0e <_printf_i+0xbe>
 8002c0c:	b2b6      	uxth	r6, r6
 8002c0e:	6019      	str	r1, [r3, #0]
 8002c10:	4b54      	ldr	r3, [pc, #336]	@ (8002d64 <_printf_i+0x214>)
 8002c12:	270a      	movs	r7, #10
 8002c14:	9304      	str	r3, [sp, #16]
 8002c16:	2a6f      	cmp	r2, #111	@ 0x6f
 8002c18:	d100      	bne.n	8002c1c <_printf_i+0xcc>
 8002c1a:	3f02      	subs	r7, #2
 8002c1c:	0023      	movs	r3, r4
 8002c1e:	2200      	movs	r2, #0
 8002c20:	3343      	adds	r3, #67	@ 0x43
 8002c22:	701a      	strb	r2, [r3, #0]
 8002c24:	6863      	ldr	r3, [r4, #4]
 8002c26:	60a3      	str	r3, [r4, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	db03      	blt.n	8002c34 <_printf_i+0xe4>
 8002c2c:	2104      	movs	r1, #4
 8002c2e:	6822      	ldr	r2, [r4, #0]
 8002c30:	438a      	bics	r2, r1
 8002c32:	6022      	str	r2, [r4, #0]
 8002c34:	2e00      	cmp	r6, #0
 8002c36:	d102      	bne.n	8002c3e <_printf_i+0xee>
 8002c38:	9d03      	ldr	r5, [sp, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00c      	beq.n	8002c58 <_printf_i+0x108>
 8002c3e:	9d03      	ldr	r5, [sp, #12]
 8002c40:	0030      	movs	r0, r6
 8002c42:	0039      	movs	r1, r7
 8002c44:	f7fd faf0 	bl	8000228 <__aeabi_uidivmod>
 8002c48:	9b04      	ldr	r3, [sp, #16]
 8002c4a:	3d01      	subs	r5, #1
 8002c4c:	5c5b      	ldrb	r3, [r3, r1]
 8002c4e:	702b      	strb	r3, [r5, #0]
 8002c50:	0033      	movs	r3, r6
 8002c52:	0006      	movs	r6, r0
 8002c54:	429f      	cmp	r7, r3
 8002c56:	d9f3      	bls.n	8002c40 <_printf_i+0xf0>
 8002c58:	2f08      	cmp	r7, #8
 8002c5a:	d109      	bne.n	8002c70 <_printf_i+0x120>
 8002c5c:	6823      	ldr	r3, [r4, #0]
 8002c5e:	07db      	lsls	r3, r3, #31
 8002c60:	d506      	bpl.n	8002c70 <_printf_i+0x120>
 8002c62:	6862      	ldr	r2, [r4, #4]
 8002c64:	6923      	ldr	r3, [r4, #16]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	dc02      	bgt.n	8002c70 <_printf_i+0x120>
 8002c6a:	2330      	movs	r3, #48	@ 0x30
 8002c6c:	3d01      	subs	r5, #1
 8002c6e:	702b      	strb	r3, [r5, #0]
 8002c70:	9b03      	ldr	r3, [sp, #12]
 8002c72:	1b5b      	subs	r3, r3, r5
 8002c74:	6123      	str	r3, [r4, #16]
 8002c76:	9b07      	ldr	r3, [sp, #28]
 8002c78:	0021      	movs	r1, r4
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	9805      	ldr	r0, [sp, #20]
 8002c7e:	9b06      	ldr	r3, [sp, #24]
 8002c80:	aa09      	add	r2, sp, #36	@ 0x24
 8002c82:	f7ff fef5 	bl	8002a70 <_printf_common>
 8002c86:	3001      	adds	r0, #1
 8002c88:	d148      	bne.n	8002d1c <_printf_i+0x1cc>
 8002c8a:	2001      	movs	r0, #1
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	b00b      	add	sp, #44	@ 0x2c
 8002c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c92:	2220      	movs	r2, #32
 8002c94:	6809      	ldr	r1, [r1, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	6022      	str	r2, [r4, #0]
 8002c9a:	2278      	movs	r2, #120	@ 0x78
 8002c9c:	4932      	ldr	r1, [pc, #200]	@ (8002d68 <_printf_i+0x218>)
 8002c9e:	9104      	str	r1, [sp, #16]
 8002ca0:	0021      	movs	r1, r4
 8002ca2:	3145      	adds	r1, #69	@ 0x45
 8002ca4:	700a      	strb	r2, [r1, #0]
 8002ca6:	6819      	ldr	r1, [r3, #0]
 8002ca8:	6822      	ldr	r2, [r4, #0]
 8002caa:	c940      	ldmia	r1!, {r6}
 8002cac:	0610      	lsls	r0, r2, #24
 8002cae:	d402      	bmi.n	8002cb6 <_printf_i+0x166>
 8002cb0:	0650      	lsls	r0, r2, #25
 8002cb2:	d500      	bpl.n	8002cb6 <_printf_i+0x166>
 8002cb4:	b2b6      	uxth	r6, r6
 8002cb6:	6019      	str	r1, [r3, #0]
 8002cb8:	07d3      	lsls	r3, r2, #31
 8002cba:	d502      	bpl.n	8002cc2 <_printf_i+0x172>
 8002cbc:	2320      	movs	r3, #32
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	6023      	str	r3, [r4, #0]
 8002cc2:	2e00      	cmp	r6, #0
 8002cc4:	d001      	beq.n	8002cca <_printf_i+0x17a>
 8002cc6:	2710      	movs	r7, #16
 8002cc8:	e7a8      	b.n	8002c1c <_printf_i+0xcc>
 8002cca:	2220      	movs	r2, #32
 8002ccc:	6823      	ldr	r3, [r4, #0]
 8002cce:	4393      	bics	r3, r2
 8002cd0:	6023      	str	r3, [r4, #0]
 8002cd2:	e7f8      	b.n	8002cc6 <_printf_i+0x176>
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	680d      	ldr	r5, [r1, #0]
 8002cd8:	1d10      	adds	r0, r2, #4
 8002cda:	6949      	ldr	r1, [r1, #20]
 8002cdc:	6018      	str	r0, [r3, #0]
 8002cde:	6813      	ldr	r3, [r2, #0]
 8002ce0:	062e      	lsls	r6, r5, #24
 8002ce2:	d501      	bpl.n	8002ce8 <_printf_i+0x198>
 8002ce4:	6019      	str	r1, [r3, #0]
 8002ce6:	e002      	b.n	8002cee <_printf_i+0x19e>
 8002ce8:	066d      	lsls	r5, r5, #25
 8002cea:	d5fb      	bpl.n	8002ce4 <_printf_i+0x194>
 8002cec:	8019      	strh	r1, [r3, #0]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	9d03      	ldr	r5, [sp, #12]
 8002cf2:	6123      	str	r3, [r4, #16]
 8002cf4:	e7bf      	b.n	8002c76 <_printf_i+0x126>
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	1d11      	adds	r1, r2, #4
 8002cfa:	6019      	str	r1, [r3, #0]
 8002cfc:	6815      	ldr	r5, [r2, #0]
 8002cfe:	2100      	movs	r1, #0
 8002d00:	0028      	movs	r0, r5
 8002d02:	6862      	ldr	r2, [r4, #4]
 8002d04:	f000 f996 	bl	8003034 <memchr>
 8002d08:	2800      	cmp	r0, #0
 8002d0a:	d001      	beq.n	8002d10 <_printf_i+0x1c0>
 8002d0c:	1b40      	subs	r0, r0, r5
 8002d0e:	6060      	str	r0, [r4, #4]
 8002d10:	6863      	ldr	r3, [r4, #4]
 8002d12:	6123      	str	r3, [r4, #16]
 8002d14:	2300      	movs	r3, #0
 8002d16:	9a03      	ldr	r2, [sp, #12]
 8002d18:	7013      	strb	r3, [r2, #0]
 8002d1a:	e7ac      	b.n	8002c76 <_printf_i+0x126>
 8002d1c:	002a      	movs	r2, r5
 8002d1e:	6923      	ldr	r3, [r4, #16]
 8002d20:	9906      	ldr	r1, [sp, #24]
 8002d22:	9805      	ldr	r0, [sp, #20]
 8002d24:	9d07      	ldr	r5, [sp, #28]
 8002d26:	47a8      	blx	r5
 8002d28:	3001      	adds	r0, #1
 8002d2a:	d0ae      	beq.n	8002c8a <_printf_i+0x13a>
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	079b      	lsls	r3, r3, #30
 8002d30:	d415      	bmi.n	8002d5e <_printf_i+0x20e>
 8002d32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002d34:	68e0      	ldr	r0, [r4, #12]
 8002d36:	4298      	cmp	r0, r3
 8002d38:	daa9      	bge.n	8002c8e <_printf_i+0x13e>
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	e7a7      	b.n	8002c8e <_printf_i+0x13e>
 8002d3e:	0022      	movs	r2, r4
 8002d40:	2301      	movs	r3, #1
 8002d42:	9906      	ldr	r1, [sp, #24]
 8002d44:	9805      	ldr	r0, [sp, #20]
 8002d46:	9e07      	ldr	r6, [sp, #28]
 8002d48:	3219      	adds	r2, #25
 8002d4a:	47b0      	blx	r6
 8002d4c:	3001      	adds	r0, #1
 8002d4e:	d09c      	beq.n	8002c8a <_printf_i+0x13a>
 8002d50:	3501      	adds	r5, #1
 8002d52:	68e3      	ldr	r3, [r4, #12]
 8002d54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	42ab      	cmp	r3, r5
 8002d5a:	dcf0      	bgt.n	8002d3e <_printf_i+0x1ee>
 8002d5c:	e7e9      	b.n	8002d32 <_printf_i+0x1e2>
 8002d5e:	2500      	movs	r5, #0
 8002d60:	e7f7      	b.n	8002d52 <_printf_i+0x202>
 8002d62:	46c0      	nop			@ (mov r8, r8)
 8002d64:	08003205 	.word	0x08003205
 8002d68:	08003216 	.word	0x08003216

08002d6c <__sflush_r>:
 8002d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d6e:	220c      	movs	r2, #12
 8002d70:	5e8b      	ldrsh	r3, [r1, r2]
 8002d72:	0005      	movs	r5, r0
 8002d74:	000c      	movs	r4, r1
 8002d76:	071a      	lsls	r2, r3, #28
 8002d78:	d456      	bmi.n	8002e28 <__sflush_r+0xbc>
 8002d7a:	684a      	ldr	r2, [r1, #4]
 8002d7c:	2a00      	cmp	r2, #0
 8002d7e:	dc02      	bgt.n	8002d86 <__sflush_r+0x1a>
 8002d80:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8002d82:	2a00      	cmp	r2, #0
 8002d84:	dd4e      	ble.n	8002e24 <__sflush_r+0xb8>
 8002d86:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8002d88:	2f00      	cmp	r7, #0
 8002d8a:	d04b      	beq.n	8002e24 <__sflush_r+0xb8>
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2080      	movs	r0, #128	@ 0x80
 8002d90:	682e      	ldr	r6, [r5, #0]
 8002d92:	602a      	str	r2, [r5, #0]
 8002d94:	001a      	movs	r2, r3
 8002d96:	0140      	lsls	r0, r0, #5
 8002d98:	6a21      	ldr	r1, [r4, #32]
 8002d9a:	4002      	ands	r2, r0
 8002d9c:	4203      	tst	r3, r0
 8002d9e:	d033      	beq.n	8002e08 <__sflush_r+0x9c>
 8002da0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002da2:	89a3      	ldrh	r3, [r4, #12]
 8002da4:	075b      	lsls	r3, r3, #29
 8002da6:	d506      	bpl.n	8002db6 <__sflush_r+0x4a>
 8002da8:	6863      	ldr	r3, [r4, #4]
 8002daa:	1ad2      	subs	r2, r2, r3
 8002dac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <__sflush_r+0x4a>
 8002db2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002db4:	1ad2      	subs	r2, r2, r3
 8002db6:	2300      	movs	r3, #0
 8002db8:	0028      	movs	r0, r5
 8002dba:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8002dbc:	6a21      	ldr	r1, [r4, #32]
 8002dbe:	47b8      	blx	r7
 8002dc0:	89a2      	ldrh	r2, [r4, #12]
 8002dc2:	1c43      	adds	r3, r0, #1
 8002dc4:	d106      	bne.n	8002dd4 <__sflush_r+0x68>
 8002dc6:	6829      	ldr	r1, [r5, #0]
 8002dc8:	291d      	cmp	r1, #29
 8002dca:	d846      	bhi.n	8002e5a <__sflush_r+0xee>
 8002dcc:	4b29      	ldr	r3, [pc, #164]	@ (8002e74 <__sflush_r+0x108>)
 8002dce:	410b      	asrs	r3, r1
 8002dd0:	07db      	lsls	r3, r3, #31
 8002dd2:	d442      	bmi.n	8002e5a <__sflush_r+0xee>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	6063      	str	r3, [r4, #4]
 8002dd8:	6923      	ldr	r3, [r4, #16]
 8002dda:	6023      	str	r3, [r4, #0]
 8002ddc:	04d2      	lsls	r2, r2, #19
 8002dde:	d505      	bpl.n	8002dec <__sflush_r+0x80>
 8002de0:	1c43      	adds	r3, r0, #1
 8002de2:	d102      	bne.n	8002dea <__sflush_r+0x7e>
 8002de4:	682b      	ldr	r3, [r5, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d100      	bne.n	8002dec <__sflush_r+0x80>
 8002dea:	6560      	str	r0, [r4, #84]	@ 0x54
 8002dec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002dee:	602e      	str	r6, [r5, #0]
 8002df0:	2900      	cmp	r1, #0
 8002df2:	d017      	beq.n	8002e24 <__sflush_r+0xb8>
 8002df4:	0023      	movs	r3, r4
 8002df6:	3344      	adds	r3, #68	@ 0x44
 8002df8:	4299      	cmp	r1, r3
 8002dfa:	d002      	beq.n	8002e02 <__sflush_r+0x96>
 8002dfc:	0028      	movs	r0, r5
 8002dfe:	f7ff fbf7 	bl	80025f0 <_free_r>
 8002e02:	2300      	movs	r3, #0
 8002e04:	6363      	str	r3, [r4, #52]	@ 0x34
 8002e06:	e00d      	b.n	8002e24 <__sflush_r+0xb8>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	0028      	movs	r0, r5
 8002e0c:	47b8      	blx	r7
 8002e0e:	0002      	movs	r2, r0
 8002e10:	1c43      	adds	r3, r0, #1
 8002e12:	d1c6      	bne.n	8002da2 <__sflush_r+0x36>
 8002e14:	682b      	ldr	r3, [r5, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0c3      	beq.n	8002da2 <__sflush_r+0x36>
 8002e1a:	2b1d      	cmp	r3, #29
 8002e1c:	d001      	beq.n	8002e22 <__sflush_r+0xb6>
 8002e1e:	2b16      	cmp	r3, #22
 8002e20:	d11a      	bne.n	8002e58 <__sflush_r+0xec>
 8002e22:	602e      	str	r6, [r5, #0]
 8002e24:	2000      	movs	r0, #0
 8002e26:	e01e      	b.n	8002e66 <__sflush_r+0xfa>
 8002e28:	690e      	ldr	r6, [r1, #16]
 8002e2a:	2e00      	cmp	r6, #0
 8002e2c:	d0fa      	beq.n	8002e24 <__sflush_r+0xb8>
 8002e2e:	680f      	ldr	r7, [r1, #0]
 8002e30:	600e      	str	r6, [r1, #0]
 8002e32:	1bba      	subs	r2, r7, r6
 8002e34:	9201      	str	r2, [sp, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	079b      	lsls	r3, r3, #30
 8002e3a:	d100      	bne.n	8002e3e <__sflush_r+0xd2>
 8002e3c:	694a      	ldr	r2, [r1, #20]
 8002e3e:	60a2      	str	r2, [r4, #8]
 8002e40:	9b01      	ldr	r3, [sp, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	ddee      	ble.n	8002e24 <__sflush_r+0xb8>
 8002e46:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002e48:	0032      	movs	r2, r6
 8002e4a:	001f      	movs	r7, r3
 8002e4c:	0028      	movs	r0, r5
 8002e4e:	9b01      	ldr	r3, [sp, #4]
 8002e50:	6a21      	ldr	r1, [r4, #32]
 8002e52:	47b8      	blx	r7
 8002e54:	2800      	cmp	r0, #0
 8002e56:	dc07      	bgt.n	8002e68 <__sflush_r+0xfc>
 8002e58:	89a2      	ldrh	r2, [r4, #12]
 8002e5a:	2340      	movs	r3, #64	@ 0x40
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	b21b      	sxth	r3, r3
 8002e62:	81a3      	strh	r3, [r4, #12]
 8002e64:	4240      	negs	r0, r0
 8002e66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002e68:	9b01      	ldr	r3, [sp, #4]
 8002e6a:	1836      	adds	r6, r6, r0
 8002e6c:	1a1b      	subs	r3, r3, r0
 8002e6e:	9301      	str	r3, [sp, #4]
 8002e70:	e7e6      	b.n	8002e40 <__sflush_r+0xd4>
 8002e72:	46c0      	nop			@ (mov r8, r8)
 8002e74:	dfbffffe 	.word	0xdfbffffe

08002e78 <_fflush_r>:
 8002e78:	690b      	ldr	r3, [r1, #16]
 8002e7a:	b570      	push	{r4, r5, r6, lr}
 8002e7c:	0005      	movs	r5, r0
 8002e7e:	000c      	movs	r4, r1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d102      	bne.n	8002e8a <_fflush_r+0x12>
 8002e84:	2500      	movs	r5, #0
 8002e86:	0028      	movs	r0, r5
 8002e88:	bd70      	pop	{r4, r5, r6, pc}
 8002e8a:	2800      	cmp	r0, #0
 8002e8c:	d004      	beq.n	8002e98 <_fflush_r+0x20>
 8002e8e:	6a03      	ldr	r3, [r0, #32]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d101      	bne.n	8002e98 <_fflush_r+0x20>
 8002e94:	f7ff fa98 	bl	80023c8 <__sinit>
 8002e98:	220c      	movs	r2, #12
 8002e9a:	5ea3      	ldrsh	r3, [r4, r2]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f1      	beq.n	8002e84 <_fflush_r+0xc>
 8002ea0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002ea2:	07d2      	lsls	r2, r2, #31
 8002ea4:	d404      	bmi.n	8002eb0 <_fflush_r+0x38>
 8002ea6:	059b      	lsls	r3, r3, #22
 8002ea8:	d402      	bmi.n	8002eb0 <_fflush_r+0x38>
 8002eaa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002eac:	f7ff fb9d 	bl	80025ea <__retarget_lock_acquire_recursive>
 8002eb0:	0028      	movs	r0, r5
 8002eb2:	0021      	movs	r1, r4
 8002eb4:	f7ff ff5a 	bl	8002d6c <__sflush_r>
 8002eb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002eba:	0005      	movs	r5, r0
 8002ebc:	07db      	lsls	r3, r3, #31
 8002ebe:	d4e2      	bmi.n	8002e86 <_fflush_r+0xe>
 8002ec0:	89a3      	ldrh	r3, [r4, #12]
 8002ec2:	059b      	lsls	r3, r3, #22
 8002ec4:	d4df      	bmi.n	8002e86 <_fflush_r+0xe>
 8002ec6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ec8:	f7ff fb90 	bl	80025ec <__retarget_lock_release_recursive>
 8002ecc:	e7db      	b.n	8002e86 <_fflush_r+0xe>

08002ece <__swbuf_r>:
 8002ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed0:	0006      	movs	r6, r0
 8002ed2:	000d      	movs	r5, r1
 8002ed4:	0014      	movs	r4, r2
 8002ed6:	2800      	cmp	r0, #0
 8002ed8:	d004      	beq.n	8002ee4 <__swbuf_r+0x16>
 8002eda:	6a03      	ldr	r3, [r0, #32]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <__swbuf_r+0x16>
 8002ee0:	f7ff fa72 	bl	80023c8 <__sinit>
 8002ee4:	69a3      	ldr	r3, [r4, #24]
 8002ee6:	60a3      	str	r3, [r4, #8]
 8002ee8:	89a3      	ldrh	r3, [r4, #12]
 8002eea:	071b      	lsls	r3, r3, #28
 8002eec:	d502      	bpl.n	8002ef4 <__swbuf_r+0x26>
 8002eee:	6923      	ldr	r3, [r4, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d109      	bne.n	8002f08 <__swbuf_r+0x3a>
 8002ef4:	0021      	movs	r1, r4
 8002ef6:	0030      	movs	r0, r6
 8002ef8:	f000 f82c 	bl	8002f54 <__swsetup_r>
 8002efc:	2800      	cmp	r0, #0
 8002efe:	d003      	beq.n	8002f08 <__swbuf_r+0x3a>
 8002f00:	2501      	movs	r5, #1
 8002f02:	426d      	negs	r5, r5
 8002f04:	0028      	movs	r0, r5
 8002f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f08:	6923      	ldr	r3, [r4, #16]
 8002f0a:	6820      	ldr	r0, [r4, #0]
 8002f0c:	b2ef      	uxtb	r7, r5
 8002f0e:	1ac0      	subs	r0, r0, r3
 8002f10:	6963      	ldr	r3, [r4, #20]
 8002f12:	b2ed      	uxtb	r5, r5
 8002f14:	4283      	cmp	r3, r0
 8002f16:	dc05      	bgt.n	8002f24 <__swbuf_r+0x56>
 8002f18:	0021      	movs	r1, r4
 8002f1a:	0030      	movs	r0, r6
 8002f1c:	f7ff ffac 	bl	8002e78 <_fflush_r>
 8002f20:	2800      	cmp	r0, #0
 8002f22:	d1ed      	bne.n	8002f00 <__swbuf_r+0x32>
 8002f24:	68a3      	ldr	r3, [r4, #8]
 8002f26:	3001      	adds	r0, #1
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	60a3      	str	r3, [r4, #8]
 8002f2c:	6823      	ldr	r3, [r4, #0]
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	6022      	str	r2, [r4, #0]
 8002f32:	701f      	strb	r7, [r3, #0]
 8002f34:	6963      	ldr	r3, [r4, #20]
 8002f36:	4283      	cmp	r3, r0
 8002f38:	d004      	beq.n	8002f44 <__swbuf_r+0x76>
 8002f3a:	89a3      	ldrh	r3, [r4, #12]
 8002f3c:	07db      	lsls	r3, r3, #31
 8002f3e:	d5e1      	bpl.n	8002f04 <__swbuf_r+0x36>
 8002f40:	2d0a      	cmp	r5, #10
 8002f42:	d1df      	bne.n	8002f04 <__swbuf_r+0x36>
 8002f44:	0021      	movs	r1, r4
 8002f46:	0030      	movs	r0, r6
 8002f48:	f7ff ff96 	bl	8002e78 <_fflush_r>
 8002f4c:	2800      	cmp	r0, #0
 8002f4e:	d0d9      	beq.n	8002f04 <__swbuf_r+0x36>
 8002f50:	e7d6      	b.n	8002f00 <__swbuf_r+0x32>
	...

08002f54 <__swsetup_r>:
 8002f54:	4b2d      	ldr	r3, [pc, #180]	@ (800300c <__swsetup_r+0xb8>)
 8002f56:	b570      	push	{r4, r5, r6, lr}
 8002f58:	0005      	movs	r5, r0
 8002f5a:	6818      	ldr	r0, [r3, #0]
 8002f5c:	000c      	movs	r4, r1
 8002f5e:	2800      	cmp	r0, #0
 8002f60:	d004      	beq.n	8002f6c <__swsetup_r+0x18>
 8002f62:	6a03      	ldr	r3, [r0, #32]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <__swsetup_r+0x18>
 8002f68:	f7ff fa2e 	bl	80023c8 <__sinit>
 8002f6c:	230c      	movs	r3, #12
 8002f6e:	5ee2      	ldrsh	r2, [r4, r3]
 8002f70:	0713      	lsls	r3, r2, #28
 8002f72:	d423      	bmi.n	8002fbc <__swsetup_r+0x68>
 8002f74:	06d3      	lsls	r3, r2, #27
 8002f76:	d407      	bmi.n	8002f88 <__swsetup_r+0x34>
 8002f78:	2309      	movs	r3, #9
 8002f7a:	602b      	str	r3, [r5, #0]
 8002f7c:	2340      	movs	r3, #64	@ 0x40
 8002f7e:	2001      	movs	r0, #1
 8002f80:	4313      	orrs	r3, r2
 8002f82:	81a3      	strh	r3, [r4, #12]
 8002f84:	4240      	negs	r0, r0
 8002f86:	e03a      	b.n	8002ffe <__swsetup_r+0xaa>
 8002f88:	0752      	lsls	r2, r2, #29
 8002f8a:	d513      	bpl.n	8002fb4 <__swsetup_r+0x60>
 8002f8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002f8e:	2900      	cmp	r1, #0
 8002f90:	d008      	beq.n	8002fa4 <__swsetup_r+0x50>
 8002f92:	0023      	movs	r3, r4
 8002f94:	3344      	adds	r3, #68	@ 0x44
 8002f96:	4299      	cmp	r1, r3
 8002f98:	d002      	beq.n	8002fa0 <__swsetup_r+0x4c>
 8002f9a:	0028      	movs	r0, r5
 8002f9c:	f7ff fb28 	bl	80025f0 <_free_r>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	6363      	str	r3, [r4, #52]	@ 0x34
 8002fa4:	2224      	movs	r2, #36	@ 0x24
 8002fa6:	89a3      	ldrh	r3, [r4, #12]
 8002fa8:	4393      	bics	r3, r2
 8002faa:	81a3      	strh	r3, [r4, #12]
 8002fac:	2300      	movs	r3, #0
 8002fae:	6063      	str	r3, [r4, #4]
 8002fb0:	6923      	ldr	r3, [r4, #16]
 8002fb2:	6023      	str	r3, [r4, #0]
 8002fb4:	2308      	movs	r3, #8
 8002fb6:	89a2      	ldrh	r2, [r4, #12]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	81a3      	strh	r3, [r4, #12]
 8002fbc:	6923      	ldr	r3, [r4, #16]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10b      	bne.n	8002fda <__swsetup_r+0x86>
 8002fc2:	21a0      	movs	r1, #160	@ 0xa0
 8002fc4:	2280      	movs	r2, #128	@ 0x80
 8002fc6:	89a3      	ldrh	r3, [r4, #12]
 8002fc8:	0089      	lsls	r1, r1, #2
 8002fca:	0092      	lsls	r2, r2, #2
 8002fcc:	400b      	ands	r3, r1
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d003      	beq.n	8002fda <__swsetup_r+0x86>
 8002fd2:	0021      	movs	r1, r4
 8002fd4:	0028      	movs	r0, r5
 8002fd6:	f000 f863 	bl	80030a0 <__smakebuf_r>
 8002fda:	230c      	movs	r3, #12
 8002fdc:	5ee2      	ldrsh	r2, [r4, r3]
 8002fde:	2101      	movs	r1, #1
 8002fe0:	0013      	movs	r3, r2
 8002fe2:	400b      	ands	r3, r1
 8002fe4:	420a      	tst	r2, r1
 8002fe6:	d00b      	beq.n	8003000 <__swsetup_r+0xac>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60a3      	str	r3, [r4, #8]
 8002fec:	6963      	ldr	r3, [r4, #20]
 8002fee:	425b      	negs	r3, r3
 8002ff0:	61a3      	str	r3, [r4, #24]
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	6923      	ldr	r3, [r4, #16]
 8002ff6:	4283      	cmp	r3, r0
 8002ff8:	d101      	bne.n	8002ffe <__swsetup_r+0xaa>
 8002ffa:	0613      	lsls	r3, r2, #24
 8002ffc:	d4be      	bmi.n	8002f7c <__swsetup_r+0x28>
 8002ffe:	bd70      	pop	{r4, r5, r6, pc}
 8003000:	0791      	lsls	r1, r2, #30
 8003002:	d400      	bmi.n	8003006 <__swsetup_r+0xb2>
 8003004:	6963      	ldr	r3, [r4, #20]
 8003006:	60a3      	str	r3, [r4, #8]
 8003008:	e7f3      	b.n	8002ff2 <__swsetup_r+0x9e>
 800300a:	46c0      	nop			@ (mov r8, r8)
 800300c:	20000018 	.word	0x20000018

08003010 <_sbrk_r>:
 8003010:	2300      	movs	r3, #0
 8003012:	b570      	push	{r4, r5, r6, lr}
 8003014:	4d06      	ldr	r5, [pc, #24]	@ (8003030 <_sbrk_r+0x20>)
 8003016:	0004      	movs	r4, r0
 8003018:	0008      	movs	r0, r1
 800301a:	602b      	str	r3, [r5, #0]
 800301c:	f7fd fa80 	bl	8000520 <_sbrk>
 8003020:	1c43      	adds	r3, r0, #1
 8003022:	d103      	bne.n	800302c <_sbrk_r+0x1c>
 8003024:	682b      	ldr	r3, [r5, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d000      	beq.n	800302c <_sbrk_r+0x1c>
 800302a:	6023      	str	r3, [r4, #0]
 800302c:	bd70      	pop	{r4, r5, r6, pc}
 800302e:	46c0      	nop			@ (mov r8, r8)
 8003030:	20000a68 	.word	0x20000a68

08003034 <memchr>:
 8003034:	b2c9      	uxtb	r1, r1
 8003036:	1882      	adds	r2, r0, r2
 8003038:	4290      	cmp	r0, r2
 800303a:	d101      	bne.n	8003040 <memchr+0xc>
 800303c:	2000      	movs	r0, #0
 800303e:	4770      	bx	lr
 8003040:	7803      	ldrb	r3, [r0, #0]
 8003042:	428b      	cmp	r3, r1
 8003044:	d0fb      	beq.n	800303e <memchr+0xa>
 8003046:	3001      	adds	r0, #1
 8003048:	e7f6      	b.n	8003038 <memchr+0x4>
	...

0800304c <__swhatbuf_r>:
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	000e      	movs	r6, r1
 8003050:	001d      	movs	r5, r3
 8003052:	230e      	movs	r3, #14
 8003054:	5ec9      	ldrsh	r1, [r1, r3]
 8003056:	0014      	movs	r4, r2
 8003058:	b096      	sub	sp, #88	@ 0x58
 800305a:	2900      	cmp	r1, #0
 800305c:	da0c      	bge.n	8003078 <__swhatbuf_r+0x2c>
 800305e:	89b2      	ldrh	r2, [r6, #12]
 8003060:	2380      	movs	r3, #128	@ 0x80
 8003062:	0011      	movs	r1, r2
 8003064:	4019      	ands	r1, r3
 8003066:	421a      	tst	r2, r3
 8003068:	d114      	bne.n	8003094 <__swhatbuf_r+0x48>
 800306a:	2380      	movs	r3, #128	@ 0x80
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	2000      	movs	r0, #0
 8003070:	6029      	str	r1, [r5, #0]
 8003072:	6023      	str	r3, [r4, #0]
 8003074:	b016      	add	sp, #88	@ 0x58
 8003076:	bd70      	pop	{r4, r5, r6, pc}
 8003078:	466a      	mov	r2, sp
 800307a:	f000 f853 	bl	8003124 <_fstat_r>
 800307e:	2800      	cmp	r0, #0
 8003080:	dbed      	blt.n	800305e <__swhatbuf_r+0x12>
 8003082:	23f0      	movs	r3, #240	@ 0xf0
 8003084:	9901      	ldr	r1, [sp, #4]
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	4019      	ands	r1, r3
 800308a:	4b04      	ldr	r3, [pc, #16]	@ (800309c <__swhatbuf_r+0x50>)
 800308c:	18c9      	adds	r1, r1, r3
 800308e:	424b      	negs	r3, r1
 8003090:	4159      	adcs	r1, r3
 8003092:	e7ea      	b.n	800306a <__swhatbuf_r+0x1e>
 8003094:	2100      	movs	r1, #0
 8003096:	2340      	movs	r3, #64	@ 0x40
 8003098:	e7e9      	b.n	800306e <__swhatbuf_r+0x22>
 800309a:	46c0      	nop			@ (mov r8, r8)
 800309c:	ffffe000 	.word	0xffffe000

080030a0 <__smakebuf_r>:
 80030a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030a2:	2602      	movs	r6, #2
 80030a4:	898b      	ldrh	r3, [r1, #12]
 80030a6:	0005      	movs	r5, r0
 80030a8:	000c      	movs	r4, r1
 80030aa:	b085      	sub	sp, #20
 80030ac:	4233      	tst	r3, r6
 80030ae:	d007      	beq.n	80030c0 <__smakebuf_r+0x20>
 80030b0:	0023      	movs	r3, r4
 80030b2:	3347      	adds	r3, #71	@ 0x47
 80030b4:	6023      	str	r3, [r4, #0]
 80030b6:	6123      	str	r3, [r4, #16]
 80030b8:	2301      	movs	r3, #1
 80030ba:	6163      	str	r3, [r4, #20]
 80030bc:	b005      	add	sp, #20
 80030be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030c0:	ab03      	add	r3, sp, #12
 80030c2:	aa02      	add	r2, sp, #8
 80030c4:	f7ff ffc2 	bl	800304c <__swhatbuf_r>
 80030c8:	9f02      	ldr	r7, [sp, #8]
 80030ca:	9001      	str	r0, [sp, #4]
 80030cc:	0039      	movs	r1, r7
 80030ce:	0028      	movs	r0, r5
 80030d0:	f7ff fafa 	bl	80026c8 <_malloc_r>
 80030d4:	2800      	cmp	r0, #0
 80030d6:	d108      	bne.n	80030ea <__smakebuf_r+0x4a>
 80030d8:	220c      	movs	r2, #12
 80030da:	5ea3      	ldrsh	r3, [r4, r2]
 80030dc:	059a      	lsls	r2, r3, #22
 80030de:	d4ed      	bmi.n	80030bc <__smakebuf_r+0x1c>
 80030e0:	2203      	movs	r2, #3
 80030e2:	4393      	bics	r3, r2
 80030e4:	431e      	orrs	r6, r3
 80030e6:	81a6      	strh	r6, [r4, #12]
 80030e8:	e7e2      	b.n	80030b0 <__smakebuf_r+0x10>
 80030ea:	2380      	movs	r3, #128	@ 0x80
 80030ec:	89a2      	ldrh	r2, [r4, #12]
 80030ee:	6020      	str	r0, [r4, #0]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	81a3      	strh	r3, [r4, #12]
 80030f4:	9b03      	ldr	r3, [sp, #12]
 80030f6:	6120      	str	r0, [r4, #16]
 80030f8:	6167      	str	r7, [r4, #20]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00c      	beq.n	8003118 <__smakebuf_r+0x78>
 80030fe:	0028      	movs	r0, r5
 8003100:	230e      	movs	r3, #14
 8003102:	5ee1      	ldrsh	r1, [r4, r3]
 8003104:	f000 f820 	bl	8003148 <_isatty_r>
 8003108:	2800      	cmp	r0, #0
 800310a:	d005      	beq.n	8003118 <__smakebuf_r+0x78>
 800310c:	2303      	movs	r3, #3
 800310e:	89a2      	ldrh	r2, [r4, #12]
 8003110:	439a      	bics	r2, r3
 8003112:	3b02      	subs	r3, #2
 8003114:	4313      	orrs	r3, r2
 8003116:	81a3      	strh	r3, [r4, #12]
 8003118:	89a3      	ldrh	r3, [r4, #12]
 800311a:	9a01      	ldr	r2, [sp, #4]
 800311c:	4313      	orrs	r3, r2
 800311e:	81a3      	strh	r3, [r4, #12]
 8003120:	e7cc      	b.n	80030bc <__smakebuf_r+0x1c>
	...

08003124 <_fstat_r>:
 8003124:	2300      	movs	r3, #0
 8003126:	b570      	push	{r4, r5, r6, lr}
 8003128:	4d06      	ldr	r5, [pc, #24]	@ (8003144 <_fstat_r+0x20>)
 800312a:	0004      	movs	r4, r0
 800312c:	0008      	movs	r0, r1
 800312e:	0011      	movs	r1, r2
 8003130:	602b      	str	r3, [r5, #0]
 8003132:	f7fd f9d3 	bl	80004dc <_fstat>
 8003136:	1c43      	adds	r3, r0, #1
 8003138:	d103      	bne.n	8003142 <_fstat_r+0x1e>
 800313a:	682b      	ldr	r3, [r5, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d000      	beq.n	8003142 <_fstat_r+0x1e>
 8003140:	6023      	str	r3, [r4, #0]
 8003142:	bd70      	pop	{r4, r5, r6, pc}
 8003144:	20000a68 	.word	0x20000a68

08003148 <_isatty_r>:
 8003148:	2300      	movs	r3, #0
 800314a:	b570      	push	{r4, r5, r6, lr}
 800314c:	4d06      	ldr	r5, [pc, #24]	@ (8003168 <_isatty_r+0x20>)
 800314e:	0004      	movs	r4, r0
 8003150:	0008      	movs	r0, r1
 8003152:	602b      	str	r3, [r5, #0]
 8003154:	f7fd f9d0 	bl	80004f8 <_isatty>
 8003158:	1c43      	adds	r3, r0, #1
 800315a:	d103      	bne.n	8003164 <_isatty_r+0x1c>
 800315c:	682b      	ldr	r3, [r5, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d000      	beq.n	8003164 <_isatty_r+0x1c>
 8003162:	6023      	str	r3, [r4, #0]
 8003164:	bd70      	pop	{r4, r5, r6, pc}
 8003166:	46c0      	nop			@ (mov r8, r8)
 8003168:	20000a68 	.word	0x20000a68

0800316c <_init>:
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	46c0      	nop			@ (mov r8, r8)
 8003170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003172:	bc08      	pop	{r3}
 8003174:	469e      	mov	lr, r3
 8003176:	4770      	bx	lr

08003178 <_fini>:
 8003178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317a:	46c0      	nop			@ (mov r8, r8)
 800317c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317e:	bc08      	pop	{r3}
 8003180:	469e      	mov	lr, r3
 8003182:	4770      	bx	lr
