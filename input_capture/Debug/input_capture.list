
input_capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002180  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08002240  08002240  00012240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022f0  080022f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080022f0  080022f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022f0  080022f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022f0  080022f0  000122f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022f4  080022f4  000122f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080022f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  2000000c  08002304  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  08002304  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000287f  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000e1d  00000000  00000000  000228f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000370  00000000  00000000  00023718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000270  00000000  00000000  00023a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010bb1  00000000  00000000  00023cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004f45  00000000  00000000  000348a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00067425  00000000  00000000  000397ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000bac  00000000  00000000  000a0c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000a17c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002228 	.word	0x08002228

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002228 	.word	0x08002228

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	; 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 fcb2 	bl	8000b90 <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fc15 	bl	8000a60 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	; 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 fa6f 	bl	8000720 <__aeabi_fsub>
 8000242:	f000 fc0d 	bl	8000a60 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fdiv>:
 8000250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000252:	464f      	mov	r7, r9
 8000254:	4646      	mov	r6, r8
 8000256:	46d6      	mov	lr, sl
 8000258:	0245      	lsls	r5, r0, #9
 800025a:	b5c0      	push	{r6, r7, lr}
 800025c:	0047      	lsls	r7, r0, #1
 800025e:	1c0c      	adds	r4, r1, #0
 8000260:	0a6d      	lsrs	r5, r5, #9
 8000262:	0e3f      	lsrs	r7, r7, #24
 8000264:	0fc6      	lsrs	r6, r0, #31
 8000266:	2f00      	cmp	r7, #0
 8000268:	d100      	bne.n	800026c <__aeabi_fdiv+0x1c>
 800026a:	e06f      	b.n	800034c <__aeabi_fdiv+0xfc>
 800026c:	2fff      	cmp	r7, #255	; 0xff
 800026e:	d100      	bne.n	8000272 <__aeabi_fdiv+0x22>
 8000270:	e074      	b.n	800035c <__aeabi_fdiv+0x10c>
 8000272:	2300      	movs	r3, #0
 8000274:	2280      	movs	r2, #128	; 0x80
 8000276:	4699      	mov	r9, r3
 8000278:	469a      	mov	sl, r3
 800027a:	00ed      	lsls	r5, r5, #3
 800027c:	04d2      	lsls	r2, r2, #19
 800027e:	4315      	orrs	r5, r2
 8000280:	3f7f      	subs	r7, #127	; 0x7f
 8000282:	0263      	lsls	r3, r4, #9
 8000284:	0a5b      	lsrs	r3, r3, #9
 8000286:	4698      	mov	r8, r3
 8000288:	0063      	lsls	r3, r4, #1
 800028a:	0e1b      	lsrs	r3, r3, #24
 800028c:	0fe4      	lsrs	r4, r4, #31
 800028e:	2b00      	cmp	r3, #0
 8000290:	d04d      	beq.n	800032e <__aeabi_fdiv+0xde>
 8000292:	2bff      	cmp	r3, #255	; 0xff
 8000294:	d045      	beq.n	8000322 <__aeabi_fdiv+0xd2>
 8000296:	4642      	mov	r2, r8
 8000298:	2180      	movs	r1, #128	; 0x80
 800029a:	00d2      	lsls	r2, r2, #3
 800029c:	04c9      	lsls	r1, r1, #19
 800029e:	4311      	orrs	r1, r2
 80002a0:	4688      	mov	r8, r1
 80002a2:	2200      	movs	r2, #0
 80002a4:	3b7f      	subs	r3, #127	; 0x7f
 80002a6:	0031      	movs	r1, r6
 80002a8:	1aff      	subs	r7, r7, r3
 80002aa:	464b      	mov	r3, r9
 80002ac:	4061      	eors	r1, r4
 80002ae:	b2c9      	uxtb	r1, r1
 80002b0:	2b0f      	cmp	r3, #15
 80002b2:	d900      	bls.n	80002b6 <__aeabi_fdiv+0x66>
 80002b4:	e0b8      	b.n	8000428 <__aeabi_fdiv+0x1d8>
 80002b6:	4870      	ldr	r0, [pc, #448]	; (8000478 <__aeabi_fdiv+0x228>)
 80002b8:	009b      	lsls	r3, r3, #2
 80002ba:	58c3      	ldr	r3, [r0, r3]
 80002bc:	469f      	mov	pc, r3
 80002be:	2300      	movs	r3, #0
 80002c0:	4698      	mov	r8, r3
 80002c2:	0026      	movs	r6, r4
 80002c4:	4645      	mov	r5, r8
 80002c6:	4692      	mov	sl, r2
 80002c8:	4653      	mov	r3, sl
 80002ca:	2b02      	cmp	r3, #2
 80002cc:	d100      	bne.n	80002d0 <__aeabi_fdiv+0x80>
 80002ce:	e08d      	b.n	80003ec <__aeabi_fdiv+0x19c>
 80002d0:	2b03      	cmp	r3, #3
 80002d2:	d100      	bne.n	80002d6 <__aeabi_fdiv+0x86>
 80002d4:	e0a1      	b.n	800041a <__aeabi_fdiv+0x1ca>
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d018      	beq.n	800030c <__aeabi_fdiv+0xbc>
 80002da:	003b      	movs	r3, r7
 80002dc:	337f      	adds	r3, #127	; 0x7f
 80002de:	2b00      	cmp	r3, #0
 80002e0:	dd6d      	ble.n	80003be <__aeabi_fdiv+0x16e>
 80002e2:	076a      	lsls	r2, r5, #29
 80002e4:	d004      	beq.n	80002f0 <__aeabi_fdiv+0xa0>
 80002e6:	220f      	movs	r2, #15
 80002e8:	402a      	ands	r2, r5
 80002ea:	2a04      	cmp	r2, #4
 80002ec:	d000      	beq.n	80002f0 <__aeabi_fdiv+0xa0>
 80002ee:	3504      	adds	r5, #4
 80002f0:	012a      	lsls	r2, r5, #4
 80002f2:	d503      	bpl.n	80002fc <__aeabi_fdiv+0xac>
 80002f4:	4b61      	ldr	r3, [pc, #388]	; (800047c <__aeabi_fdiv+0x22c>)
 80002f6:	401d      	ands	r5, r3
 80002f8:	003b      	movs	r3, r7
 80002fa:	3380      	adds	r3, #128	; 0x80
 80002fc:	2bfe      	cmp	r3, #254	; 0xfe
 80002fe:	dd00      	ble.n	8000302 <__aeabi_fdiv+0xb2>
 8000300:	e074      	b.n	80003ec <__aeabi_fdiv+0x19c>
 8000302:	01aa      	lsls	r2, r5, #6
 8000304:	0a52      	lsrs	r2, r2, #9
 8000306:	b2d8      	uxtb	r0, r3
 8000308:	e002      	b.n	8000310 <__aeabi_fdiv+0xc0>
 800030a:	000e      	movs	r6, r1
 800030c:	2000      	movs	r0, #0
 800030e:	2200      	movs	r2, #0
 8000310:	05c0      	lsls	r0, r0, #23
 8000312:	07f6      	lsls	r6, r6, #31
 8000314:	4310      	orrs	r0, r2
 8000316:	4330      	orrs	r0, r6
 8000318:	bce0      	pop	{r5, r6, r7}
 800031a:	46ba      	mov	sl, r7
 800031c:	46b1      	mov	r9, r6
 800031e:	46a8      	mov	r8, r5
 8000320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000322:	4643      	mov	r3, r8
 8000324:	2b00      	cmp	r3, #0
 8000326:	d13f      	bne.n	80003a8 <__aeabi_fdiv+0x158>
 8000328:	2202      	movs	r2, #2
 800032a:	3fff      	subs	r7, #255	; 0xff
 800032c:	e003      	b.n	8000336 <__aeabi_fdiv+0xe6>
 800032e:	4643      	mov	r3, r8
 8000330:	2b00      	cmp	r3, #0
 8000332:	d12d      	bne.n	8000390 <__aeabi_fdiv+0x140>
 8000334:	2201      	movs	r2, #1
 8000336:	0031      	movs	r1, r6
 8000338:	464b      	mov	r3, r9
 800033a:	4061      	eors	r1, r4
 800033c:	b2c9      	uxtb	r1, r1
 800033e:	4313      	orrs	r3, r2
 8000340:	2b0f      	cmp	r3, #15
 8000342:	d838      	bhi.n	80003b6 <__aeabi_fdiv+0x166>
 8000344:	484e      	ldr	r0, [pc, #312]	; (8000480 <__aeabi_fdiv+0x230>)
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	58c3      	ldr	r3, [r0, r3]
 800034a:	469f      	mov	pc, r3
 800034c:	2d00      	cmp	r5, #0
 800034e:	d113      	bne.n	8000378 <__aeabi_fdiv+0x128>
 8000350:	2304      	movs	r3, #4
 8000352:	4699      	mov	r9, r3
 8000354:	3b03      	subs	r3, #3
 8000356:	2700      	movs	r7, #0
 8000358:	469a      	mov	sl, r3
 800035a:	e792      	b.n	8000282 <__aeabi_fdiv+0x32>
 800035c:	2d00      	cmp	r5, #0
 800035e:	d105      	bne.n	800036c <__aeabi_fdiv+0x11c>
 8000360:	2308      	movs	r3, #8
 8000362:	4699      	mov	r9, r3
 8000364:	3b06      	subs	r3, #6
 8000366:	27ff      	movs	r7, #255	; 0xff
 8000368:	469a      	mov	sl, r3
 800036a:	e78a      	b.n	8000282 <__aeabi_fdiv+0x32>
 800036c:	230c      	movs	r3, #12
 800036e:	4699      	mov	r9, r3
 8000370:	3b09      	subs	r3, #9
 8000372:	27ff      	movs	r7, #255	; 0xff
 8000374:	469a      	mov	sl, r3
 8000376:	e784      	b.n	8000282 <__aeabi_fdiv+0x32>
 8000378:	0028      	movs	r0, r5
 800037a:	f000 fc13 	bl	8000ba4 <__clzsi2>
 800037e:	2776      	movs	r7, #118	; 0x76
 8000380:	1f43      	subs	r3, r0, #5
 8000382:	409d      	lsls	r5, r3
 8000384:	2300      	movs	r3, #0
 8000386:	427f      	negs	r7, r7
 8000388:	4699      	mov	r9, r3
 800038a:	469a      	mov	sl, r3
 800038c:	1a3f      	subs	r7, r7, r0
 800038e:	e778      	b.n	8000282 <__aeabi_fdiv+0x32>
 8000390:	4640      	mov	r0, r8
 8000392:	f000 fc07 	bl	8000ba4 <__clzsi2>
 8000396:	4642      	mov	r2, r8
 8000398:	1f43      	subs	r3, r0, #5
 800039a:	409a      	lsls	r2, r3
 800039c:	2376      	movs	r3, #118	; 0x76
 800039e:	425b      	negs	r3, r3
 80003a0:	4690      	mov	r8, r2
 80003a2:	1a1b      	subs	r3, r3, r0
 80003a4:	2200      	movs	r2, #0
 80003a6:	e77e      	b.n	80002a6 <__aeabi_fdiv+0x56>
 80003a8:	2303      	movs	r3, #3
 80003aa:	464a      	mov	r2, r9
 80003ac:	431a      	orrs	r2, r3
 80003ae:	4691      	mov	r9, r2
 80003b0:	33fc      	adds	r3, #252	; 0xfc
 80003b2:	2203      	movs	r2, #3
 80003b4:	e777      	b.n	80002a6 <__aeabi_fdiv+0x56>
 80003b6:	000e      	movs	r6, r1
 80003b8:	20ff      	movs	r0, #255	; 0xff
 80003ba:	2200      	movs	r2, #0
 80003bc:	e7a8      	b.n	8000310 <__aeabi_fdiv+0xc0>
 80003be:	2201      	movs	r2, #1
 80003c0:	1ad3      	subs	r3, r2, r3
 80003c2:	2b1b      	cmp	r3, #27
 80003c4:	dca2      	bgt.n	800030c <__aeabi_fdiv+0xbc>
 80003c6:	379e      	adds	r7, #158	; 0x9e
 80003c8:	002a      	movs	r2, r5
 80003ca:	40bd      	lsls	r5, r7
 80003cc:	40da      	lsrs	r2, r3
 80003ce:	1e6b      	subs	r3, r5, #1
 80003d0:	419d      	sbcs	r5, r3
 80003d2:	4315      	orrs	r5, r2
 80003d4:	076a      	lsls	r2, r5, #29
 80003d6:	d004      	beq.n	80003e2 <__aeabi_fdiv+0x192>
 80003d8:	220f      	movs	r2, #15
 80003da:	402a      	ands	r2, r5
 80003dc:	2a04      	cmp	r2, #4
 80003de:	d000      	beq.n	80003e2 <__aeabi_fdiv+0x192>
 80003e0:	3504      	adds	r5, #4
 80003e2:	016a      	lsls	r2, r5, #5
 80003e4:	d544      	bpl.n	8000470 <__aeabi_fdiv+0x220>
 80003e6:	2001      	movs	r0, #1
 80003e8:	2200      	movs	r2, #0
 80003ea:	e791      	b.n	8000310 <__aeabi_fdiv+0xc0>
 80003ec:	20ff      	movs	r0, #255	; 0xff
 80003ee:	2200      	movs	r2, #0
 80003f0:	e78e      	b.n	8000310 <__aeabi_fdiv+0xc0>
 80003f2:	2280      	movs	r2, #128	; 0x80
 80003f4:	2600      	movs	r6, #0
 80003f6:	20ff      	movs	r0, #255	; 0xff
 80003f8:	03d2      	lsls	r2, r2, #15
 80003fa:	e789      	b.n	8000310 <__aeabi_fdiv+0xc0>
 80003fc:	2300      	movs	r3, #0
 80003fe:	4698      	mov	r8, r3
 8000400:	2280      	movs	r2, #128	; 0x80
 8000402:	03d2      	lsls	r2, r2, #15
 8000404:	4215      	tst	r5, r2
 8000406:	d008      	beq.n	800041a <__aeabi_fdiv+0x1ca>
 8000408:	4643      	mov	r3, r8
 800040a:	4213      	tst	r3, r2
 800040c:	d105      	bne.n	800041a <__aeabi_fdiv+0x1ca>
 800040e:	431a      	orrs	r2, r3
 8000410:	0252      	lsls	r2, r2, #9
 8000412:	0026      	movs	r6, r4
 8000414:	20ff      	movs	r0, #255	; 0xff
 8000416:	0a52      	lsrs	r2, r2, #9
 8000418:	e77a      	b.n	8000310 <__aeabi_fdiv+0xc0>
 800041a:	2280      	movs	r2, #128	; 0x80
 800041c:	03d2      	lsls	r2, r2, #15
 800041e:	432a      	orrs	r2, r5
 8000420:	0252      	lsls	r2, r2, #9
 8000422:	20ff      	movs	r0, #255	; 0xff
 8000424:	0a52      	lsrs	r2, r2, #9
 8000426:	e773      	b.n	8000310 <__aeabi_fdiv+0xc0>
 8000428:	4642      	mov	r2, r8
 800042a:	016b      	lsls	r3, r5, #5
 800042c:	0155      	lsls	r5, r2, #5
 800042e:	42ab      	cmp	r3, r5
 8000430:	d21a      	bcs.n	8000468 <__aeabi_fdiv+0x218>
 8000432:	201b      	movs	r0, #27
 8000434:	2200      	movs	r2, #0
 8000436:	3f01      	subs	r7, #1
 8000438:	2601      	movs	r6, #1
 800043a:	001c      	movs	r4, r3
 800043c:	0052      	lsls	r2, r2, #1
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	2c00      	cmp	r4, #0
 8000442:	db01      	blt.n	8000448 <__aeabi_fdiv+0x1f8>
 8000444:	429d      	cmp	r5, r3
 8000446:	d801      	bhi.n	800044c <__aeabi_fdiv+0x1fc>
 8000448:	1b5b      	subs	r3, r3, r5
 800044a:	4332      	orrs	r2, r6
 800044c:	3801      	subs	r0, #1
 800044e:	2800      	cmp	r0, #0
 8000450:	d1f3      	bne.n	800043a <__aeabi_fdiv+0x1ea>
 8000452:	1e58      	subs	r0, r3, #1
 8000454:	4183      	sbcs	r3, r0
 8000456:	4313      	orrs	r3, r2
 8000458:	001d      	movs	r5, r3
 800045a:	003b      	movs	r3, r7
 800045c:	337f      	adds	r3, #127	; 0x7f
 800045e:	000e      	movs	r6, r1
 8000460:	2b00      	cmp	r3, #0
 8000462:	dd00      	ble.n	8000466 <__aeabi_fdiv+0x216>
 8000464:	e73d      	b.n	80002e2 <__aeabi_fdiv+0x92>
 8000466:	e7aa      	b.n	80003be <__aeabi_fdiv+0x16e>
 8000468:	201a      	movs	r0, #26
 800046a:	2201      	movs	r2, #1
 800046c:	1b5b      	subs	r3, r3, r5
 800046e:	e7e3      	b.n	8000438 <__aeabi_fdiv+0x1e8>
 8000470:	01aa      	lsls	r2, r5, #6
 8000472:	2000      	movs	r0, #0
 8000474:	0a52      	lsrs	r2, r2, #9
 8000476:	e74b      	b.n	8000310 <__aeabi_fdiv+0xc0>
 8000478:	08002240 	.word	0x08002240
 800047c:	f7ffffff 	.word	0xf7ffffff
 8000480:	08002280 	.word	0x08002280

08000484 <__aeabi_fmul>:
 8000484:	0243      	lsls	r3, r0, #9
 8000486:	0a5b      	lsrs	r3, r3, #9
 8000488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800048a:	464f      	mov	r7, r9
 800048c:	4646      	mov	r6, r8
 800048e:	4699      	mov	r9, r3
 8000490:	46d6      	mov	lr, sl
 8000492:	0fc3      	lsrs	r3, r0, #31
 8000494:	0045      	lsls	r5, r0, #1
 8000496:	4698      	mov	r8, r3
 8000498:	b5c0      	push	{r6, r7, lr}
 800049a:	464b      	mov	r3, r9
 800049c:	1c0f      	adds	r7, r1, #0
 800049e:	0e2d      	lsrs	r5, r5, #24
 80004a0:	d100      	bne.n	80004a4 <__aeabi_fmul+0x20>
 80004a2:	e0cb      	b.n	800063c <__aeabi_fmul+0x1b8>
 80004a4:	2dff      	cmp	r5, #255	; 0xff
 80004a6:	d100      	bne.n	80004aa <__aeabi_fmul+0x26>
 80004a8:	e0cf      	b.n	800064a <__aeabi_fmul+0x1c6>
 80004aa:	2280      	movs	r2, #128	; 0x80
 80004ac:	00db      	lsls	r3, r3, #3
 80004ae:	04d2      	lsls	r2, r2, #19
 80004b0:	431a      	orrs	r2, r3
 80004b2:	2300      	movs	r3, #0
 80004b4:	4691      	mov	r9, r2
 80004b6:	2600      	movs	r6, #0
 80004b8:	469a      	mov	sl, r3
 80004ba:	3d7f      	subs	r5, #127	; 0x7f
 80004bc:	027c      	lsls	r4, r7, #9
 80004be:	007b      	lsls	r3, r7, #1
 80004c0:	0a64      	lsrs	r4, r4, #9
 80004c2:	0e1b      	lsrs	r3, r3, #24
 80004c4:	0fff      	lsrs	r7, r7, #31
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d100      	bne.n	80004cc <__aeabi_fmul+0x48>
 80004ca:	e0a9      	b.n	8000620 <__aeabi_fmul+0x19c>
 80004cc:	2bff      	cmp	r3, #255	; 0xff
 80004ce:	d011      	beq.n	80004f4 <__aeabi_fmul+0x70>
 80004d0:	2280      	movs	r2, #128	; 0x80
 80004d2:	00e4      	lsls	r4, r4, #3
 80004d4:	04d2      	lsls	r2, r2, #19
 80004d6:	4314      	orrs	r4, r2
 80004d8:	4642      	mov	r2, r8
 80004da:	3b7f      	subs	r3, #127	; 0x7f
 80004dc:	195b      	adds	r3, r3, r5
 80004de:	407a      	eors	r2, r7
 80004e0:	2000      	movs	r0, #0
 80004e2:	b2d2      	uxtb	r2, r2
 80004e4:	1c5d      	adds	r5, r3, #1
 80004e6:	2e0a      	cmp	r6, #10
 80004e8:	dd13      	ble.n	8000512 <__aeabi_fmul+0x8e>
 80004ea:	003a      	movs	r2, r7
 80004ec:	2e0b      	cmp	r6, #11
 80004ee:	d047      	beq.n	8000580 <__aeabi_fmul+0xfc>
 80004f0:	4647      	mov	r7, r8
 80004f2:	e03f      	b.n	8000574 <__aeabi_fmul+0xf0>
 80004f4:	002b      	movs	r3, r5
 80004f6:	33ff      	adds	r3, #255	; 0xff
 80004f8:	2c00      	cmp	r4, #0
 80004fa:	d11e      	bne.n	800053a <__aeabi_fmul+0xb6>
 80004fc:	2202      	movs	r2, #2
 80004fe:	4316      	orrs	r6, r2
 8000500:	4642      	mov	r2, r8
 8000502:	3501      	adds	r5, #1
 8000504:	407a      	eors	r2, r7
 8000506:	b2d2      	uxtb	r2, r2
 8000508:	35ff      	adds	r5, #255	; 0xff
 800050a:	2e0a      	cmp	r6, #10
 800050c:	dd00      	ble.n	8000510 <__aeabi_fmul+0x8c>
 800050e:	e0e4      	b.n	80006da <__aeabi_fmul+0x256>
 8000510:	2002      	movs	r0, #2
 8000512:	2e02      	cmp	r6, #2
 8000514:	dc1c      	bgt.n	8000550 <__aeabi_fmul+0xcc>
 8000516:	3e01      	subs	r6, #1
 8000518:	2e01      	cmp	r6, #1
 800051a:	d842      	bhi.n	80005a2 <__aeabi_fmul+0x11e>
 800051c:	2802      	cmp	r0, #2
 800051e:	d03d      	beq.n	800059c <__aeabi_fmul+0x118>
 8000520:	2801      	cmp	r0, #1
 8000522:	d166      	bne.n	80005f2 <__aeabi_fmul+0x16e>
 8000524:	2000      	movs	r0, #0
 8000526:	2100      	movs	r1, #0
 8000528:	05c0      	lsls	r0, r0, #23
 800052a:	4308      	orrs	r0, r1
 800052c:	07d2      	lsls	r2, r2, #31
 800052e:	4310      	orrs	r0, r2
 8000530:	bce0      	pop	{r5, r6, r7}
 8000532:	46ba      	mov	sl, r7
 8000534:	46b1      	mov	r9, r6
 8000536:	46a8      	mov	r8, r5
 8000538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053a:	2203      	movs	r2, #3
 800053c:	4316      	orrs	r6, r2
 800053e:	4642      	mov	r2, r8
 8000540:	3501      	adds	r5, #1
 8000542:	407a      	eors	r2, r7
 8000544:	b2d2      	uxtb	r2, r2
 8000546:	35ff      	adds	r5, #255	; 0xff
 8000548:	2e0a      	cmp	r6, #10
 800054a:	dd00      	ble.n	800054e <__aeabi_fmul+0xca>
 800054c:	e0e4      	b.n	8000718 <__aeabi_fmul+0x294>
 800054e:	2003      	movs	r0, #3
 8000550:	2101      	movs	r1, #1
 8000552:	40b1      	lsls	r1, r6
 8000554:	26a6      	movs	r6, #166	; 0xa6
 8000556:	00f6      	lsls	r6, r6, #3
 8000558:	4231      	tst	r1, r6
 800055a:	d10a      	bne.n	8000572 <__aeabi_fmul+0xee>
 800055c:	2690      	movs	r6, #144	; 0x90
 800055e:	00b6      	lsls	r6, r6, #2
 8000560:	4231      	tst	r1, r6
 8000562:	d116      	bne.n	8000592 <__aeabi_fmul+0x10e>
 8000564:	3eb9      	subs	r6, #185	; 0xb9
 8000566:	3eff      	subs	r6, #255	; 0xff
 8000568:	420e      	tst	r6, r1
 800056a:	d01a      	beq.n	80005a2 <__aeabi_fmul+0x11e>
 800056c:	46a1      	mov	r9, r4
 800056e:	4682      	mov	sl, r0
 8000570:	e000      	b.n	8000574 <__aeabi_fmul+0xf0>
 8000572:	0017      	movs	r7, r2
 8000574:	4653      	mov	r3, sl
 8000576:	003a      	movs	r2, r7
 8000578:	2b02      	cmp	r3, #2
 800057a:	d00f      	beq.n	800059c <__aeabi_fmul+0x118>
 800057c:	464c      	mov	r4, r9
 800057e:	4650      	mov	r0, sl
 8000580:	2803      	cmp	r0, #3
 8000582:	d1cd      	bne.n	8000520 <__aeabi_fmul+0x9c>
 8000584:	2180      	movs	r1, #128	; 0x80
 8000586:	03c9      	lsls	r1, r1, #15
 8000588:	4321      	orrs	r1, r4
 800058a:	0249      	lsls	r1, r1, #9
 800058c:	20ff      	movs	r0, #255	; 0xff
 800058e:	0a49      	lsrs	r1, r1, #9
 8000590:	e7ca      	b.n	8000528 <__aeabi_fmul+0xa4>
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	2200      	movs	r2, #0
 8000596:	20ff      	movs	r0, #255	; 0xff
 8000598:	03c9      	lsls	r1, r1, #15
 800059a:	e7c5      	b.n	8000528 <__aeabi_fmul+0xa4>
 800059c:	20ff      	movs	r0, #255	; 0xff
 800059e:	2100      	movs	r1, #0
 80005a0:	e7c2      	b.n	8000528 <__aeabi_fmul+0xa4>
 80005a2:	0c20      	lsrs	r0, r4, #16
 80005a4:	4649      	mov	r1, r9
 80005a6:	0424      	lsls	r4, r4, #16
 80005a8:	0c24      	lsrs	r4, r4, #16
 80005aa:	0027      	movs	r7, r4
 80005ac:	0c0e      	lsrs	r6, r1, #16
 80005ae:	0409      	lsls	r1, r1, #16
 80005b0:	0c09      	lsrs	r1, r1, #16
 80005b2:	4374      	muls	r4, r6
 80005b4:	434f      	muls	r7, r1
 80005b6:	4346      	muls	r6, r0
 80005b8:	4348      	muls	r0, r1
 80005ba:	0c39      	lsrs	r1, r7, #16
 80005bc:	1900      	adds	r0, r0, r4
 80005be:	1809      	adds	r1, r1, r0
 80005c0:	428c      	cmp	r4, r1
 80005c2:	d903      	bls.n	80005cc <__aeabi_fmul+0x148>
 80005c4:	2080      	movs	r0, #128	; 0x80
 80005c6:	0240      	lsls	r0, r0, #9
 80005c8:	4684      	mov	ip, r0
 80005ca:	4466      	add	r6, ip
 80005cc:	043f      	lsls	r7, r7, #16
 80005ce:	0408      	lsls	r0, r1, #16
 80005d0:	0c3f      	lsrs	r7, r7, #16
 80005d2:	19c0      	adds	r0, r0, r7
 80005d4:	0184      	lsls	r4, r0, #6
 80005d6:	1e67      	subs	r7, r4, #1
 80005d8:	41bc      	sbcs	r4, r7
 80005da:	0c09      	lsrs	r1, r1, #16
 80005dc:	0e80      	lsrs	r0, r0, #26
 80005de:	1989      	adds	r1, r1, r6
 80005e0:	4304      	orrs	r4, r0
 80005e2:	0189      	lsls	r1, r1, #6
 80005e4:	430c      	orrs	r4, r1
 80005e6:	0109      	lsls	r1, r1, #4
 80005e8:	d571      	bpl.n	80006ce <__aeabi_fmul+0x24a>
 80005ea:	2301      	movs	r3, #1
 80005ec:	0861      	lsrs	r1, r4, #1
 80005ee:	401c      	ands	r4, r3
 80005f0:	430c      	orrs	r4, r1
 80005f2:	002b      	movs	r3, r5
 80005f4:	337f      	adds	r3, #127	; 0x7f
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	dd51      	ble.n	800069e <__aeabi_fmul+0x21a>
 80005fa:	0761      	lsls	r1, r4, #29
 80005fc:	d004      	beq.n	8000608 <__aeabi_fmul+0x184>
 80005fe:	210f      	movs	r1, #15
 8000600:	4021      	ands	r1, r4
 8000602:	2904      	cmp	r1, #4
 8000604:	d000      	beq.n	8000608 <__aeabi_fmul+0x184>
 8000606:	3404      	adds	r4, #4
 8000608:	0121      	lsls	r1, r4, #4
 800060a:	d503      	bpl.n	8000614 <__aeabi_fmul+0x190>
 800060c:	4b43      	ldr	r3, [pc, #268]	; (800071c <__aeabi_fmul+0x298>)
 800060e:	401c      	ands	r4, r3
 8000610:	002b      	movs	r3, r5
 8000612:	3380      	adds	r3, #128	; 0x80
 8000614:	2bfe      	cmp	r3, #254	; 0xfe
 8000616:	dcc1      	bgt.n	800059c <__aeabi_fmul+0x118>
 8000618:	01a1      	lsls	r1, r4, #6
 800061a:	0a49      	lsrs	r1, r1, #9
 800061c:	b2d8      	uxtb	r0, r3
 800061e:	e783      	b.n	8000528 <__aeabi_fmul+0xa4>
 8000620:	2c00      	cmp	r4, #0
 8000622:	d12c      	bne.n	800067e <__aeabi_fmul+0x1fa>
 8000624:	2301      	movs	r3, #1
 8000626:	4642      	mov	r2, r8
 8000628:	431e      	orrs	r6, r3
 800062a:	002b      	movs	r3, r5
 800062c:	407a      	eors	r2, r7
 800062e:	2001      	movs	r0, #1
 8000630:	b2d2      	uxtb	r2, r2
 8000632:	1c5d      	adds	r5, r3, #1
 8000634:	2e0a      	cmp	r6, #10
 8000636:	dd00      	ble.n	800063a <__aeabi_fmul+0x1b6>
 8000638:	e757      	b.n	80004ea <__aeabi_fmul+0x66>
 800063a:	e76a      	b.n	8000512 <__aeabi_fmul+0x8e>
 800063c:	2b00      	cmp	r3, #0
 800063e:	d110      	bne.n	8000662 <__aeabi_fmul+0x1de>
 8000640:	2301      	movs	r3, #1
 8000642:	2604      	movs	r6, #4
 8000644:	2500      	movs	r5, #0
 8000646:	469a      	mov	sl, r3
 8000648:	e738      	b.n	80004bc <__aeabi_fmul+0x38>
 800064a:	2b00      	cmp	r3, #0
 800064c:	d104      	bne.n	8000658 <__aeabi_fmul+0x1d4>
 800064e:	2302      	movs	r3, #2
 8000650:	2608      	movs	r6, #8
 8000652:	25ff      	movs	r5, #255	; 0xff
 8000654:	469a      	mov	sl, r3
 8000656:	e731      	b.n	80004bc <__aeabi_fmul+0x38>
 8000658:	2303      	movs	r3, #3
 800065a:	260c      	movs	r6, #12
 800065c:	25ff      	movs	r5, #255	; 0xff
 800065e:	469a      	mov	sl, r3
 8000660:	e72c      	b.n	80004bc <__aeabi_fmul+0x38>
 8000662:	4648      	mov	r0, r9
 8000664:	f000 fa9e 	bl	8000ba4 <__clzsi2>
 8000668:	464a      	mov	r2, r9
 800066a:	1f43      	subs	r3, r0, #5
 800066c:	2576      	movs	r5, #118	; 0x76
 800066e:	409a      	lsls	r2, r3
 8000670:	2300      	movs	r3, #0
 8000672:	426d      	negs	r5, r5
 8000674:	4691      	mov	r9, r2
 8000676:	2600      	movs	r6, #0
 8000678:	469a      	mov	sl, r3
 800067a:	1a2d      	subs	r5, r5, r0
 800067c:	e71e      	b.n	80004bc <__aeabi_fmul+0x38>
 800067e:	0020      	movs	r0, r4
 8000680:	f000 fa90 	bl	8000ba4 <__clzsi2>
 8000684:	4642      	mov	r2, r8
 8000686:	1f43      	subs	r3, r0, #5
 8000688:	409c      	lsls	r4, r3
 800068a:	1a2b      	subs	r3, r5, r0
 800068c:	3b76      	subs	r3, #118	; 0x76
 800068e:	407a      	eors	r2, r7
 8000690:	2000      	movs	r0, #0
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	1c5d      	adds	r5, r3, #1
 8000696:	2e0a      	cmp	r6, #10
 8000698:	dd00      	ble.n	800069c <__aeabi_fmul+0x218>
 800069a:	e726      	b.n	80004ea <__aeabi_fmul+0x66>
 800069c:	e739      	b.n	8000512 <__aeabi_fmul+0x8e>
 800069e:	2101      	movs	r1, #1
 80006a0:	1acb      	subs	r3, r1, r3
 80006a2:	2b1b      	cmp	r3, #27
 80006a4:	dd00      	ble.n	80006a8 <__aeabi_fmul+0x224>
 80006a6:	e73d      	b.n	8000524 <__aeabi_fmul+0xa0>
 80006a8:	359e      	adds	r5, #158	; 0x9e
 80006aa:	0021      	movs	r1, r4
 80006ac:	40ac      	lsls	r4, r5
 80006ae:	40d9      	lsrs	r1, r3
 80006b0:	1e63      	subs	r3, r4, #1
 80006b2:	419c      	sbcs	r4, r3
 80006b4:	4321      	orrs	r1, r4
 80006b6:	074b      	lsls	r3, r1, #29
 80006b8:	d004      	beq.n	80006c4 <__aeabi_fmul+0x240>
 80006ba:	230f      	movs	r3, #15
 80006bc:	400b      	ands	r3, r1
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d000      	beq.n	80006c4 <__aeabi_fmul+0x240>
 80006c2:	3104      	adds	r1, #4
 80006c4:	014b      	lsls	r3, r1, #5
 80006c6:	d504      	bpl.n	80006d2 <__aeabi_fmul+0x24e>
 80006c8:	2001      	movs	r0, #1
 80006ca:	2100      	movs	r1, #0
 80006cc:	e72c      	b.n	8000528 <__aeabi_fmul+0xa4>
 80006ce:	001d      	movs	r5, r3
 80006d0:	e78f      	b.n	80005f2 <__aeabi_fmul+0x16e>
 80006d2:	0189      	lsls	r1, r1, #6
 80006d4:	2000      	movs	r0, #0
 80006d6:	0a49      	lsrs	r1, r1, #9
 80006d8:	e726      	b.n	8000528 <__aeabi_fmul+0xa4>
 80006da:	2302      	movs	r3, #2
 80006dc:	2e0f      	cmp	r6, #15
 80006de:	d10c      	bne.n	80006fa <__aeabi_fmul+0x276>
 80006e0:	2180      	movs	r1, #128	; 0x80
 80006e2:	464b      	mov	r3, r9
 80006e4:	03c9      	lsls	r1, r1, #15
 80006e6:	420b      	tst	r3, r1
 80006e8:	d00d      	beq.n	8000706 <__aeabi_fmul+0x282>
 80006ea:	420c      	tst	r4, r1
 80006ec:	d10b      	bne.n	8000706 <__aeabi_fmul+0x282>
 80006ee:	4321      	orrs	r1, r4
 80006f0:	0249      	lsls	r1, r1, #9
 80006f2:	003a      	movs	r2, r7
 80006f4:	20ff      	movs	r0, #255	; 0xff
 80006f6:	0a49      	lsrs	r1, r1, #9
 80006f8:	e716      	b.n	8000528 <__aeabi_fmul+0xa4>
 80006fa:	2e0b      	cmp	r6, #11
 80006fc:	d000      	beq.n	8000700 <__aeabi_fmul+0x27c>
 80006fe:	e6f7      	b.n	80004f0 <__aeabi_fmul+0x6c>
 8000700:	46a1      	mov	r9, r4
 8000702:	469a      	mov	sl, r3
 8000704:	e736      	b.n	8000574 <__aeabi_fmul+0xf0>
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	464b      	mov	r3, r9
 800070a:	03c9      	lsls	r1, r1, #15
 800070c:	4319      	orrs	r1, r3
 800070e:	0249      	lsls	r1, r1, #9
 8000710:	4642      	mov	r2, r8
 8000712:	20ff      	movs	r0, #255	; 0xff
 8000714:	0a49      	lsrs	r1, r1, #9
 8000716:	e707      	b.n	8000528 <__aeabi_fmul+0xa4>
 8000718:	2303      	movs	r3, #3
 800071a:	e7df      	b.n	80006dc <__aeabi_fmul+0x258>
 800071c:	f7ffffff 	.word	0xf7ffffff

08000720 <__aeabi_fsub>:
 8000720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000722:	46c6      	mov	lr, r8
 8000724:	0243      	lsls	r3, r0, #9
 8000726:	0a5b      	lsrs	r3, r3, #9
 8000728:	0045      	lsls	r5, r0, #1
 800072a:	00da      	lsls	r2, r3, #3
 800072c:	0fc4      	lsrs	r4, r0, #31
 800072e:	0248      	lsls	r0, r1, #9
 8000730:	004f      	lsls	r7, r1, #1
 8000732:	4694      	mov	ip, r2
 8000734:	0a42      	lsrs	r2, r0, #9
 8000736:	001e      	movs	r6, r3
 8000738:	4690      	mov	r8, r2
 800073a:	b500      	push	{lr}
 800073c:	0e2d      	lsrs	r5, r5, #24
 800073e:	0e3f      	lsrs	r7, r7, #24
 8000740:	0fc9      	lsrs	r1, r1, #31
 8000742:	0980      	lsrs	r0, r0, #6
 8000744:	2fff      	cmp	r7, #255	; 0xff
 8000746:	d059      	beq.n	80007fc <__aeabi_fsub+0xdc>
 8000748:	2201      	movs	r2, #1
 800074a:	4051      	eors	r1, r2
 800074c:	428c      	cmp	r4, r1
 800074e:	d039      	beq.n	80007c4 <__aeabi_fsub+0xa4>
 8000750:	1bea      	subs	r2, r5, r7
 8000752:	2a00      	cmp	r2, #0
 8000754:	dd58      	ble.n	8000808 <__aeabi_fsub+0xe8>
 8000756:	2f00      	cmp	r7, #0
 8000758:	d068      	beq.n	800082c <__aeabi_fsub+0x10c>
 800075a:	2dff      	cmp	r5, #255	; 0xff
 800075c:	d100      	bne.n	8000760 <__aeabi_fsub+0x40>
 800075e:	e0d1      	b.n	8000904 <__aeabi_fsub+0x1e4>
 8000760:	2380      	movs	r3, #128	; 0x80
 8000762:	04db      	lsls	r3, r3, #19
 8000764:	4318      	orrs	r0, r3
 8000766:	2a1b      	cmp	r2, #27
 8000768:	dc00      	bgt.n	800076c <__aeabi_fsub+0x4c>
 800076a:	e0e3      	b.n	8000934 <__aeabi_fsub+0x214>
 800076c:	2301      	movs	r3, #1
 800076e:	4662      	mov	r2, ip
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	015a      	lsls	r2, r3, #5
 8000774:	d400      	bmi.n	8000778 <__aeabi_fsub+0x58>
 8000776:	e0ac      	b.n	80008d2 <__aeabi_fsub+0x1b2>
 8000778:	019b      	lsls	r3, r3, #6
 800077a:	099e      	lsrs	r6, r3, #6
 800077c:	0030      	movs	r0, r6
 800077e:	f000 fa11 	bl	8000ba4 <__clzsi2>
 8000782:	0033      	movs	r3, r6
 8000784:	3805      	subs	r0, #5
 8000786:	4083      	lsls	r3, r0
 8000788:	4285      	cmp	r5, r0
 800078a:	dc00      	bgt.n	800078e <__aeabi_fsub+0x6e>
 800078c:	e0c6      	b.n	800091c <__aeabi_fsub+0x1fc>
 800078e:	4ab2      	ldr	r2, [pc, #712]	; (8000a58 <__aeabi_fsub+0x338>)
 8000790:	1a2d      	subs	r5, r5, r0
 8000792:	4013      	ands	r3, r2
 8000794:	075a      	lsls	r2, r3, #29
 8000796:	d004      	beq.n	80007a2 <__aeabi_fsub+0x82>
 8000798:	220f      	movs	r2, #15
 800079a:	401a      	ands	r2, r3
 800079c:	2a04      	cmp	r2, #4
 800079e:	d000      	beq.n	80007a2 <__aeabi_fsub+0x82>
 80007a0:	3304      	adds	r3, #4
 80007a2:	015a      	lsls	r2, r3, #5
 80007a4:	d400      	bmi.n	80007a8 <__aeabi_fsub+0x88>
 80007a6:	e097      	b.n	80008d8 <__aeabi_fsub+0x1b8>
 80007a8:	1c6a      	adds	r2, r5, #1
 80007aa:	2dfe      	cmp	r5, #254	; 0xfe
 80007ac:	d100      	bne.n	80007b0 <__aeabi_fsub+0x90>
 80007ae:	e084      	b.n	80008ba <__aeabi_fsub+0x19a>
 80007b0:	019b      	lsls	r3, r3, #6
 80007b2:	0a5e      	lsrs	r6, r3, #9
 80007b4:	b2d2      	uxtb	r2, r2
 80007b6:	05d0      	lsls	r0, r2, #23
 80007b8:	4330      	orrs	r0, r6
 80007ba:	07e4      	lsls	r4, r4, #31
 80007bc:	4320      	orrs	r0, r4
 80007be:	bc80      	pop	{r7}
 80007c0:	46b8      	mov	r8, r7
 80007c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c4:	1bea      	subs	r2, r5, r7
 80007c6:	2a00      	cmp	r2, #0
 80007c8:	dd41      	ble.n	800084e <__aeabi_fsub+0x12e>
 80007ca:	2f00      	cmp	r7, #0
 80007cc:	d06b      	beq.n	80008a6 <__aeabi_fsub+0x186>
 80007ce:	2dff      	cmp	r5, #255	; 0xff
 80007d0:	d100      	bne.n	80007d4 <__aeabi_fsub+0xb4>
 80007d2:	e097      	b.n	8000904 <__aeabi_fsub+0x1e4>
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	04db      	lsls	r3, r3, #19
 80007d8:	4318      	orrs	r0, r3
 80007da:	2a1b      	cmp	r2, #27
 80007dc:	dc00      	bgt.n	80007e0 <__aeabi_fsub+0xc0>
 80007de:	e0cc      	b.n	800097a <__aeabi_fsub+0x25a>
 80007e0:	2301      	movs	r3, #1
 80007e2:	4463      	add	r3, ip
 80007e4:	015a      	lsls	r2, r3, #5
 80007e6:	d574      	bpl.n	80008d2 <__aeabi_fsub+0x1b2>
 80007e8:	3501      	adds	r5, #1
 80007ea:	2dff      	cmp	r5, #255	; 0xff
 80007ec:	d065      	beq.n	80008ba <__aeabi_fsub+0x19a>
 80007ee:	2201      	movs	r2, #1
 80007f0:	499a      	ldr	r1, [pc, #616]	; (8000a5c <__aeabi_fsub+0x33c>)
 80007f2:	401a      	ands	r2, r3
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	400b      	ands	r3, r1
 80007f8:	4313      	orrs	r3, r2
 80007fa:	e7cb      	b.n	8000794 <__aeabi_fsub+0x74>
 80007fc:	2800      	cmp	r0, #0
 80007fe:	d01f      	beq.n	8000840 <__aeabi_fsub+0x120>
 8000800:	428c      	cmp	r4, r1
 8000802:	d022      	beq.n	800084a <__aeabi_fsub+0x12a>
 8000804:	002a      	movs	r2, r5
 8000806:	3aff      	subs	r2, #255	; 0xff
 8000808:	2a00      	cmp	r2, #0
 800080a:	d035      	beq.n	8000878 <__aeabi_fsub+0x158>
 800080c:	1b7a      	subs	r2, r7, r5
 800080e:	2d00      	cmp	r5, #0
 8000810:	d000      	beq.n	8000814 <__aeabi_fsub+0xf4>
 8000812:	e099      	b.n	8000948 <__aeabi_fsub+0x228>
 8000814:	4663      	mov	r3, ip
 8000816:	2b00      	cmp	r3, #0
 8000818:	d100      	bne.n	800081c <__aeabi_fsub+0xfc>
 800081a:	e0dd      	b.n	80009d8 <__aeabi_fsub+0x2b8>
 800081c:	1e53      	subs	r3, r2, #1
 800081e:	2a01      	cmp	r2, #1
 8000820:	d100      	bne.n	8000824 <__aeabi_fsub+0x104>
 8000822:	e105      	b.n	8000a30 <__aeabi_fsub+0x310>
 8000824:	2aff      	cmp	r2, #255	; 0xff
 8000826:	d06b      	beq.n	8000900 <__aeabi_fsub+0x1e0>
 8000828:	001a      	movs	r2, r3
 800082a:	e094      	b.n	8000956 <__aeabi_fsub+0x236>
 800082c:	2800      	cmp	r0, #0
 800082e:	d073      	beq.n	8000918 <__aeabi_fsub+0x1f8>
 8000830:	1e51      	subs	r1, r2, #1
 8000832:	2a01      	cmp	r2, #1
 8000834:	d100      	bne.n	8000838 <__aeabi_fsub+0x118>
 8000836:	e0df      	b.n	80009f8 <__aeabi_fsub+0x2d8>
 8000838:	2aff      	cmp	r2, #255	; 0xff
 800083a:	d063      	beq.n	8000904 <__aeabi_fsub+0x1e4>
 800083c:	000a      	movs	r2, r1
 800083e:	e792      	b.n	8000766 <__aeabi_fsub+0x46>
 8000840:	2201      	movs	r2, #1
 8000842:	4051      	eors	r1, r2
 8000844:	42a1      	cmp	r1, r4
 8000846:	d000      	beq.n	800084a <__aeabi_fsub+0x12a>
 8000848:	e782      	b.n	8000750 <__aeabi_fsub+0x30>
 800084a:	002a      	movs	r2, r5
 800084c:	3aff      	subs	r2, #255	; 0xff
 800084e:	2a00      	cmp	r2, #0
 8000850:	d036      	beq.n	80008c0 <__aeabi_fsub+0x1a0>
 8000852:	1b7a      	subs	r2, r7, r5
 8000854:	2d00      	cmp	r5, #0
 8000856:	d100      	bne.n	800085a <__aeabi_fsub+0x13a>
 8000858:	e0aa      	b.n	80009b0 <__aeabi_fsub+0x290>
 800085a:	2fff      	cmp	r7, #255	; 0xff
 800085c:	d100      	bne.n	8000860 <__aeabi_fsub+0x140>
 800085e:	e0da      	b.n	8000a16 <__aeabi_fsub+0x2f6>
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	4661      	mov	r1, ip
 8000864:	04db      	lsls	r3, r3, #19
 8000866:	4319      	orrs	r1, r3
 8000868:	468c      	mov	ip, r1
 800086a:	2a1b      	cmp	r2, #27
 800086c:	dc00      	bgt.n	8000870 <__aeabi_fsub+0x150>
 800086e:	e0d4      	b.n	8000a1a <__aeabi_fsub+0x2fa>
 8000870:	2301      	movs	r3, #1
 8000872:	003d      	movs	r5, r7
 8000874:	181b      	adds	r3, r3, r0
 8000876:	e7b5      	b.n	80007e4 <__aeabi_fsub+0xc4>
 8000878:	27fe      	movs	r7, #254	; 0xfe
 800087a:	1c6a      	adds	r2, r5, #1
 800087c:	4217      	tst	r7, r2
 800087e:	d171      	bne.n	8000964 <__aeabi_fsub+0x244>
 8000880:	2d00      	cmp	r5, #0
 8000882:	d000      	beq.n	8000886 <__aeabi_fsub+0x166>
 8000884:	e09e      	b.n	80009c4 <__aeabi_fsub+0x2a4>
 8000886:	4663      	mov	r3, ip
 8000888:	2b00      	cmp	r3, #0
 800088a:	d100      	bne.n	800088e <__aeabi_fsub+0x16e>
 800088c:	e0d5      	b.n	8000a3a <__aeabi_fsub+0x31a>
 800088e:	2200      	movs	r2, #0
 8000890:	2800      	cmp	r0, #0
 8000892:	d100      	bne.n	8000896 <__aeabi_fsub+0x176>
 8000894:	e78f      	b.n	80007b6 <__aeabi_fsub+0x96>
 8000896:	1a1b      	subs	r3, r3, r0
 8000898:	015e      	lsls	r6, r3, #5
 800089a:	d400      	bmi.n	800089e <__aeabi_fsub+0x17e>
 800089c:	e0d6      	b.n	8000a4c <__aeabi_fsub+0x32c>
 800089e:	4663      	mov	r3, ip
 80008a0:	000c      	movs	r4, r1
 80008a2:	1ac3      	subs	r3, r0, r3
 80008a4:	e776      	b.n	8000794 <__aeabi_fsub+0x74>
 80008a6:	2800      	cmp	r0, #0
 80008a8:	d036      	beq.n	8000918 <__aeabi_fsub+0x1f8>
 80008aa:	1e51      	subs	r1, r2, #1
 80008ac:	2a01      	cmp	r2, #1
 80008ae:	d100      	bne.n	80008b2 <__aeabi_fsub+0x192>
 80008b0:	e09a      	b.n	80009e8 <__aeabi_fsub+0x2c8>
 80008b2:	2aff      	cmp	r2, #255	; 0xff
 80008b4:	d026      	beq.n	8000904 <__aeabi_fsub+0x1e4>
 80008b6:	000a      	movs	r2, r1
 80008b8:	e78f      	b.n	80007da <__aeabi_fsub+0xba>
 80008ba:	22ff      	movs	r2, #255	; 0xff
 80008bc:	2600      	movs	r6, #0
 80008be:	e77a      	b.n	80007b6 <__aeabi_fsub+0x96>
 80008c0:	27fe      	movs	r7, #254	; 0xfe
 80008c2:	1c6a      	adds	r2, r5, #1
 80008c4:	4217      	tst	r7, r2
 80008c6:	d062      	beq.n	800098e <__aeabi_fsub+0x26e>
 80008c8:	2aff      	cmp	r2, #255	; 0xff
 80008ca:	d0f6      	beq.n	80008ba <__aeabi_fsub+0x19a>
 80008cc:	0015      	movs	r5, r2
 80008ce:	4460      	add	r0, ip
 80008d0:	0843      	lsrs	r3, r0, #1
 80008d2:	075a      	lsls	r2, r3, #29
 80008d4:	d000      	beq.n	80008d8 <__aeabi_fsub+0x1b8>
 80008d6:	e75f      	b.n	8000798 <__aeabi_fsub+0x78>
 80008d8:	08db      	lsrs	r3, r3, #3
 80008da:	2dff      	cmp	r5, #255	; 0xff
 80008dc:	d012      	beq.n	8000904 <__aeabi_fsub+0x1e4>
 80008de:	025b      	lsls	r3, r3, #9
 80008e0:	0a5e      	lsrs	r6, r3, #9
 80008e2:	b2ea      	uxtb	r2, r5
 80008e4:	e767      	b.n	80007b6 <__aeabi_fsub+0x96>
 80008e6:	4662      	mov	r2, ip
 80008e8:	2a00      	cmp	r2, #0
 80008ea:	d100      	bne.n	80008ee <__aeabi_fsub+0x1ce>
 80008ec:	e093      	b.n	8000a16 <__aeabi_fsub+0x2f6>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d008      	beq.n	8000904 <__aeabi_fsub+0x1e4>
 80008f2:	2280      	movs	r2, #128	; 0x80
 80008f4:	03d2      	lsls	r2, r2, #15
 80008f6:	4213      	tst	r3, r2
 80008f8:	d004      	beq.n	8000904 <__aeabi_fsub+0x1e4>
 80008fa:	4640      	mov	r0, r8
 80008fc:	4210      	tst	r0, r2
 80008fe:	d101      	bne.n	8000904 <__aeabi_fsub+0x1e4>
 8000900:	000c      	movs	r4, r1
 8000902:	4643      	mov	r3, r8
 8000904:	2b00      	cmp	r3, #0
 8000906:	d0d8      	beq.n	80008ba <__aeabi_fsub+0x19a>
 8000908:	2680      	movs	r6, #128	; 0x80
 800090a:	03f6      	lsls	r6, r6, #15
 800090c:	431e      	orrs	r6, r3
 800090e:	0276      	lsls	r6, r6, #9
 8000910:	22ff      	movs	r2, #255	; 0xff
 8000912:	0a76      	lsrs	r6, r6, #9
 8000914:	e74f      	b.n	80007b6 <__aeabi_fsub+0x96>
 8000916:	4643      	mov	r3, r8
 8000918:	0015      	movs	r5, r2
 800091a:	e7de      	b.n	80008da <__aeabi_fsub+0x1ba>
 800091c:	2220      	movs	r2, #32
 800091e:	1b40      	subs	r0, r0, r5
 8000920:	3001      	adds	r0, #1
 8000922:	1a12      	subs	r2, r2, r0
 8000924:	0019      	movs	r1, r3
 8000926:	4093      	lsls	r3, r2
 8000928:	40c1      	lsrs	r1, r0
 800092a:	1e5a      	subs	r2, r3, #1
 800092c:	4193      	sbcs	r3, r2
 800092e:	2500      	movs	r5, #0
 8000930:	430b      	orrs	r3, r1
 8000932:	e72f      	b.n	8000794 <__aeabi_fsub+0x74>
 8000934:	2320      	movs	r3, #32
 8000936:	1a9b      	subs	r3, r3, r2
 8000938:	0001      	movs	r1, r0
 800093a:	4098      	lsls	r0, r3
 800093c:	0003      	movs	r3, r0
 800093e:	40d1      	lsrs	r1, r2
 8000940:	1e5a      	subs	r2, r3, #1
 8000942:	4193      	sbcs	r3, r2
 8000944:	430b      	orrs	r3, r1
 8000946:	e712      	b.n	800076e <__aeabi_fsub+0x4e>
 8000948:	2fff      	cmp	r7, #255	; 0xff
 800094a:	d0d9      	beq.n	8000900 <__aeabi_fsub+0x1e0>
 800094c:	2380      	movs	r3, #128	; 0x80
 800094e:	4664      	mov	r4, ip
 8000950:	04db      	lsls	r3, r3, #19
 8000952:	431c      	orrs	r4, r3
 8000954:	46a4      	mov	ip, r4
 8000956:	2a1b      	cmp	r2, #27
 8000958:	dd52      	ble.n	8000a00 <__aeabi_fsub+0x2e0>
 800095a:	2301      	movs	r3, #1
 800095c:	000c      	movs	r4, r1
 800095e:	003d      	movs	r5, r7
 8000960:	1ac3      	subs	r3, r0, r3
 8000962:	e706      	b.n	8000772 <__aeabi_fsub+0x52>
 8000964:	4663      	mov	r3, ip
 8000966:	1a1e      	subs	r6, r3, r0
 8000968:	0173      	lsls	r3, r6, #5
 800096a:	d439      	bmi.n	80009e0 <__aeabi_fsub+0x2c0>
 800096c:	2e00      	cmp	r6, #0
 800096e:	d000      	beq.n	8000972 <__aeabi_fsub+0x252>
 8000970:	e704      	b.n	800077c <__aeabi_fsub+0x5c>
 8000972:	2400      	movs	r4, #0
 8000974:	2200      	movs	r2, #0
 8000976:	2600      	movs	r6, #0
 8000978:	e71d      	b.n	80007b6 <__aeabi_fsub+0x96>
 800097a:	2320      	movs	r3, #32
 800097c:	1a9b      	subs	r3, r3, r2
 800097e:	0001      	movs	r1, r0
 8000980:	4098      	lsls	r0, r3
 8000982:	0003      	movs	r3, r0
 8000984:	40d1      	lsrs	r1, r2
 8000986:	1e5a      	subs	r2, r3, #1
 8000988:	4193      	sbcs	r3, r2
 800098a:	430b      	orrs	r3, r1
 800098c:	e729      	b.n	80007e2 <__aeabi_fsub+0xc2>
 800098e:	2d00      	cmp	r5, #0
 8000990:	d1a9      	bne.n	80008e6 <__aeabi_fsub+0x1c6>
 8000992:	4663      	mov	r3, ip
 8000994:	2b00      	cmp	r3, #0
 8000996:	d056      	beq.n	8000a46 <__aeabi_fsub+0x326>
 8000998:	2200      	movs	r2, #0
 800099a:	2800      	cmp	r0, #0
 800099c:	d100      	bne.n	80009a0 <__aeabi_fsub+0x280>
 800099e:	e70a      	b.n	80007b6 <__aeabi_fsub+0x96>
 80009a0:	0003      	movs	r3, r0
 80009a2:	4463      	add	r3, ip
 80009a4:	015a      	lsls	r2, r3, #5
 80009a6:	d594      	bpl.n	80008d2 <__aeabi_fsub+0x1b2>
 80009a8:	4a2b      	ldr	r2, [pc, #172]	; (8000a58 <__aeabi_fsub+0x338>)
 80009aa:	3501      	adds	r5, #1
 80009ac:	4013      	ands	r3, r2
 80009ae:	e790      	b.n	80008d2 <__aeabi_fsub+0x1b2>
 80009b0:	4663      	mov	r3, ip
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d0af      	beq.n	8000916 <__aeabi_fsub+0x1f6>
 80009b6:	1e53      	subs	r3, r2, #1
 80009b8:	2a01      	cmp	r2, #1
 80009ba:	d015      	beq.n	80009e8 <__aeabi_fsub+0x2c8>
 80009bc:	2aff      	cmp	r2, #255	; 0xff
 80009be:	d02a      	beq.n	8000a16 <__aeabi_fsub+0x2f6>
 80009c0:	001a      	movs	r2, r3
 80009c2:	e752      	b.n	800086a <__aeabi_fsub+0x14a>
 80009c4:	4662      	mov	r2, ip
 80009c6:	2a00      	cmp	r2, #0
 80009c8:	d191      	bne.n	80008ee <__aeabi_fsub+0x1ce>
 80009ca:	2800      	cmp	r0, #0
 80009cc:	d198      	bne.n	8000900 <__aeabi_fsub+0x1e0>
 80009ce:	2680      	movs	r6, #128	; 0x80
 80009d0:	2400      	movs	r4, #0
 80009d2:	22ff      	movs	r2, #255	; 0xff
 80009d4:	03f6      	lsls	r6, r6, #15
 80009d6:	e6ee      	b.n	80007b6 <__aeabi_fsub+0x96>
 80009d8:	000c      	movs	r4, r1
 80009da:	4643      	mov	r3, r8
 80009dc:	0015      	movs	r5, r2
 80009de:	e77c      	b.n	80008da <__aeabi_fsub+0x1ba>
 80009e0:	4663      	mov	r3, ip
 80009e2:	000c      	movs	r4, r1
 80009e4:	1ac6      	subs	r6, r0, r3
 80009e6:	e6c9      	b.n	800077c <__aeabi_fsub+0x5c>
 80009e8:	0003      	movs	r3, r0
 80009ea:	4463      	add	r3, ip
 80009ec:	2501      	movs	r5, #1
 80009ee:	015a      	lsls	r2, r3, #5
 80009f0:	d400      	bmi.n	80009f4 <__aeabi_fsub+0x2d4>
 80009f2:	e76e      	b.n	80008d2 <__aeabi_fsub+0x1b2>
 80009f4:	2502      	movs	r5, #2
 80009f6:	e6fa      	b.n	80007ee <__aeabi_fsub+0xce>
 80009f8:	4663      	mov	r3, ip
 80009fa:	2501      	movs	r5, #1
 80009fc:	1a1b      	subs	r3, r3, r0
 80009fe:	e6b8      	b.n	8000772 <__aeabi_fsub+0x52>
 8000a00:	4664      	mov	r4, ip
 8000a02:	2320      	movs	r3, #32
 8000a04:	40d4      	lsrs	r4, r2
 8000a06:	1a9b      	subs	r3, r3, r2
 8000a08:	4662      	mov	r2, ip
 8000a0a:	409a      	lsls	r2, r3
 8000a0c:	0013      	movs	r3, r2
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	4193      	sbcs	r3, r2
 8000a12:	4323      	orrs	r3, r4
 8000a14:	e7a2      	b.n	800095c <__aeabi_fsub+0x23c>
 8000a16:	4643      	mov	r3, r8
 8000a18:	e774      	b.n	8000904 <__aeabi_fsub+0x1e4>
 8000a1a:	4661      	mov	r1, ip
 8000a1c:	2320      	movs	r3, #32
 8000a1e:	40d1      	lsrs	r1, r2
 8000a20:	1a9b      	subs	r3, r3, r2
 8000a22:	4662      	mov	r2, ip
 8000a24:	409a      	lsls	r2, r3
 8000a26:	0013      	movs	r3, r2
 8000a28:	1e5a      	subs	r2, r3, #1
 8000a2a:	4193      	sbcs	r3, r2
 8000a2c:	430b      	orrs	r3, r1
 8000a2e:	e720      	b.n	8000872 <__aeabi_fsub+0x152>
 8000a30:	4663      	mov	r3, ip
 8000a32:	000c      	movs	r4, r1
 8000a34:	2501      	movs	r5, #1
 8000a36:	1ac3      	subs	r3, r0, r3
 8000a38:	e69b      	b.n	8000772 <__aeabi_fsub+0x52>
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	d099      	beq.n	8000972 <__aeabi_fsub+0x252>
 8000a3e:	000c      	movs	r4, r1
 8000a40:	4646      	mov	r6, r8
 8000a42:	2200      	movs	r2, #0
 8000a44:	e6b7      	b.n	80007b6 <__aeabi_fsub+0x96>
 8000a46:	4646      	mov	r6, r8
 8000a48:	2200      	movs	r2, #0
 8000a4a:	e6b4      	b.n	80007b6 <__aeabi_fsub+0x96>
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d000      	beq.n	8000a52 <__aeabi_fsub+0x332>
 8000a50:	e73f      	b.n	80008d2 <__aeabi_fsub+0x1b2>
 8000a52:	2400      	movs	r4, #0
 8000a54:	2600      	movs	r6, #0
 8000a56:	e6ae      	b.n	80007b6 <__aeabi_fsub+0x96>
 8000a58:	fbffffff 	.word	0xfbffffff
 8000a5c:	7dffffff 	.word	0x7dffffff

08000a60 <__aeabi_f2iz>:
 8000a60:	0241      	lsls	r1, r0, #9
 8000a62:	0042      	lsls	r2, r0, #1
 8000a64:	0fc3      	lsrs	r3, r0, #31
 8000a66:	0a49      	lsrs	r1, r1, #9
 8000a68:	2000      	movs	r0, #0
 8000a6a:	0e12      	lsrs	r2, r2, #24
 8000a6c:	2a7e      	cmp	r2, #126	; 0x7e
 8000a6e:	dd03      	ble.n	8000a78 <__aeabi_f2iz+0x18>
 8000a70:	2a9d      	cmp	r2, #157	; 0x9d
 8000a72:	dd02      	ble.n	8000a7a <__aeabi_f2iz+0x1a>
 8000a74:	4a09      	ldr	r2, [pc, #36]	; (8000a9c <__aeabi_f2iz+0x3c>)
 8000a76:	1898      	adds	r0, r3, r2
 8000a78:	4770      	bx	lr
 8000a7a:	2080      	movs	r0, #128	; 0x80
 8000a7c:	0400      	lsls	r0, r0, #16
 8000a7e:	4301      	orrs	r1, r0
 8000a80:	2a95      	cmp	r2, #149	; 0x95
 8000a82:	dc07      	bgt.n	8000a94 <__aeabi_f2iz+0x34>
 8000a84:	2096      	movs	r0, #150	; 0x96
 8000a86:	1a82      	subs	r2, r0, r2
 8000a88:	40d1      	lsrs	r1, r2
 8000a8a:	4248      	negs	r0, r1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d1f3      	bne.n	8000a78 <__aeabi_f2iz+0x18>
 8000a90:	0008      	movs	r0, r1
 8000a92:	e7f1      	b.n	8000a78 <__aeabi_f2iz+0x18>
 8000a94:	3a96      	subs	r2, #150	; 0x96
 8000a96:	4091      	lsls	r1, r2
 8000a98:	e7f7      	b.n	8000a8a <__aeabi_f2iz+0x2a>
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	7fffffff 	.word	0x7fffffff

08000aa0 <__aeabi_ui2f>:
 8000aa0:	b570      	push	{r4, r5, r6, lr}
 8000aa2:	1e04      	subs	r4, r0, #0
 8000aa4:	d00e      	beq.n	8000ac4 <__aeabi_ui2f+0x24>
 8000aa6:	f000 f87d 	bl	8000ba4 <__clzsi2>
 8000aaa:	239e      	movs	r3, #158	; 0x9e
 8000aac:	0001      	movs	r1, r0
 8000aae:	1a1b      	subs	r3, r3, r0
 8000ab0:	2b96      	cmp	r3, #150	; 0x96
 8000ab2:	dc0c      	bgt.n	8000ace <__aeabi_ui2f+0x2e>
 8000ab4:	2808      	cmp	r0, #8
 8000ab6:	d02c      	beq.n	8000b12 <__aeabi_ui2f+0x72>
 8000ab8:	3908      	subs	r1, #8
 8000aba:	408c      	lsls	r4, r1
 8000abc:	0264      	lsls	r4, r4, #9
 8000abe:	0a64      	lsrs	r4, r4, #9
 8000ac0:	b2d8      	uxtb	r0, r3
 8000ac2:	e001      	b.n	8000ac8 <__aeabi_ui2f+0x28>
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	2400      	movs	r4, #0
 8000ac8:	05c0      	lsls	r0, r0, #23
 8000aca:	4320      	orrs	r0, r4
 8000acc:	bd70      	pop	{r4, r5, r6, pc}
 8000ace:	2b99      	cmp	r3, #153	; 0x99
 8000ad0:	dd0a      	ble.n	8000ae8 <__aeabi_ui2f+0x48>
 8000ad2:	0002      	movs	r2, r0
 8000ad4:	0020      	movs	r0, r4
 8000ad6:	321b      	adds	r2, #27
 8000ad8:	4090      	lsls	r0, r2
 8000ada:	0002      	movs	r2, r0
 8000adc:	1e50      	subs	r0, r2, #1
 8000ade:	4182      	sbcs	r2, r0
 8000ae0:	2005      	movs	r0, #5
 8000ae2:	1a40      	subs	r0, r0, r1
 8000ae4:	40c4      	lsrs	r4, r0
 8000ae6:	4314      	orrs	r4, r2
 8000ae8:	2905      	cmp	r1, #5
 8000aea:	dc16      	bgt.n	8000b1a <__aeabi_ui2f+0x7a>
 8000aec:	0022      	movs	r2, r4
 8000aee:	480f      	ldr	r0, [pc, #60]	; (8000b2c <__aeabi_ui2f+0x8c>)
 8000af0:	4002      	ands	r2, r0
 8000af2:	0765      	lsls	r5, r4, #29
 8000af4:	d009      	beq.n	8000b0a <__aeabi_ui2f+0x6a>
 8000af6:	250f      	movs	r5, #15
 8000af8:	402c      	ands	r4, r5
 8000afa:	2c04      	cmp	r4, #4
 8000afc:	d005      	beq.n	8000b0a <__aeabi_ui2f+0x6a>
 8000afe:	3204      	adds	r2, #4
 8000b00:	0154      	lsls	r4, r2, #5
 8000b02:	d502      	bpl.n	8000b0a <__aeabi_ui2f+0x6a>
 8000b04:	239f      	movs	r3, #159	; 0x9f
 8000b06:	4002      	ands	r2, r0
 8000b08:	1a5b      	subs	r3, r3, r1
 8000b0a:	0192      	lsls	r2, r2, #6
 8000b0c:	0a54      	lsrs	r4, r2, #9
 8000b0e:	b2d8      	uxtb	r0, r3
 8000b10:	e7da      	b.n	8000ac8 <__aeabi_ui2f+0x28>
 8000b12:	0264      	lsls	r4, r4, #9
 8000b14:	2096      	movs	r0, #150	; 0x96
 8000b16:	0a64      	lsrs	r4, r4, #9
 8000b18:	e7d6      	b.n	8000ac8 <__aeabi_ui2f+0x28>
 8000b1a:	1f4a      	subs	r2, r1, #5
 8000b1c:	4094      	lsls	r4, r2
 8000b1e:	0022      	movs	r2, r4
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <__aeabi_ui2f+0x8c>)
 8000b22:	4002      	ands	r2, r0
 8000b24:	0765      	lsls	r5, r4, #29
 8000b26:	d0f0      	beq.n	8000b0a <__aeabi_ui2f+0x6a>
 8000b28:	e7e5      	b.n	8000af6 <__aeabi_ui2f+0x56>
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	fbffffff 	.word	0xfbffffff

08000b30 <__aeabi_cfrcmple>:
 8000b30:	4684      	mov	ip, r0
 8000b32:	0008      	movs	r0, r1
 8000b34:	4661      	mov	r1, ip
 8000b36:	e7ff      	b.n	8000b38 <__aeabi_cfcmpeq>

08000b38 <__aeabi_cfcmpeq>:
 8000b38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000b3a:	f000 f8bd 	bl	8000cb8 <__lesf2>
 8000b3e:	2800      	cmp	r0, #0
 8000b40:	d401      	bmi.n	8000b46 <__aeabi_cfcmpeq+0xe>
 8000b42:	2100      	movs	r1, #0
 8000b44:	42c8      	cmn	r0, r1
 8000b46:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000b48 <__aeabi_fcmpeq>:
 8000b48:	b510      	push	{r4, lr}
 8000b4a:	f000 f849 	bl	8000be0 <__eqsf2>
 8000b4e:	4240      	negs	r0, r0
 8000b50:	3001      	adds	r0, #1
 8000b52:	bd10      	pop	{r4, pc}

08000b54 <__aeabi_fcmplt>:
 8000b54:	b510      	push	{r4, lr}
 8000b56:	f000 f8af 	bl	8000cb8 <__lesf2>
 8000b5a:	2800      	cmp	r0, #0
 8000b5c:	db01      	blt.n	8000b62 <__aeabi_fcmplt+0xe>
 8000b5e:	2000      	movs	r0, #0
 8000b60:	bd10      	pop	{r4, pc}
 8000b62:	2001      	movs	r0, #1
 8000b64:	bd10      	pop	{r4, pc}
 8000b66:	46c0      	nop			; (mov r8, r8)

08000b68 <__aeabi_fcmple>:
 8000b68:	b510      	push	{r4, lr}
 8000b6a:	f000 f8a5 	bl	8000cb8 <__lesf2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	dd01      	ble.n	8000b76 <__aeabi_fcmple+0xe>
 8000b72:	2000      	movs	r0, #0
 8000b74:	bd10      	pop	{r4, pc}
 8000b76:	2001      	movs	r0, #1
 8000b78:	bd10      	pop	{r4, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)

08000b7c <__aeabi_fcmpgt>:
 8000b7c:	b510      	push	{r4, lr}
 8000b7e:	f000 f855 	bl	8000c2c <__gesf2>
 8000b82:	2800      	cmp	r0, #0
 8000b84:	dc01      	bgt.n	8000b8a <__aeabi_fcmpgt+0xe>
 8000b86:	2000      	movs	r0, #0
 8000b88:	bd10      	pop	{r4, pc}
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	bd10      	pop	{r4, pc}
 8000b8e:	46c0      	nop			; (mov r8, r8)

08000b90 <__aeabi_fcmpge>:
 8000b90:	b510      	push	{r4, lr}
 8000b92:	f000 f84b 	bl	8000c2c <__gesf2>
 8000b96:	2800      	cmp	r0, #0
 8000b98:	da01      	bge.n	8000b9e <__aeabi_fcmpge+0xe>
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	bd10      	pop	{r4, pc}
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	bd10      	pop	{r4, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)

08000ba4 <__clzsi2>:
 8000ba4:	211c      	movs	r1, #28
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	041b      	lsls	r3, r3, #16
 8000baa:	4298      	cmp	r0, r3
 8000bac:	d301      	bcc.n	8000bb2 <__clzsi2+0xe>
 8000bae:	0c00      	lsrs	r0, r0, #16
 8000bb0:	3910      	subs	r1, #16
 8000bb2:	0a1b      	lsrs	r3, r3, #8
 8000bb4:	4298      	cmp	r0, r3
 8000bb6:	d301      	bcc.n	8000bbc <__clzsi2+0x18>
 8000bb8:	0a00      	lsrs	r0, r0, #8
 8000bba:	3908      	subs	r1, #8
 8000bbc:	091b      	lsrs	r3, r3, #4
 8000bbe:	4298      	cmp	r0, r3
 8000bc0:	d301      	bcc.n	8000bc6 <__clzsi2+0x22>
 8000bc2:	0900      	lsrs	r0, r0, #4
 8000bc4:	3904      	subs	r1, #4
 8000bc6:	a202      	add	r2, pc, #8	; (adr r2, 8000bd0 <__clzsi2+0x2c>)
 8000bc8:	5c10      	ldrb	r0, [r2, r0]
 8000bca:	1840      	adds	r0, r0, r1
 8000bcc:	4770      	bx	lr
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	02020304 	.word	0x02020304
 8000bd4:	01010101 	.word	0x01010101
	...

08000be0 <__eqsf2>:
 8000be0:	b570      	push	{r4, r5, r6, lr}
 8000be2:	0042      	lsls	r2, r0, #1
 8000be4:	0245      	lsls	r5, r0, #9
 8000be6:	024e      	lsls	r6, r1, #9
 8000be8:	004c      	lsls	r4, r1, #1
 8000bea:	0fc3      	lsrs	r3, r0, #31
 8000bec:	0a6d      	lsrs	r5, r5, #9
 8000bee:	2001      	movs	r0, #1
 8000bf0:	0e12      	lsrs	r2, r2, #24
 8000bf2:	0a76      	lsrs	r6, r6, #9
 8000bf4:	0e24      	lsrs	r4, r4, #24
 8000bf6:	0fc9      	lsrs	r1, r1, #31
 8000bf8:	2aff      	cmp	r2, #255	; 0xff
 8000bfa:	d006      	beq.n	8000c0a <__eqsf2+0x2a>
 8000bfc:	2cff      	cmp	r4, #255	; 0xff
 8000bfe:	d003      	beq.n	8000c08 <__eqsf2+0x28>
 8000c00:	42a2      	cmp	r2, r4
 8000c02:	d101      	bne.n	8000c08 <__eqsf2+0x28>
 8000c04:	42b5      	cmp	r5, r6
 8000c06:	d006      	beq.n	8000c16 <__eqsf2+0x36>
 8000c08:	bd70      	pop	{r4, r5, r6, pc}
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d1fc      	bne.n	8000c08 <__eqsf2+0x28>
 8000c0e:	2cff      	cmp	r4, #255	; 0xff
 8000c10:	d1fa      	bne.n	8000c08 <__eqsf2+0x28>
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d1f8      	bne.n	8000c08 <__eqsf2+0x28>
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d006      	beq.n	8000c28 <__eqsf2+0x48>
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	d1f3      	bne.n	8000c08 <__eqsf2+0x28>
 8000c20:	0028      	movs	r0, r5
 8000c22:	1e43      	subs	r3, r0, #1
 8000c24:	4198      	sbcs	r0, r3
 8000c26:	e7ef      	b.n	8000c08 <__eqsf2+0x28>
 8000c28:	2000      	movs	r0, #0
 8000c2a:	e7ed      	b.n	8000c08 <__eqsf2+0x28>

08000c2c <__gesf2>:
 8000c2c:	b570      	push	{r4, r5, r6, lr}
 8000c2e:	0042      	lsls	r2, r0, #1
 8000c30:	0245      	lsls	r5, r0, #9
 8000c32:	024e      	lsls	r6, r1, #9
 8000c34:	004c      	lsls	r4, r1, #1
 8000c36:	0fc3      	lsrs	r3, r0, #31
 8000c38:	0a6d      	lsrs	r5, r5, #9
 8000c3a:	0e12      	lsrs	r2, r2, #24
 8000c3c:	0a76      	lsrs	r6, r6, #9
 8000c3e:	0e24      	lsrs	r4, r4, #24
 8000c40:	0fc8      	lsrs	r0, r1, #31
 8000c42:	2aff      	cmp	r2, #255	; 0xff
 8000c44:	d01b      	beq.n	8000c7e <__gesf2+0x52>
 8000c46:	2cff      	cmp	r4, #255	; 0xff
 8000c48:	d00e      	beq.n	8000c68 <__gesf2+0x3c>
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d11b      	bne.n	8000c86 <__gesf2+0x5a>
 8000c4e:	2c00      	cmp	r4, #0
 8000c50:	d101      	bne.n	8000c56 <__gesf2+0x2a>
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	d01c      	beq.n	8000c90 <__gesf2+0x64>
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d00c      	beq.n	8000c74 <__gesf2+0x48>
 8000c5a:	4283      	cmp	r3, r0
 8000c5c:	d01c      	beq.n	8000c98 <__gesf2+0x6c>
 8000c5e:	2102      	movs	r1, #2
 8000c60:	1e58      	subs	r0, r3, #1
 8000c62:	4008      	ands	r0, r1
 8000c64:	3801      	subs	r0, #1
 8000c66:	bd70      	pop	{r4, r5, r6, pc}
 8000c68:	2e00      	cmp	r6, #0
 8000c6a:	d122      	bne.n	8000cb2 <__gesf2+0x86>
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	d1f4      	bne.n	8000c5a <__gesf2+0x2e>
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d1f2      	bne.n	8000c5a <__gesf2+0x2e>
 8000c74:	2800      	cmp	r0, #0
 8000c76:	d1f6      	bne.n	8000c66 <__gesf2+0x3a>
 8000c78:	2001      	movs	r0, #1
 8000c7a:	4240      	negs	r0, r0
 8000c7c:	e7f3      	b.n	8000c66 <__gesf2+0x3a>
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	d117      	bne.n	8000cb2 <__gesf2+0x86>
 8000c82:	2cff      	cmp	r4, #255	; 0xff
 8000c84:	d0f0      	beq.n	8000c68 <__gesf2+0x3c>
 8000c86:	2c00      	cmp	r4, #0
 8000c88:	d1e7      	bne.n	8000c5a <__gesf2+0x2e>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	d1e5      	bne.n	8000c5a <__gesf2+0x2e>
 8000c8e:	e7e6      	b.n	8000c5e <__gesf2+0x32>
 8000c90:	2000      	movs	r0, #0
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	d0e7      	beq.n	8000c66 <__gesf2+0x3a>
 8000c96:	e7e2      	b.n	8000c5e <__gesf2+0x32>
 8000c98:	42a2      	cmp	r2, r4
 8000c9a:	dc05      	bgt.n	8000ca8 <__gesf2+0x7c>
 8000c9c:	dbea      	blt.n	8000c74 <__gesf2+0x48>
 8000c9e:	42b5      	cmp	r5, r6
 8000ca0:	d802      	bhi.n	8000ca8 <__gesf2+0x7c>
 8000ca2:	d3e7      	bcc.n	8000c74 <__gesf2+0x48>
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	e7de      	b.n	8000c66 <__gesf2+0x3a>
 8000ca8:	4243      	negs	r3, r0
 8000caa:	4158      	adcs	r0, r3
 8000cac:	0040      	lsls	r0, r0, #1
 8000cae:	3801      	subs	r0, #1
 8000cb0:	e7d9      	b.n	8000c66 <__gesf2+0x3a>
 8000cb2:	2002      	movs	r0, #2
 8000cb4:	4240      	negs	r0, r0
 8000cb6:	e7d6      	b.n	8000c66 <__gesf2+0x3a>

08000cb8 <__lesf2>:
 8000cb8:	b570      	push	{r4, r5, r6, lr}
 8000cba:	0042      	lsls	r2, r0, #1
 8000cbc:	0245      	lsls	r5, r0, #9
 8000cbe:	024e      	lsls	r6, r1, #9
 8000cc0:	004c      	lsls	r4, r1, #1
 8000cc2:	0fc3      	lsrs	r3, r0, #31
 8000cc4:	0a6d      	lsrs	r5, r5, #9
 8000cc6:	0e12      	lsrs	r2, r2, #24
 8000cc8:	0a76      	lsrs	r6, r6, #9
 8000cca:	0e24      	lsrs	r4, r4, #24
 8000ccc:	0fc8      	lsrs	r0, r1, #31
 8000cce:	2aff      	cmp	r2, #255	; 0xff
 8000cd0:	d00b      	beq.n	8000cea <__lesf2+0x32>
 8000cd2:	2cff      	cmp	r4, #255	; 0xff
 8000cd4:	d00d      	beq.n	8000cf2 <__lesf2+0x3a>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d11f      	bne.n	8000d1a <__lesf2+0x62>
 8000cda:	2c00      	cmp	r4, #0
 8000cdc:	d116      	bne.n	8000d0c <__lesf2+0x54>
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d114      	bne.n	8000d0c <__lesf2+0x54>
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	2d00      	cmp	r5, #0
 8000ce6:	d010      	beq.n	8000d0a <__lesf2+0x52>
 8000ce8:	e009      	b.n	8000cfe <__lesf2+0x46>
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d10c      	bne.n	8000d08 <__lesf2+0x50>
 8000cee:	2cff      	cmp	r4, #255	; 0xff
 8000cf0:	d113      	bne.n	8000d1a <__lesf2+0x62>
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d108      	bne.n	8000d08 <__lesf2+0x50>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	d008      	beq.n	8000d0c <__lesf2+0x54>
 8000cfa:	4283      	cmp	r3, r0
 8000cfc:	d012      	beq.n	8000d24 <__lesf2+0x6c>
 8000cfe:	2102      	movs	r1, #2
 8000d00:	1e58      	subs	r0, r3, #1
 8000d02:	4008      	ands	r0, r1
 8000d04:	3801      	subs	r0, #1
 8000d06:	e000      	b.n	8000d0a <__lesf2+0x52>
 8000d08:	2002      	movs	r0, #2
 8000d0a:	bd70      	pop	{r4, r5, r6, pc}
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d1f4      	bne.n	8000cfa <__lesf2+0x42>
 8000d10:	2800      	cmp	r0, #0
 8000d12:	d1fa      	bne.n	8000d0a <__lesf2+0x52>
 8000d14:	2001      	movs	r0, #1
 8000d16:	4240      	negs	r0, r0
 8000d18:	e7f7      	b.n	8000d0a <__lesf2+0x52>
 8000d1a:	2c00      	cmp	r4, #0
 8000d1c:	d1ed      	bne.n	8000cfa <__lesf2+0x42>
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d1eb      	bne.n	8000cfa <__lesf2+0x42>
 8000d22:	e7ec      	b.n	8000cfe <__lesf2+0x46>
 8000d24:	42a2      	cmp	r2, r4
 8000d26:	dc05      	bgt.n	8000d34 <__lesf2+0x7c>
 8000d28:	dbf2      	blt.n	8000d10 <__lesf2+0x58>
 8000d2a:	42b5      	cmp	r5, r6
 8000d2c:	d802      	bhi.n	8000d34 <__lesf2+0x7c>
 8000d2e:	d3ef      	bcc.n	8000d10 <__lesf2+0x58>
 8000d30:	2000      	movs	r0, #0
 8000d32:	e7ea      	b.n	8000d0a <__lesf2+0x52>
 8000d34:	4243      	negs	r3, r0
 8000d36:	4158      	adcs	r0, r3
 8000d38:	0040      	lsls	r0, r0, #1
 8000d3a:	3801      	subs	r0, #1
 8000d3c:	e7e5      	b.n	8000d0a <__lesf2+0x52>
 8000d3e:	46c0      	nop			; (mov r8, r8)

08000d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//pwm_stop();
	input_capture_timer_disable();
 8000d44:	f000 ff61 	bl	8001c0a <input_capture_timer_disable>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d48:	f000 f8ca 	bl	8000ee0 <HAL_Init>

  /* USER CODE BEGIN Init */

input_capture_timer_init();
 8000d4c:	f000 fe6c 	bl	8001a28 <input_capture_timer_init>
pwm_timer_init();
 8000d50:	f001 f872 	bl	8001e38 <pwm_timer_init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d54:	f000 f80a 	bl	8000d6c <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
 // MX_GPIO_Init();
  /* USER CODE BEGIN 2 */
 pwm_start();
 8000d58:	f001 f902 	bl	8001f60 <pwm_start>
 input_capture_timer_enable();
 8000d5c:	f000 ff28 	bl	8001bb0 <input_capture_timer_enable>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	   HAL_Delay(1000);
 8000d60:	23fa      	movs	r3, #250	; 0xfa
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	0018      	movs	r0, r3
 8000d66:	f000 f91f 	bl	8000fa8 <HAL_Delay>
 8000d6a:	e7f9      	b.n	8000d60 <main+0x20>

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b091      	sub	sp, #68	; 0x44
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	2410      	movs	r4, #16
 8000d74:	193b      	adds	r3, r7, r4
 8000d76:	0018      	movs	r0, r3
 8000d78:	2330      	movs	r3, #48	; 0x30
 8000d7a:	001a      	movs	r2, r3
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	f001 fa27 	bl	80021d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d82:	003b      	movs	r3, r7
 8000d84:	0018      	movs	r0, r3
 8000d86:	2310      	movs	r3, #16
 8000d88:	001a      	movs	r2, r3
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	f001 fa20 	bl	80021d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d90:	0021      	movs	r1, r4
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	2202      	movs	r2, #2
 8000d96:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2210      	movs	r2, #16
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2202      	movs	r2, #2
 8000da8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	22a0      	movs	r2, #160	; 0xa0
 8000db4:	0392      	lsls	r2, r2, #14
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	2200      	movs	r2, #0
 8000dbc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f000 f9f3 	bl	80011ac <HAL_RCC_OscConfig>
 8000dc6:	1e03      	subs	r3, r0, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000dca:	f000 f819 	bl	8000e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dce:	003b      	movs	r3, r7
 8000dd0:	2207      	movs	r2, #7
 8000dd2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd4:	003b      	movs	r3, r7
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dda:	003b      	movs	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000de0:	003b      	movs	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000de6:	003b      	movs	r3, r7
 8000de8:	2101      	movs	r1, #1
 8000dea:	0018      	movs	r0, r3
 8000dec:	f000 fcf8 	bl	80017e0 <HAL_RCC_ClockConfig>
 8000df0:	1e03      	subs	r3, r0, #0
 8000df2:	d001      	beq.n	8000df8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000df4:	f000 f804 	bl	8000e00 <Error_Handler>
  }
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b011      	add	sp, #68	; 0x44
 8000dfe:	bd90      	pop	{r4, r7, pc}

08000e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e04:	b672      	cpsid	i
}
 8000e06:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <Error_Handler+0x8>
	...

08000e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <HAL_MspInit+0x44>)
 8000e14:	699a      	ldr	r2, [r3, #24]
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_MspInit+0x44>)
 8000e18:	2101      	movs	r1, #1
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	619a      	str	r2, [r3, #24]
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <HAL_MspInit+0x44>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	2201      	movs	r2, #1
 8000e24:	4013      	ands	r3, r2
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <HAL_MspInit+0x44>)
 8000e2c:	69da      	ldr	r2, [r3, #28]
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <HAL_MspInit+0x44>)
 8000e30:	2180      	movs	r1, #128	; 0x80
 8000e32:	0549      	lsls	r1, r1, #21
 8000e34:	430a      	orrs	r2, r1
 8000e36:	61da      	str	r2, [r3, #28]
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_MspInit+0x44>)
 8000e3a:	69da      	ldr	r2, [r3, #28]
 8000e3c:	2380      	movs	r3, #128	; 0x80
 8000e3e:	055b      	lsls	r3, r3, #21
 8000e40:	4013      	ands	r3, r2
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b002      	add	sp, #8
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	40021000 	.word	0x40021000

08000e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <NMI_Handler+0x4>

08000e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <HardFault_Handler+0x4>

08000e60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e78:	f000 f87a 	bl	8000f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e8c:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e8e:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000e90:	f7ff fff7 	bl	8000e82 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e94:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e96:	490d      	ldr	r1, [pc, #52]	; (8000ecc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e98:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <LoopForever+0xe>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eac:	4c0a      	ldr	r4, [pc, #40]	; (8000ed8 <LoopForever+0x16>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eba:	f001 f991 	bl	80021e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ebe:	f7ff ff3f 	bl	8000d40 <main>

08000ec2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ec2:	e7fe      	b.n	8000ec2 <LoopForever>
  ldr   r0, =_estack
 8000ec4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ed0:	080022f8 	.word	0x080022f8
  ldr r2, =_sbss
 8000ed4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ed8:	20000048 	.word	0x20000048

08000edc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC1_COMP_IRQHandler>
	...

08000ee0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <HAL_Init+0x24>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_Init+0x24>)
 8000eea:	2110      	movs	r1, #16
 8000eec:	430a      	orrs	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f000 f809 	bl	8000f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef6:	f7ff ff89 	bl	8000e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	0018      	movs	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	40022000 	.word	0x40022000

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <HAL_InitTick+0x5c>)
 8000f12:	681c      	ldr	r4, [r3, #0]
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <HAL_InitTick+0x60>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	0019      	movs	r1, r3
 8000f1a:	23fa      	movs	r3, #250	; 0xfa
 8000f1c:	0098      	lsls	r0, r3, #2
 8000f1e:	f7ff f8f3 	bl	8000108 <__udivsi3>
 8000f22:	0003      	movs	r3, r0
 8000f24:	0019      	movs	r1, r3
 8000f26:	0020      	movs	r0, r4
 8000f28:	f7ff f8ee 	bl	8000108 <__udivsi3>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f000 f92f 	bl	8001192 <HAL_SYSTICK_Config>
 8000f34:	1e03      	subs	r3, r0, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e00f      	b.n	8000f5c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	d80b      	bhi.n	8000f5a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	2301      	movs	r3, #1
 8000f46:	425b      	negs	r3, r3
 8000f48:	2200      	movs	r2, #0
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 f8fc 	bl	8001148 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_InitTick+0x64>)
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
 8000f58:	e000      	b.n	8000f5c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
}
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b003      	add	sp, #12
 8000f62:	bd90      	pop	{r4, r7, pc}
 8000f64:	20000000 	.word	0x20000000
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000004 	.word	0x20000004

08000f70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_IncTick+0x1c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	001a      	movs	r2, r3
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_IncTick+0x20>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	18d2      	adds	r2, r2, r3
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <HAL_IncTick+0x20>)
 8000f82:	601a      	str	r2, [r3, #0]
}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20000028 	.word	0x20000028

08000f94 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b02      	ldr	r3, [pc, #8]	; (8000fa4 <HAL_GetTick+0x10>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	20000028 	.word	0x20000028

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff fff0 	bl	8000f94 <HAL_GetTick>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_Delay+0x44>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	189b      	adds	r3, r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	f7ff ffe0 	bl	8000f94 <HAL_GetTick>
 8000fd4:	0002      	movs	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b004      	add	sp, #16
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	20000008 	.word	0x20000008

08000ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	0002      	movs	r2, r0
 8000ff8:	1dfb      	adds	r3, r7, #7
 8000ffa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	1dfb      	adds	r3, r7, #7
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b7f      	cmp	r3, #127	; 0x7f
 8001002:	d809      	bhi.n	8001018 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001004:	1dfb      	adds	r3, r7, #7
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	001a      	movs	r2, r3
 800100a:	231f      	movs	r3, #31
 800100c:	401a      	ands	r2, r3
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <__NVIC_EnableIRQ+0x30>)
 8001010:	2101      	movs	r1, #1
 8001012:	4091      	lsls	r1, r2
 8001014:	000a      	movs	r2, r1
 8001016:	601a      	str	r2, [r3, #0]
  }
}
 8001018:	46c0      	nop			; (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	b002      	add	sp, #8
 800101e:	bd80      	pop	{r7, pc}
 8001020:	e000e100 	.word	0xe000e100

08001024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	0002      	movs	r2, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b7f      	cmp	r3, #127	; 0x7f
 8001038:	d828      	bhi.n	800108c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800103a:	4a2f      	ldr	r2, [pc, #188]	; (80010f8 <__NVIC_SetPriority+0xd4>)
 800103c:	1dfb      	adds	r3, r7, #7
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b25b      	sxtb	r3, r3
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	33c0      	adds	r3, #192	; 0xc0
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	589b      	ldr	r3, [r3, r2]
 800104a:	1dfa      	adds	r2, r7, #7
 800104c:	7812      	ldrb	r2, [r2, #0]
 800104e:	0011      	movs	r1, r2
 8001050:	2203      	movs	r2, #3
 8001052:	400a      	ands	r2, r1
 8001054:	00d2      	lsls	r2, r2, #3
 8001056:	21ff      	movs	r1, #255	; 0xff
 8001058:	4091      	lsls	r1, r2
 800105a:	000a      	movs	r2, r1
 800105c:	43d2      	mvns	r2, r2
 800105e:	401a      	ands	r2, r3
 8001060:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	019b      	lsls	r3, r3, #6
 8001066:	22ff      	movs	r2, #255	; 0xff
 8001068:	401a      	ands	r2, r3
 800106a:	1dfb      	adds	r3, r7, #7
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	0018      	movs	r0, r3
 8001070:	2303      	movs	r3, #3
 8001072:	4003      	ands	r3, r0
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001078:	481f      	ldr	r0, [pc, #124]	; (80010f8 <__NVIC_SetPriority+0xd4>)
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b25b      	sxtb	r3, r3
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	430a      	orrs	r2, r1
 8001084:	33c0      	adds	r3, #192	; 0xc0
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800108a:	e031      	b.n	80010f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800108c:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <__NVIC_SetPriority+0xd8>)
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	0019      	movs	r1, r3
 8001094:	230f      	movs	r3, #15
 8001096:	400b      	ands	r3, r1
 8001098:	3b08      	subs	r3, #8
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	3306      	adds	r3, #6
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	18d3      	adds	r3, r2, r3
 80010a2:	3304      	adds	r3, #4
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	1dfa      	adds	r2, r7, #7
 80010a8:	7812      	ldrb	r2, [r2, #0]
 80010aa:	0011      	movs	r1, r2
 80010ac:	2203      	movs	r2, #3
 80010ae:	400a      	ands	r2, r1
 80010b0:	00d2      	lsls	r2, r2, #3
 80010b2:	21ff      	movs	r1, #255	; 0xff
 80010b4:	4091      	lsls	r1, r2
 80010b6:	000a      	movs	r2, r1
 80010b8:	43d2      	mvns	r2, r2
 80010ba:	401a      	ands	r2, r3
 80010bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	019b      	lsls	r3, r3, #6
 80010c2:	22ff      	movs	r2, #255	; 0xff
 80010c4:	401a      	ands	r2, r3
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	0018      	movs	r0, r3
 80010cc:	2303      	movs	r3, #3
 80010ce:	4003      	ands	r3, r0
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d4:	4809      	ldr	r0, [pc, #36]	; (80010fc <__NVIC_SetPriority+0xd8>)
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	001c      	movs	r4, r3
 80010dc:	230f      	movs	r3, #15
 80010de:	4023      	ands	r3, r4
 80010e0:	3b08      	subs	r3, #8
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	430a      	orrs	r2, r1
 80010e6:	3306      	adds	r3, #6
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	18c3      	adds	r3, r0, r3
 80010ec:	3304      	adds	r3, #4
 80010ee:	601a      	str	r2, [r3, #0]
}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b003      	add	sp, #12
 80010f6:	bd90      	pop	{r4, r7, pc}
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	1e5a      	subs	r2, r3, #1
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	045b      	lsls	r3, r3, #17
 8001110:	429a      	cmp	r2, r3
 8001112:	d301      	bcc.n	8001118 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001114:	2301      	movs	r3, #1
 8001116:	e010      	b.n	800113a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <SysTick_Config+0x44>)
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	3a01      	subs	r2, #1
 800111e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001120:	2301      	movs	r3, #1
 8001122:	425b      	negs	r3, r3
 8001124:	2103      	movs	r1, #3
 8001126:	0018      	movs	r0, r3
 8001128:	f7ff ff7c 	bl	8001024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800112c:	4b05      	ldr	r3, [pc, #20]	; (8001144 <SysTick_Config+0x44>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <SysTick_Config+0x44>)
 8001134:	2207      	movs	r2, #7
 8001136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001138:	2300      	movs	r3, #0
}
 800113a:	0018      	movs	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	b002      	add	sp, #8
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	e000e010 	.word	0xe000e010

08001148 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
 8001152:	210f      	movs	r1, #15
 8001154:	187b      	adds	r3, r7, r1
 8001156:	1c02      	adds	r2, r0, #0
 8001158:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	187b      	adds	r3, r7, r1
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b25b      	sxtb	r3, r3
 8001162:	0011      	movs	r1, r2
 8001164:	0018      	movs	r0, r3
 8001166:	f7ff ff5d 	bl	8001024 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	b004      	add	sp, #16
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	0002      	movs	r2, r0
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b25b      	sxtb	r3, r3
 8001184:	0018      	movs	r0, r3
 8001186:	f7ff ff33 	bl	8000ff0 <__NVIC_EnableIRQ>
}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46bd      	mov	sp, r7
 800118e:	b002      	add	sp, #8
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	0018      	movs	r0, r3
 800119e:	f7ff ffaf 	bl	8001100 <SysTick_Config>
 80011a2:	0003      	movs	r3, r0
}
 80011a4:	0018      	movs	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b002      	add	sp, #8
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e301      	b.n	80017c2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2201      	movs	r2, #1
 80011c4:	4013      	ands	r3, r2
 80011c6:	d100      	bne.n	80011ca <HAL_RCC_OscConfig+0x1e>
 80011c8:	e08d      	b.n	80012e6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011ca:	4bc3      	ldr	r3, [pc, #780]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	220c      	movs	r2, #12
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d00e      	beq.n	80011f4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011d6:	4bc0      	ldr	r3, [pc, #768]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	220c      	movs	r2, #12
 80011dc:	4013      	ands	r3, r2
 80011de:	2b08      	cmp	r3, #8
 80011e0:	d116      	bne.n	8001210 <HAL_RCC_OscConfig+0x64>
 80011e2:	4bbd      	ldr	r3, [pc, #756]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	025b      	lsls	r3, r3, #9
 80011ea:	401a      	ands	r2, r3
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	025b      	lsls	r3, r3, #9
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d10d      	bne.n	8001210 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f4:	4bb8      	ldr	r3, [pc, #736]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	029b      	lsls	r3, r3, #10
 80011fc:	4013      	ands	r3, r2
 80011fe:	d100      	bne.n	8001202 <HAL_RCC_OscConfig+0x56>
 8001200:	e070      	b.n	80012e4 <HAL_RCC_OscConfig+0x138>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d000      	beq.n	800120c <HAL_RCC_OscConfig+0x60>
 800120a:	e06b      	b.n	80012e4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e2d8      	b.n	80017c2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d107      	bne.n	8001228 <HAL_RCC_OscConfig+0x7c>
 8001218:	4baf      	ldr	r3, [pc, #700]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4bae      	ldr	r3, [pc, #696]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 800121e:	2180      	movs	r1, #128	; 0x80
 8001220:	0249      	lsls	r1, r1, #9
 8001222:	430a      	orrs	r2, r1
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	e02f      	b.n	8001288 <HAL_RCC_OscConfig+0xdc>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d10c      	bne.n	800124a <HAL_RCC_OscConfig+0x9e>
 8001230:	4ba9      	ldr	r3, [pc, #676]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4ba8      	ldr	r3, [pc, #672]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 8001236:	49a9      	ldr	r1, [pc, #676]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 8001238:	400a      	ands	r2, r1
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	4ba6      	ldr	r3, [pc, #664]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4ba5      	ldr	r3, [pc, #660]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 8001242:	49a7      	ldr	r1, [pc, #668]	; (80014e0 <HAL_RCC_OscConfig+0x334>)
 8001244:	400a      	ands	r2, r1
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	e01e      	b.n	8001288 <HAL_RCC_OscConfig+0xdc>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b05      	cmp	r3, #5
 8001250:	d10e      	bne.n	8001270 <HAL_RCC_OscConfig+0xc4>
 8001252:	4ba1      	ldr	r3, [pc, #644]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4ba0      	ldr	r3, [pc, #640]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 8001258:	2180      	movs	r1, #128	; 0x80
 800125a:	02c9      	lsls	r1, r1, #11
 800125c:	430a      	orrs	r2, r1
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	4b9d      	ldr	r3, [pc, #628]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b9c      	ldr	r3, [pc, #624]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 8001266:	2180      	movs	r1, #128	; 0x80
 8001268:	0249      	lsls	r1, r1, #9
 800126a:	430a      	orrs	r2, r1
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	e00b      	b.n	8001288 <HAL_RCC_OscConfig+0xdc>
 8001270:	4b99      	ldr	r3, [pc, #612]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b98      	ldr	r3, [pc, #608]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 8001276:	4999      	ldr	r1, [pc, #612]	; (80014dc <HAL_RCC_OscConfig+0x330>)
 8001278:	400a      	ands	r2, r1
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	4b96      	ldr	r3, [pc, #600]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b95      	ldr	r3, [pc, #596]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 8001282:	4997      	ldr	r1, [pc, #604]	; (80014e0 <HAL_RCC_OscConfig+0x334>)
 8001284:	400a      	ands	r2, r1
 8001286:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d014      	beq.n	80012ba <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f7ff fe80 	bl	8000f94 <HAL_GetTick>
 8001294:	0003      	movs	r3, r0
 8001296:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800129a:	f7ff fe7b 	bl	8000f94 <HAL_GetTick>
 800129e:	0002      	movs	r2, r0
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b64      	cmp	r3, #100	; 0x64
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e28a      	b.n	80017c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ac:	4b8a      	ldr	r3, [pc, #552]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	029b      	lsls	r3, r3, #10
 80012b4:	4013      	ands	r3, r2
 80012b6:	d0f0      	beq.n	800129a <HAL_RCC_OscConfig+0xee>
 80012b8:	e015      	b.n	80012e6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ba:	f7ff fe6b 	bl	8000f94 <HAL_GetTick>
 80012be:	0003      	movs	r3, r0
 80012c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fe66 	bl	8000f94 <HAL_GetTick>
 80012c8:	0002      	movs	r2, r0
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e275      	b.n	80017c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d6:	4b80      	ldr	r3, [pc, #512]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	029b      	lsls	r3, r3, #10
 80012de:	4013      	ands	r3, r2
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0x118>
 80012e2:	e000      	b.n	80012e6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2202      	movs	r2, #2
 80012ec:	4013      	ands	r3, r2
 80012ee:	d100      	bne.n	80012f2 <HAL_RCC_OscConfig+0x146>
 80012f0:	e069      	b.n	80013c6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012f2:	4b79      	ldr	r3, [pc, #484]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	220c      	movs	r2, #12
 80012f8:	4013      	ands	r3, r2
 80012fa:	d00b      	beq.n	8001314 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012fc:	4b76      	ldr	r3, [pc, #472]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	220c      	movs	r2, #12
 8001302:	4013      	ands	r3, r2
 8001304:	2b08      	cmp	r3, #8
 8001306:	d11c      	bne.n	8001342 <HAL_RCC_OscConfig+0x196>
 8001308:	4b73      	ldr	r3, [pc, #460]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	025b      	lsls	r3, r3, #9
 8001310:	4013      	ands	r3, r2
 8001312:	d116      	bne.n	8001342 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001314:	4b70      	ldr	r3, [pc, #448]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2202      	movs	r2, #2
 800131a:	4013      	ands	r3, r2
 800131c:	d005      	beq.n	800132a <HAL_RCC_OscConfig+0x17e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d001      	beq.n	800132a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e24b      	b.n	80017c2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132a:	4b6b      	ldr	r3, [pc, #428]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	22f8      	movs	r2, #248	; 0xf8
 8001330:	4393      	bics	r3, r2
 8001332:	0019      	movs	r1, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	00da      	lsls	r2, r3, #3
 800133a:	4b67      	ldr	r3, [pc, #412]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 800133c:	430a      	orrs	r2, r1
 800133e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001340:	e041      	b.n	80013c6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d024      	beq.n	8001394 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800134a:	4b63      	ldr	r3, [pc, #396]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b62      	ldr	r3, [pc, #392]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 8001350:	2101      	movs	r1, #1
 8001352:	430a      	orrs	r2, r1
 8001354:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001356:	f7ff fe1d 	bl	8000f94 <HAL_GetTick>
 800135a:	0003      	movs	r3, r0
 800135c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001360:	f7ff fe18 	bl	8000f94 <HAL_GetTick>
 8001364:	0002      	movs	r2, r0
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e227      	b.n	80017c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001372:	4b59      	ldr	r3, [pc, #356]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2202      	movs	r2, #2
 8001378:	4013      	ands	r3, r2
 800137a:	d0f1      	beq.n	8001360 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137c:	4b56      	ldr	r3, [pc, #344]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	22f8      	movs	r2, #248	; 0xf8
 8001382:	4393      	bics	r3, r2
 8001384:	0019      	movs	r1, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	00da      	lsls	r2, r3, #3
 800138c:	4b52      	ldr	r3, [pc, #328]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 800138e:	430a      	orrs	r2, r1
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	e018      	b.n	80013c6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001394:	4b50      	ldr	r3, [pc, #320]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b4f      	ldr	r3, [pc, #316]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 800139a:	2101      	movs	r1, #1
 800139c:	438a      	bics	r2, r1
 800139e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fdf8 	bl	8000f94 <HAL_GetTick>
 80013a4:	0003      	movs	r3, r0
 80013a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013aa:	f7ff fdf3 	bl	8000f94 <HAL_GetTick>
 80013ae:	0002      	movs	r2, r0
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e202      	b.n	80017c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013bc:	4b46      	ldr	r3, [pc, #280]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2202      	movs	r2, #2
 80013c2:	4013      	ands	r3, r2
 80013c4:	d1f1      	bne.n	80013aa <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2208      	movs	r2, #8
 80013cc:	4013      	ands	r3, r2
 80013ce:	d036      	beq.n	800143e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	69db      	ldr	r3, [r3, #28]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d019      	beq.n	800140c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d8:	4b3f      	ldr	r3, [pc, #252]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 80013da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013dc:	4b3e      	ldr	r3, [pc, #248]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 80013de:	2101      	movs	r1, #1
 80013e0:	430a      	orrs	r2, r1
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e4:	f7ff fdd6 	bl	8000f94 <HAL_GetTick>
 80013e8:	0003      	movs	r3, r0
 80013ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ee:	f7ff fdd1 	bl	8000f94 <HAL_GetTick>
 80013f2:	0002      	movs	r2, r0
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e1e0      	b.n	80017c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001400:	4b35      	ldr	r3, [pc, #212]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	2202      	movs	r2, #2
 8001406:	4013      	ands	r3, r2
 8001408:	d0f1      	beq.n	80013ee <HAL_RCC_OscConfig+0x242>
 800140a:	e018      	b.n	800143e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800140c:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 800140e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001410:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 8001412:	2101      	movs	r1, #1
 8001414:	438a      	bics	r2, r1
 8001416:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001418:	f7ff fdbc 	bl	8000f94 <HAL_GetTick>
 800141c:	0003      	movs	r3, r0
 800141e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001422:	f7ff fdb7 	bl	8000f94 <HAL_GetTick>
 8001426:	0002      	movs	r2, r0
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e1c6      	b.n	80017c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001434:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	2202      	movs	r2, #2
 800143a:	4013      	ands	r3, r2
 800143c:	d1f1      	bne.n	8001422 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2204      	movs	r2, #4
 8001444:	4013      	ands	r3, r2
 8001446:	d100      	bne.n	800144a <HAL_RCC_OscConfig+0x29e>
 8001448:	e0b4      	b.n	80015b4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800144a:	201f      	movs	r0, #31
 800144c:	183b      	adds	r3, r7, r0
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 8001454:	69da      	ldr	r2, [r3, #28]
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	055b      	lsls	r3, r3, #21
 800145a:	4013      	ands	r3, r2
 800145c:	d110      	bne.n	8001480 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b1e      	ldr	r3, [pc, #120]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 8001460:	69da      	ldr	r2, [r3, #28]
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 8001464:	2180      	movs	r1, #128	; 0x80
 8001466:	0549      	lsls	r1, r1, #21
 8001468:	430a      	orrs	r2, r1
 800146a:	61da      	str	r2, [r3, #28]
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 800146e:	69da      	ldr	r2, [r3, #28]
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	055b      	lsls	r3, r3, #21
 8001474:	4013      	ands	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800147a:	183b      	adds	r3, r7, r0
 800147c:	2201      	movs	r2, #1
 800147e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001480:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <HAL_RCC_OscConfig+0x338>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4013      	ands	r3, r2
 800148a:	d11a      	bne.n	80014c2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_RCC_OscConfig+0x338>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_RCC_OscConfig+0x338>)
 8001492:	2180      	movs	r1, #128	; 0x80
 8001494:	0049      	lsls	r1, r1, #1
 8001496:	430a      	orrs	r2, r1
 8001498:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800149a:	f7ff fd7b 	bl	8000f94 <HAL_GetTick>
 800149e:	0003      	movs	r3, r0
 80014a0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a4:	f7ff fd76 	bl	8000f94 <HAL_GetTick>
 80014a8:	0002      	movs	r2, r0
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e185      	b.n	80017c2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_RCC_OscConfig+0x338>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4013      	ands	r3, r2
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d10e      	bne.n	80014e8 <HAL_RCC_OscConfig+0x33c>
 80014ca:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 80014cc:	6a1a      	ldr	r2, [r3, #32]
 80014ce:	4b02      	ldr	r3, [pc, #8]	; (80014d8 <HAL_RCC_OscConfig+0x32c>)
 80014d0:	2101      	movs	r1, #1
 80014d2:	430a      	orrs	r2, r1
 80014d4:	621a      	str	r2, [r3, #32]
 80014d6:	e035      	b.n	8001544 <HAL_RCC_OscConfig+0x398>
 80014d8:	40021000 	.word	0x40021000
 80014dc:	fffeffff 	.word	0xfffeffff
 80014e0:	fffbffff 	.word	0xfffbffff
 80014e4:	40007000 	.word	0x40007000
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d10c      	bne.n	800150a <HAL_RCC_OscConfig+0x35e>
 80014f0:	4bb6      	ldr	r3, [pc, #728]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 80014f2:	6a1a      	ldr	r2, [r3, #32]
 80014f4:	4bb5      	ldr	r3, [pc, #724]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	438a      	bics	r2, r1
 80014fa:	621a      	str	r2, [r3, #32]
 80014fc:	4bb3      	ldr	r3, [pc, #716]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 80014fe:	6a1a      	ldr	r2, [r3, #32]
 8001500:	4bb2      	ldr	r3, [pc, #712]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 8001502:	2104      	movs	r1, #4
 8001504:	438a      	bics	r2, r1
 8001506:	621a      	str	r2, [r3, #32]
 8001508:	e01c      	b.n	8001544 <HAL_RCC_OscConfig+0x398>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2b05      	cmp	r3, #5
 8001510:	d10c      	bne.n	800152c <HAL_RCC_OscConfig+0x380>
 8001512:	4bae      	ldr	r3, [pc, #696]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 8001514:	6a1a      	ldr	r2, [r3, #32]
 8001516:	4bad      	ldr	r3, [pc, #692]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 8001518:	2104      	movs	r1, #4
 800151a:	430a      	orrs	r2, r1
 800151c:	621a      	str	r2, [r3, #32]
 800151e:	4bab      	ldr	r3, [pc, #684]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 8001520:	6a1a      	ldr	r2, [r3, #32]
 8001522:	4baa      	ldr	r3, [pc, #680]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 8001524:	2101      	movs	r1, #1
 8001526:	430a      	orrs	r2, r1
 8001528:	621a      	str	r2, [r3, #32]
 800152a:	e00b      	b.n	8001544 <HAL_RCC_OscConfig+0x398>
 800152c:	4ba7      	ldr	r3, [pc, #668]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 800152e:	6a1a      	ldr	r2, [r3, #32]
 8001530:	4ba6      	ldr	r3, [pc, #664]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 8001532:	2101      	movs	r1, #1
 8001534:	438a      	bics	r2, r1
 8001536:	621a      	str	r2, [r3, #32]
 8001538:	4ba4      	ldr	r3, [pc, #656]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 800153a:	6a1a      	ldr	r2, [r3, #32]
 800153c:	4ba3      	ldr	r3, [pc, #652]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 800153e:	2104      	movs	r1, #4
 8001540:	438a      	bics	r2, r1
 8001542:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d014      	beq.n	8001576 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154c:	f7ff fd22 	bl	8000f94 <HAL_GetTick>
 8001550:	0003      	movs	r3, r0
 8001552:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001554:	e009      	b.n	800156a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001556:	f7ff fd1d 	bl	8000f94 <HAL_GetTick>
 800155a:	0002      	movs	r2, r0
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	4a9b      	ldr	r2, [pc, #620]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e12b      	b.n	80017c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156a:	4b98      	ldr	r3, [pc, #608]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	2202      	movs	r2, #2
 8001570:	4013      	ands	r3, r2
 8001572:	d0f0      	beq.n	8001556 <HAL_RCC_OscConfig+0x3aa>
 8001574:	e013      	b.n	800159e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001576:	f7ff fd0d 	bl	8000f94 <HAL_GetTick>
 800157a:	0003      	movs	r3, r0
 800157c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157e:	e009      	b.n	8001594 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001580:	f7ff fd08 	bl	8000f94 <HAL_GetTick>
 8001584:	0002      	movs	r2, r0
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	4a91      	ldr	r2, [pc, #580]	; (80017d0 <HAL_RCC_OscConfig+0x624>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e116      	b.n	80017c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001594:	4b8d      	ldr	r3, [pc, #564]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 8001596:	6a1b      	ldr	r3, [r3, #32]
 8001598:	2202      	movs	r2, #2
 800159a:	4013      	ands	r3, r2
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800159e:	231f      	movs	r3, #31
 80015a0:	18fb      	adds	r3, r7, r3
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d105      	bne.n	80015b4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a8:	4b88      	ldr	r3, [pc, #544]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 80015aa:	69da      	ldr	r2, [r3, #28]
 80015ac:	4b87      	ldr	r3, [pc, #540]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 80015ae:	4989      	ldr	r1, [pc, #548]	; (80017d4 <HAL_RCC_OscConfig+0x628>)
 80015b0:	400a      	ands	r2, r1
 80015b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2210      	movs	r2, #16
 80015ba:	4013      	ands	r3, r2
 80015bc:	d063      	beq.n	8001686 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d12a      	bne.n	800161c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015c6:	4b81      	ldr	r3, [pc, #516]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 80015c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ca:	4b80      	ldr	r3, [pc, #512]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 80015cc:	2104      	movs	r1, #4
 80015ce:	430a      	orrs	r2, r1
 80015d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80015d2:	4b7e      	ldr	r3, [pc, #504]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 80015d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015d6:	4b7d      	ldr	r3, [pc, #500]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 80015d8:	2101      	movs	r1, #1
 80015da:	430a      	orrs	r2, r1
 80015dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015de:	f7ff fcd9 	bl	8000f94 <HAL_GetTick>
 80015e2:	0003      	movs	r3, r0
 80015e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015e8:	f7ff fcd4 	bl	8000f94 <HAL_GetTick>
 80015ec:	0002      	movs	r2, r0
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e0e3      	b.n	80017c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015fa:	4b74      	ldr	r3, [pc, #464]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 80015fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fe:	2202      	movs	r2, #2
 8001600:	4013      	ands	r3, r2
 8001602:	d0f1      	beq.n	80015e8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001604:	4b71      	ldr	r3, [pc, #452]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 8001606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001608:	22f8      	movs	r2, #248	; 0xf8
 800160a:	4393      	bics	r3, r2
 800160c:	0019      	movs	r1, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	00da      	lsls	r2, r3, #3
 8001614:	4b6d      	ldr	r3, [pc, #436]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 8001616:	430a      	orrs	r2, r1
 8001618:	635a      	str	r2, [r3, #52]	; 0x34
 800161a:	e034      	b.n	8001686 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	3305      	adds	r3, #5
 8001622:	d111      	bne.n	8001648 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001624:	4b69      	ldr	r3, [pc, #420]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 8001626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001628:	4b68      	ldr	r3, [pc, #416]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 800162a:	2104      	movs	r1, #4
 800162c:	438a      	bics	r2, r1
 800162e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001630:	4b66      	ldr	r3, [pc, #408]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 8001632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001634:	22f8      	movs	r2, #248	; 0xf8
 8001636:	4393      	bics	r3, r2
 8001638:	0019      	movs	r1, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	00da      	lsls	r2, r3, #3
 8001640:	4b62      	ldr	r3, [pc, #392]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 8001642:	430a      	orrs	r2, r1
 8001644:	635a      	str	r2, [r3, #52]	; 0x34
 8001646:	e01e      	b.n	8001686 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001648:	4b60      	ldr	r3, [pc, #384]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 800164a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800164c:	4b5f      	ldr	r3, [pc, #380]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 800164e:	2104      	movs	r1, #4
 8001650:	430a      	orrs	r2, r1
 8001652:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001654:	4b5d      	ldr	r3, [pc, #372]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 8001656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001658:	4b5c      	ldr	r3, [pc, #368]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 800165a:	2101      	movs	r1, #1
 800165c:	438a      	bics	r2, r1
 800165e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001660:	f7ff fc98 	bl	8000f94 <HAL_GetTick>
 8001664:	0003      	movs	r3, r0
 8001666:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800166a:	f7ff fc93 	bl	8000f94 <HAL_GetTick>
 800166e:	0002      	movs	r2, r0
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e0a2      	b.n	80017c2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800167c:	4b53      	ldr	r3, [pc, #332]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 800167e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001680:	2202      	movs	r2, #2
 8001682:	4013      	ands	r3, r2
 8001684:	d1f1      	bne.n	800166a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d100      	bne.n	8001690 <HAL_RCC_OscConfig+0x4e4>
 800168e:	e097      	b.n	80017c0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001690:	4b4e      	ldr	r3, [pc, #312]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	220c      	movs	r2, #12
 8001696:	4013      	ands	r3, r2
 8001698:	2b08      	cmp	r3, #8
 800169a:	d100      	bne.n	800169e <HAL_RCC_OscConfig+0x4f2>
 800169c:	e06b      	b.n	8001776 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d14c      	bne.n	8001740 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a6:	4b49      	ldr	r3, [pc, #292]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	4b48      	ldr	r3, [pc, #288]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 80016ac:	494a      	ldr	r1, [pc, #296]	; (80017d8 <HAL_RCC_OscConfig+0x62c>)
 80016ae:	400a      	ands	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff fc6f 	bl	8000f94 <HAL_GetTick>
 80016b6:	0003      	movs	r3, r0
 80016b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016bc:	f7ff fc6a 	bl	8000f94 <HAL_GetTick>
 80016c0:	0002      	movs	r2, r0
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e079      	b.n	80017c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ce:	4b3f      	ldr	r3, [pc, #252]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	049b      	lsls	r3, r3, #18
 80016d6:	4013      	ands	r3, r2
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016da:	4b3c      	ldr	r3, [pc, #240]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	220f      	movs	r2, #15
 80016e0:	4393      	bics	r3, r2
 80016e2:	0019      	movs	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016e8:	4b38      	ldr	r3, [pc, #224]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 80016ea:	430a      	orrs	r2, r1
 80016ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80016ee:	4b37      	ldr	r3, [pc, #220]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4a3a      	ldr	r2, [pc, #232]	; (80017dc <HAL_RCC_OscConfig+0x630>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	0019      	movs	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001700:	431a      	orrs	r2, r3
 8001702:	4b32      	ldr	r3, [pc, #200]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 8001704:	430a      	orrs	r2, r1
 8001706:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001708:	4b30      	ldr	r3, [pc, #192]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b2f      	ldr	r3, [pc, #188]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	0449      	lsls	r1, r1, #17
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001716:	f7ff fc3d 	bl	8000f94 <HAL_GetTick>
 800171a:	0003      	movs	r3, r0
 800171c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001720:	f7ff fc38 	bl	8000f94 <HAL_GetTick>
 8001724:	0002      	movs	r2, r0
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e047      	b.n	80017c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001732:	4b26      	ldr	r3, [pc, #152]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	049b      	lsls	r3, r3, #18
 800173a:	4013      	ands	r3, r2
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0x574>
 800173e:	e03f      	b.n	80017c0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001740:	4b22      	ldr	r3, [pc, #136]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b21      	ldr	r3, [pc, #132]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 8001746:	4924      	ldr	r1, [pc, #144]	; (80017d8 <HAL_RCC_OscConfig+0x62c>)
 8001748:	400a      	ands	r2, r1
 800174a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff fc22 	bl	8000f94 <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001756:	f7ff fc1d 	bl	8000f94 <HAL_GetTick>
 800175a:	0002      	movs	r2, r0
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e02c      	b.n	80017c2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001768:	4b18      	ldr	r3, [pc, #96]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	049b      	lsls	r3, r3, #18
 8001770:	4013      	ands	r3, r2
 8001772:	d1f0      	bne.n	8001756 <HAL_RCC_OscConfig+0x5aa>
 8001774:	e024      	b.n	80017c0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a1b      	ldr	r3, [r3, #32]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d101      	bne.n	8001782 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e01f      	b.n	80017c2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001788:	4b10      	ldr	r3, [pc, #64]	; (80017cc <HAL_RCC_OscConfig+0x620>)
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	025b      	lsls	r3, r3, #9
 8001794:	401a      	ands	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179a:	429a      	cmp	r2, r3
 800179c:	d10e      	bne.n	80017bc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	220f      	movs	r2, #15
 80017a2:	401a      	ands	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d107      	bne.n	80017bc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	23f0      	movs	r3, #240	; 0xf0
 80017b0:	039b      	lsls	r3, r3, #14
 80017b2:	401a      	ands	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d001      	beq.n	80017c0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e000      	b.n	80017c2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	0018      	movs	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b008      	add	sp, #32
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	40021000 	.word	0x40021000
 80017d0:	00001388 	.word	0x00001388
 80017d4:	efffffff 	.word	0xefffffff
 80017d8:	feffffff 	.word	0xfeffffff
 80017dc:	ffc2ffff 	.word	0xffc2ffff

080017e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0b3      	b.n	800195c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017f4:	4b5b      	ldr	r3, [pc, #364]	; (8001964 <HAL_RCC_ClockConfig+0x184>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2201      	movs	r2, #1
 80017fa:	4013      	ands	r3, r2
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d911      	bls.n	8001826 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b58      	ldr	r3, [pc, #352]	; (8001964 <HAL_RCC_ClockConfig+0x184>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2201      	movs	r2, #1
 8001808:	4393      	bics	r3, r2
 800180a:	0019      	movs	r1, r3
 800180c:	4b55      	ldr	r3, [pc, #340]	; (8001964 <HAL_RCC_ClockConfig+0x184>)
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001814:	4b53      	ldr	r3, [pc, #332]	; (8001964 <HAL_RCC_ClockConfig+0x184>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2201      	movs	r2, #1
 800181a:	4013      	ands	r3, r2
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d001      	beq.n	8001826 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e09a      	b.n	800195c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2202      	movs	r2, #2
 800182c:	4013      	ands	r3, r2
 800182e:	d015      	beq.n	800185c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2204      	movs	r2, #4
 8001836:	4013      	ands	r3, r2
 8001838:	d006      	beq.n	8001848 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800183a:	4b4b      	ldr	r3, [pc, #300]	; (8001968 <HAL_RCC_ClockConfig+0x188>)
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	4b4a      	ldr	r3, [pc, #296]	; (8001968 <HAL_RCC_ClockConfig+0x188>)
 8001840:	21e0      	movs	r1, #224	; 0xe0
 8001842:	00c9      	lsls	r1, r1, #3
 8001844:	430a      	orrs	r2, r1
 8001846:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001848:	4b47      	ldr	r3, [pc, #284]	; (8001968 <HAL_RCC_ClockConfig+0x188>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	22f0      	movs	r2, #240	; 0xf0
 800184e:	4393      	bics	r3, r2
 8001850:	0019      	movs	r1, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	4b44      	ldr	r3, [pc, #272]	; (8001968 <HAL_RCC_ClockConfig+0x188>)
 8001858:	430a      	orrs	r2, r1
 800185a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2201      	movs	r2, #1
 8001862:	4013      	ands	r3, r2
 8001864:	d040      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d107      	bne.n	800187e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186e:	4b3e      	ldr	r3, [pc, #248]	; (8001968 <HAL_RCC_ClockConfig+0x188>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	029b      	lsls	r3, r3, #10
 8001876:	4013      	ands	r3, r2
 8001878:	d114      	bne.n	80018a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e06e      	b.n	800195c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d107      	bne.n	8001896 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001886:	4b38      	ldr	r3, [pc, #224]	; (8001968 <HAL_RCC_ClockConfig+0x188>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	049b      	lsls	r3, r3, #18
 800188e:	4013      	ands	r3, r2
 8001890:	d108      	bne.n	80018a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e062      	b.n	800195c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001896:	4b34      	ldr	r3, [pc, #208]	; (8001968 <HAL_RCC_ClockConfig+0x188>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2202      	movs	r2, #2
 800189c:	4013      	ands	r3, r2
 800189e:	d101      	bne.n	80018a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e05b      	b.n	800195c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018a4:	4b30      	ldr	r3, [pc, #192]	; (8001968 <HAL_RCC_ClockConfig+0x188>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2203      	movs	r2, #3
 80018aa:	4393      	bics	r3, r2
 80018ac:	0019      	movs	r1, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <HAL_RCC_ClockConfig+0x188>)
 80018b4:	430a      	orrs	r2, r1
 80018b6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018b8:	f7ff fb6c 	bl	8000f94 <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c0:	e009      	b.n	80018d6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018c2:	f7ff fb67 	bl	8000f94 <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	4a27      	ldr	r2, [pc, #156]	; (800196c <HAL_RCC_ClockConfig+0x18c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e042      	b.n	800195c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d6:	4b24      	ldr	r3, [pc, #144]	; (8001968 <HAL_RCC_ClockConfig+0x188>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	220c      	movs	r2, #12
 80018dc:	401a      	ands	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d1ec      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018e8:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <HAL_RCC_ClockConfig+0x184>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2201      	movs	r2, #1
 80018ee:	4013      	ands	r3, r2
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d211      	bcs.n	800191a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f6:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <HAL_RCC_ClockConfig+0x184>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2201      	movs	r2, #1
 80018fc:	4393      	bics	r3, r2
 80018fe:	0019      	movs	r1, r3
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_RCC_ClockConfig+0x184>)
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001908:	4b16      	ldr	r3, [pc, #88]	; (8001964 <HAL_RCC_ClockConfig+0x184>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2201      	movs	r2, #1
 800190e:	4013      	ands	r3, r2
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d001      	beq.n	800191a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e020      	b.n	800195c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2204      	movs	r2, #4
 8001920:	4013      	ands	r3, r2
 8001922:	d009      	beq.n	8001938 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001924:	4b10      	ldr	r3, [pc, #64]	; (8001968 <HAL_RCC_ClockConfig+0x188>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	4a11      	ldr	r2, [pc, #68]	; (8001970 <HAL_RCC_ClockConfig+0x190>)
 800192a:	4013      	ands	r3, r2
 800192c:	0019      	movs	r1, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	4b0d      	ldr	r3, [pc, #52]	; (8001968 <HAL_RCC_ClockConfig+0x188>)
 8001934:	430a      	orrs	r2, r1
 8001936:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001938:	f000 f820 	bl	800197c <HAL_RCC_GetSysClockFreq>
 800193c:	0001      	movs	r1, r0
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_RCC_ClockConfig+0x188>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	091b      	lsrs	r3, r3, #4
 8001944:	220f      	movs	r2, #15
 8001946:	4013      	ands	r3, r2
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <HAL_RCC_ClockConfig+0x194>)
 800194a:	5cd3      	ldrb	r3, [r2, r3]
 800194c:	000a      	movs	r2, r1
 800194e:	40da      	lsrs	r2, r3
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_RCC_ClockConfig+0x198>)
 8001952:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001954:	2000      	movs	r0, #0
 8001956:	f7ff fad7 	bl	8000f08 <HAL_InitTick>
  
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	0018      	movs	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	b004      	add	sp, #16
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40022000 	.word	0x40022000
 8001968:	40021000 	.word	0x40021000
 800196c:	00001388 	.word	0x00001388
 8001970:	fffff8ff 	.word	0xfffff8ff
 8001974:	080022c0 	.word	0x080022c0
 8001978:	20000000 	.word	0x20000000

0800197c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001996:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	220c      	movs	r2, #12
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d002      	beq.n	80019ac <HAL_RCC_GetSysClockFreq+0x30>
 80019a6:	2b08      	cmp	r3, #8
 80019a8:	d003      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x36>
 80019aa:	e02c      	b.n	8001a06 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019ac:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xa0>)
 80019ae:	613b      	str	r3, [r7, #16]
      break;
 80019b0:	e02c      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	0c9b      	lsrs	r3, r3, #18
 80019b6:	220f      	movs	r2, #15
 80019b8:	4013      	ands	r3, r2
 80019ba:	4a19      	ldr	r2, [pc, #100]	; (8001a20 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019bc:	5cd3      	ldrb	r3, [r2, r3]
 80019be:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80019c0:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	220f      	movs	r2, #15
 80019c6:	4013      	ands	r3, r2
 80019c8:	4a16      	ldr	r2, [pc, #88]	; (8001a24 <HAL_RCC_GetSysClockFreq+0xa8>)
 80019ca:	5cd3      	ldrb	r3, [r2, r3]
 80019cc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	025b      	lsls	r3, r3, #9
 80019d4:	4013      	ands	r3, r2
 80019d6:	d009      	beq.n	80019ec <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	4810      	ldr	r0, [pc, #64]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xa0>)
 80019dc:	f7fe fb94 	bl	8000108 <__udivsi3>
 80019e0:	0003      	movs	r3, r0
 80019e2:	001a      	movs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4353      	muls	r3, r2
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	e009      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	000a      	movs	r2, r1
 80019f0:	0152      	lsls	r2, r2, #5
 80019f2:	1a52      	subs	r2, r2, r1
 80019f4:	0193      	lsls	r3, r2, #6
 80019f6:	1a9b      	subs	r3, r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	185b      	adds	r3, r3, r1
 80019fc:	021b      	lsls	r3, r3, #8
 80019fe:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	613b      	str	r3, [r7, #16]
      break;
 8001a04:	e002      	b.n	8001a0c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a06:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a08:	613b      	str	r3, [r7, #16]
      break;
 8001a0a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a0c:	693b      	ldr	r3, [r7, #16]
}
 8001a0e:	0018      	movs	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b006      	add	sp, #24
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	007a1200 	.word	0x007a1200
 8001a20:	080022d0 	.word	0x080022d0
 8001a24:	080022e0 	.word	0x080022e0

08001a28 <input_capture_timer_init>:
void input_capture_timer_disable(void);
void input_capture_timer_gpi0_init(void);


void input_capture_timer_init(void)        /*  TIM2 INPUT CAPTURE MODE   */
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
	input_capture_timer_gpi0_init();
 8001a2e:	f000 f8f9 	bl	8001c24 <input_capture_timer_gpi0_init>

__HAL_RCC_TIM2_CLK_ENABLE();   //tım 2 clock enable
 8001a32:	4b5c      	ldr	r3, [pc, #368]	; (8001ba4 <input_capture_timer_init+0x17c>)
 8001a34:	69da      	ldr	r2, [r3, #28]
 8001a36:	4b5b      	ldr	r3, [pc, #364]	; (8001ba4 <input_capture_timer_init+0x17c>)
 8001a38:	2101      	movs	r1, #1
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	61da      	str	r2, [r3, #28]
 8001a3e:	4b59      	ldr	r3, [pc, #356]	; (8001ba4 <input_capture_timer_init+0x17c>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	2201      	movs	r2, #1
 8001a44:	4013      	ands	r3, r2
 8001a46:	607b      	str	r3, [r7, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]


TIM2->PSC = 47; // 48.000 / 47999 : 1000Hz -> 1Khz -> 1ms
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	05db      	lsls	r3, r3, #23
 8001a4e:	222f      	movs	r2, #47	; 0x2f
 8001a50:	629a      	str	r2, [r3, #40]	; 0x28
TIM2->ARR = 0xffffffff;
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	05db      	lsls	r3, r3, #23
 8001a56:	2201      	movs	r2, #1
 8001a58:	4252      	negs	r2, r2
 8001a5a:	62da      	str	r2, [r3, #44]	; 0x2c

TIM2->CR1 &= ~(1<<4);
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	05db      	lsls	r3, r3, #23
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	2380      	movs	r3, #128	; 0x80
 8001a64:	05db      	lsls	r3, r3, #23
 8001a66:	2110      	movs	r1, #16
 8001a68:	438a      	bics	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]
TIM2->CR1 &= ~(1<<8);
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	05db      	lsls	r3, r3, #23
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	2380      	movs	r3, #128	; 0x80
 8001a74:	05db      	lsls	r3, r3, #23
 8001a76:	494c      	ldr	r1, [pc, #304]	; (8001ba8 <input_capture_timer_init+0x180>)
 8001a78:	400a      	ands	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]
TIM2->CR1 &= ~(1<<9);
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	05db      	lsls	r3, r3, #23
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	05db      	lsls	r3, r3, #23
 8001a86:	4949      	ldr	r1, [pc, #292]	; (8001bac <input_capture_timer_init+0x184>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]
TIM2->CR1 &= ~(1<<7);
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	05db      	lsls	r3, r3, #23
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	05db      	lsls	r3, r3, #23
 8001a96:	2180      	movs	r1, #128	; 0x80
 8001a98:	438a      	bics	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]

TIM2->CR2 &= ~(1<<4);
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	05db      	lsls	r3, r3, #23
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	05db      	lsls	r3, r3, #23
 8001aa6:	2110      	movs	r1, #16
 8001aa8:	438a      	bics	r2, r1
 8001aaa:	605a      	str	r2, [r3, #4]
TIM2->CR2 &= ~(1<<5);
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	05db      	lsls	r3, r3, #23
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	05db      	lsls	r3, r3, #23
 8001ab6:	2120      	movs	r1, #32
 8001ab8:	438a      	bics	r2, r1
 8001aba:	605a      	str	r2, [r3, #4]
TIM2->CR2 &= ~(1<<6);
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	05db      	lsls	r3, r3, #23
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	05db      	lsls	r3, r3, #23
 8001ac6:	2140      	movs	r1, #64	; 0x40
 8001ac8:	438a      	bics	r2, r1
 8001aca:	605a      	str	r2, [r3, #4]

TIM2->SMCR &= ~TIM_SMCR_MSM;
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	05db      	lsls	r3, r3, #23
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	05db      	lsls	r3, r3, #23
 8001ad6:	2180      	movs	r1, #128	; 0x80
 8001ad8:	438a      	bics	r2, r1
 8001ada:	609a      	str	r2, [r3, #8]

TIM2->CCER  &= ~(1<<0);
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	05db      	lsls	r3, r3, #23
 8001ae0:	6a1a      	ldr	r2, [r3, #32]
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	05db      	lsls	r3, r3, #23
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	438a      	bics	r2, r1
 8001aea:	621a      	str	r2, [r3, #32]

TIM2->CCMR1 |=  (1<<0);      //tım2 ccmr1 register ccs bits 01 yani input tı1 olarak ayarlanıyor
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	05db      	lsls	r3, r3, #23
 8001af0:	699a      	ldr	r2, [r3, #24]
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	05db      	lsls	r3, r3, #23
 8001af6:	2101      	movs	r1, #1
 8001af8:	430a      	orrs	r2, r1
 8001afa:	619a      	str	r2, [r3, #24]
TIM2->CCMR1 &= ~(1<<1);
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	05db      	lsls	r3, r3, #23
 8001b00:	699a      	ldr	r2, [r3, #24]
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	05db      	lsls	r3, r3, #23
 8001b06:	2102      	movs	r1, #2
 8001b08:	438a      	bics	r2, r1
 8001b0a:	619a      	str	r2, [r3, #24]

TIM2->CCMR1 &= ~(1<<2);
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	05db      	lsls	r3, r3, #23
 8001b10:	699a      	ldr	r2, [r3, #24]
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	05db      	lsls	r3, r3, #23
 8001b16:	2104      	movs	r1, #4
 8001b18:	438a      	bics	r2, r1
 8001b1a:	619a      	str	r2, [r3, #24]
TIM2->CCMR1 &= ~(1<<3);
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	05db      	lsls	r3, r3, #23
 8001b20:	699a      	ldr	r2, [r3, #24]
 8001b22:	2380      	movs	r3, #128	; 0x80
 8001b24:	05db      	lsls	r3, r3, #23
 8001b26:	2108      	movs	r1, #8
 8001b28:	438a      	bics	r2, r1
 8001b2a:	619a      	str	r2, [r3, #24]

TIM2->CCMR1 |= (1<<4);     /// INPUT FİLTER lenght SET as 8 CLOCK
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	05db      	lsls	r3, r3, #23
 8001b30:	699a      	ldr	r2, [r3, #24]
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	05db      	lsls	r3, r3, #23
 8001b36:	2110      	movs	r1, #16
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	619a      	str	r2, [r3, #24]
TIM2->CCMR1 |= (1<<5);
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	05db      	lsls	r3, r3, #23
 8001b40:	699a      	ldr	r2, [r3, #24]
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	05db      	lsls	r3, r3, #23
 8001b46:	2120      	movs	r1, #32
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	619a      	str	r2, [r3, #24]
TIM2->CCMR1 &= ~(1<<6);
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	05db      	lsls	r3, r3, #23
 8001b50:	699a      	ldr	r2, [r3, #24]
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	05db      	lsls	r3, r3, #23
 8001b56:	2140      	movs	r1, #64	; 0x40
 8001b58:	438a      	bics	r2, r1
 8001b5a:	619a      	str	r2, [r3, #24]
TIM2->CCMR1 &= ~(1<<7);
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	05db      	lsls	r3, r3, #23
 8001b60:	699a      	ldr	r2, [r3, #24]
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	05db      	lsls	r3, r3, #23
 8001b66:	2180      	movs	r1, #128	; 0x80
 8001b68:	438a      	bics	r2, r1
 8001b6a:	619a      	str	r2, [r3, #24]

TIM2->CCER |= (1<<1);
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	05db      	lsls	r3, r3, #23
 8001b70:	6a1a      	ldr	r2, [r3, #32]
 8001b72:	2380      	movs	r3, #128	; 0x80
 8001b74:	05db      	lsls	r3, r3, #23
 8001b76:	2102      	movs	r1, #2
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	621a      	str	r2, [r3, #32]
TIM2->CCER |= (1<<3);
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	05db      	lsls	r3, r3, #23
 8001b80:	6a1a      	ldr	r2, [r3, #32]
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	05db      	lsls	r3, r3, #23
 8001b86:	2108      	movs	r1, #8
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	621a      	str	r2, [r3, #32]

HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b8c:	200f      	movs	r0, #15
 8001b8e:	f7ff faf0 	bl	8001172 <HAL_NVIC_EnableIRQ>
HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);
 8001b92:	2201      	movs	r2, #1
 8001b94:	2100      	movs	r1, #0
 8001b96:	200f      	movs	r0, #15
 8001b98:	f7ff fad6 	bl	8001148 <HAL_NVIC_SetPriority>

}
 8001b9c:	46c0      	nop			; (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b002      	add	sp, #8
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	fffffeff 	.word	0xfffffeff
 8001bac:	fffffdff 	.word	0xfffffdff

08001bb0 <input_capture_timer_enable>:

void input_capture_timer_enable(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0

	TIM2->CR1 |= (1 << 0);
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	05db      	lsls	r3, r3, #23
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	05db      	lsls	r3, r3, #23
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]
	TIM2->EGR |= (1 << 1);
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	05db      	lsls	r3, r3, #23
 8001bc8:	695a      	ldr	r2, [r3, #20]
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	05db      	lsls	r3, r3, #23
 8001bce:	2102      	movs	r1, #2
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	615a      	str	r2, [r3, #20]
	TIM2->EGR |= (1 << 0);
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	05db      	lsls	r3, r3, #23
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	2380      	movs	r3, #128	; 0x80
 8001bdc:	05db      	lsls	r3, r3, #23
 8001bde:	2101      	movs	r1, #1
 8001be0:	430a      	orrs	r2, r1
 8001be2:	615a      	str	r2, [r3, #20]
	TIM2->CCER |= (1 << 0);
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	05db      	lsls	r3, r3, #23
 8001be8:	6a1a      	ldr	r2, [r3, #32]
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	05db      	lsls	r3, r3, #23
 8001bee:	2101      	movs	r1, #1
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	621a      	str	r2, [r3, #32]
	TIM2->DIER |= (1 << 1);
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	05db      	lsls	r3, r3, #23
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	05db      	lsls	r3, r3, #23
 8001bfe:	2102      	movs	r1, #2
 8001c00:	430a      	orrs	r2, r1
 8001c02:	60da      	str	r2, [r3, #12]
}
 8001c04:	46c0      	nop			; (mov r8, r8)
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <input_capture_timer_disable>:
void input_capture_timer_disable(void)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	af00      	add	r7, sp, #0
	TIM2->CR1 &= ~(1<<0);
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	05db      	lsls	r3, r3, #23
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	05db      	lsls	r3, r3, #23
 8001c18:	2101      	movs	r1, #1
 8001c1a:	438a      	bics	r2, r1
 8001c1c:	601a      	str	r2, [r3, #0]
}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <input_capture_timer_gpi0_init>:

void input_capture_timer_gpi0_init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0

	RCC->AHBENR |= (1<<17);   //PORT A CLOCK ENABLE
 8001c28:	4b32      	ldr	r3, [pc, #200]	; (8001cf4 <input_capture_timer_gpi0_init+0xd0>)
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <input_capture_timer_gpi0_init+0xd0>)
 8001c2e:	2180      	movs	r1, #128	; 0x80
 8001c30:	0289      	lsls	r1, r1, #10
 8001c32:	430a      	orrs	r2, r1
 8001c34:	615a      	str	r2, [r3, #20]
//	__HAL_RCC_GPIOA_CLK_ENABLE();

	GPIOA->MODER &= ~(1<<10);   // MODE ALTERNATİVE FUNCTİON
 8001c36:	2390      	movs	r3, #144	; 0x90
 8001c38:	05db      	lsls	r3, r3, #23
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	2390      	movs	r3, #144	; 0x90
 8001c3e:	05db      	lsls	r3, r3, #23
 8001c40:	492d      	ldr	r1, [pc, #180]	; (8001cf8 <input_capture_timer_gpi0_init+0xd4>)
 8001c42:	400a      	ands	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= (1<<11);
 8001c46:	2390      	movs	r3, #144	; 0x90
 8001c48:	05db      	lsls	r3, r3, #23
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2390      	movs	r3, #144	; 0x90
 8001c4e:	05db      	lsls	r3, r3, #23
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	0109      	lsls	r1, r1, #4
 8001c54:	430a      	orrs	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]

	 GPIOA->OTYPER &= ~(1<<5);
 8001c58:	2390      	movs	r3, #144	; 0x90
 8001c5a:	05db      	lsls	r3, r3, #23
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	2390      	movs	r3, #144	; 0x90
 8001c60:	05db      	lsls	r3, r3, #23
 8001c62:	2120      	movs	r1, #32
 8001c64:	438a      	bics	r2, r1
 8001c66:	605a      	str	r2, [r3, #4]

	GPIOA->OSPEEDR |= (1<<10);   // SPEED high
 8001c68:	2390      	movs	r3, #144	; 0x90
 8001c6a:	05db      	lsls	r3, r3, #23
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	2390      	movs	r3, #144	; 0x90
 8001c70:	05db      	lsls	r3, r3, #23
 8001c72:	2180      	movs	r1, #128	; 0x80
 8001c74:	00c9      	lsls	r1, r1, #3
 8001c76:	430a      	orrs	r2, r1
 8001c78:	609a      	str	r2, [r3, #8]
	GPIOA->OSPEEDR |=  (1<<11);
 8001c7a:	2390      	movs	r3, #144	; 0x90
 8001c7c:	05db      	lsls	r3, r3, #23
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	2390      	movs	r3, #144	; 0x90
 8001c82:	05db      	lsls	r3, r3, #23
 8001c84:	2180      	movs	r1, #128	; 0x80
 8001c86:	0109      	lsls	r1, r1, #4
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	609a      	str	r2, [r3, #8]

	GPIOA->PUPDR &= ~(1<<10);   // nol pull up / down
 8001c8c:	2390      	movs	r3, #144	; 0x90
 8001c8e:	05db      	lsls	r3, r3, #23
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	2390      	movs	r3, #144	; 0x90
 8001c94:	05db      	lsls	r3, r3, #23
 8001c96:	4918      	ldr	r1, [pc, #96]	; (8001cf8 <input_capture_timer_gpi0_init+0xd4>)
 8001c98:	400a      	ands	r2, r1
 8001c9a:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR &= ~(1<<11);
 8001c9c:	2390      	movs	r3, #144	; 0x90
 8001c9e:	05db      	lsls	r3, r3, #23
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	2390      	movs	r3, #144	; 0x90
 8001ca4:	05db      	lsls	r3, r3, #23
 8001ca6:	4915      	ldr	r1, [pc, #84]	; (8001cfc <input_capture_timer_gpi0_init+0xd8>)
 8001ca8:	400a      	ands	r2, r1
 8001caa:	60da      	str	r2, [r3, #12]

	GPIOA->AFR[0] &= ~(1<<23);  // PA5 to AF2   AFSEL5 to af2
 8001cac:	2390      	movs	r3, #144	; 0x90
 8001cae:	05db      	lsls	r3, r3, #23
 8001cb0:	6a1a      	ldr	r2, [r3, #32]
 8001cb2:	2390      	movs	r3, #144	; 0x90
 8001cb4:	05db      	lsls	r3, r3, #23
 8001cb6:	4912      	ldr	r1, [pc, #72]	; (8001d00 <input_capture_timer_gpi0_init+0xdc>)
 8001cb8:	400a      	ands	r2, r1
 8001cba:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<22);
 8001cbc:	2390      	movs	r3, #144	; 0x90
 8001cbe:	05db      	lsls	r3, r3, #23
 8001cc0:	6a1a      	ldr	r2, [r3, #32]
 8001cc2:	2390      	movs	r3, #144	; 0x90
 8001cc4:	05db      	lsls	r3, r3, #23
 8001cc6:	490f      	ldr	r1, [pc, #60]	; (8001d04 <input_capture_timer_gpi0_init+0xe0>)
 8001cc8:	400a      	ands	r2, r1
 8001cca:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |=  (1<<21);
 8001ccc:	2390      	movs	r3, #144	; 0x90
 8001cce:	05db      	lsls	r3, r3, #23
 8001cd0:	6a1a      	ldr	r2, [r3, #32]
 8001cd2:	2390      	movs	r3, #144	; 0x90
 8001cd4:	05db      	lsls	r3, r3, #23
 8001cd6:	2180      	movs	r1, #128	; 0x80
 8001cd8:	0389      	lsls	r1, r1, #14
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] &= ~(1<<20);
 8001cde:	2390      	movs	r3, #144	; 0x90
 8001ce0:	05db      	lsls	r3, r3, #23
 8001ce2:	6a1a      	ldr	r2, [r3, #32]
 8001ce4:	2390      	movs	r3, #144	; 0x90
 8001ce6:	05db      	lsls	r3, r3, #23
 8001ce8:	4907      	ldr	r1, [pc, #28]	; (8001d08 <input_capture_timer_gpi0_init+0xe4>)
 8001cea:	400a      	ands	r2, r1
 8001cec:	621a      	str	r2, [r3, #32]

}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	fffffbff 	.word	0xfffffbff
 8001cfc:	fffff7ff 	.word	0xfffff7ff
 8001d00:	ff7fffff 	.word	0xff7fffff
 8001d04:	ffbfffff 	.word	0xffbfffff
 8001d08:	ffefffff 	.word	0xffefffff

08001d0c <TIM2_IRQHandler>:

float frequency = 0;
float total_perriod = 0;

void TIM2_IRQHandler(void)
{
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
	  if ((TIM2->SR & (1<<1)) != RESET) { // CC1IF: Capture/Compare 1 interrupt flag
 8001d12:	2380      	movs	r3, #128	; 0x80
 8001d14:	05db      	lsls	r3, r3, #23
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	2202      	movs	r2, #2
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d075      	beq.n	8001e0a <TIM2_IRQHandler+0xfe>

		  if (Is_First_Captured==0) // if the first rising edge is not captured
 8001d1e:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <TIM2_IRQHandler+0x108>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d108      	bne.n	8001d38 <TIM2_IRQHandler+0x2c>
		  		{
		  			IC_Val1 = TIM2->CCR1 ;  // read the first value
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	05db      	lsls	r3, r3, #23
 8001d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d2c:	4b3a      	ldr	r3, [pc, #232]	; (8001e18 <TIM2_IRQHandler+0x10c>)
 8001d2e:	601a      	str	r2, [r3, #0]
		  			Is_First_Captured = 1;  // set the first captured as true
 8001d30:	4b38      	ldr	r3, [pc, #224]	; (8001e14 <TIM2_IRQHandler+0x108>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]
 8001d36:	e060      	b.n	8001dfa <TIM2_IRQHandler+0xee>
		  		}

		  		else   // If the first rising edge is captured, now we will capture the second edge
		  		{
		  			IC_Val2 = TIM2->CCR1 ;  // read second value
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	05db      	lsls	r3, r3, #23
 8001d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d3e:	4b37      	ldr	r3, [pc, #220]	; (8001e1c <TIM2_IRQHandler+0x110>)
 8001d40:	601a      	str	r2, [r3, #0]

		  			if (IC_Val2 > IC_Val1)
 8001d42:	4b36      	ldr	r3, [pc, #216]	; (8001e1c <TIM2_IRQHandler+0x110>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4b34      	ldr	r3, [pc, #208]	; (8001e18 <TIM2_IRQHandler+0x10c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d907      	bls.n	8001d5e <TIM2_IRQHandler+0x52>
		  			{
		  				Difference = IC_Val2-IC_Val1;
 8001d4e:	4b33      	ldr	r3, [pc, #204]	; (8001e1c <TIM2_IRQHandler+0x110>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	4b31      	ldr	r3, [pc, #196]	; (8001e18 <TIM2_IRQHandler+0x10c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	1ad2      	subs	r2, r2, r3
 8001d58:	4b31      	ldr	r3, [pc, #196]	; (8001e20 <TIM2_IRQHandler+0x114>)
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	e00d      	b.n	8001d7a <TIM2_IRQHandler+0x6e>
		  			}

		  			else if (IC_Val1 > IC_Val2)
 8001d5e:	4b2e      	ldr	r3, [pc, #184]	; (8001e18 <TIM2_IRQHandler+0x10c>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	4b2e      	ldr	r3, [pc, #184]	; (8001e1c <TIM2_IRQHandler+0x110>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d907      	bls.n	8001d7a <TIM2_IRQHandler+0x6e>
		  			{
		  				Difference = (0xffffffff - IC_Val1) + IC_Val2;
 8001d6a:	4b2c      	ldr	r3, [pc, #176]	; (8001e1c <TIM2_IRQHandler+0x110>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <TIM2_IRQHandler+0x10c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	1e5a      	subs	r2, r3, #1
 8001d76:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <TIM2_IRQHandler+0x114>)
 8001d78:	601a      	str	r2, [r3, #0]
		  			}

		  			float refClock = TIMCLOCK/(PRESCALAR);
 8001d7a:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <TIM2_IRQHandler+0x118>)
 8001d7c:	607b      	str	r3, [r7, #4]
		  			float mFactor = 1000000/refClock;
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4828      	ldr	r0, [pc, #160]	; (8001e24 <TIM2_IRQHandler+0x118>)
 8001d82:	f7fe fa65 	bl	8000250 <__aeabi_fdiv>
 8001d86:	1c03      	adds	r3, r0, #0
 8001d88:	603b      	str	r3, [r7, #0]

		  			frequency = refClock/Difference;
 8001d8a:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <TIM2_IRQHandler+0x114>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f7fe fe86 	bl	8000aa0 <__aeabi_ui2f>
 8001d94:	1c03      	adds	r3, r0, #0
 8001d96:	1c19      	adds	r1, r3, #0
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7fe fa59 	bl	8000250 <__aeabi_fdiv>
 8001d9e:	1c03      	adds	r3, r0, #0
 8001da0:	1c1a      	adds	r2, r3, #0
 8001da2:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <TIM2_IRQHandler+0x11c>)
 8001da4:	601a      	str	r2, [r3, #0]
		  			total_perriod = 1 / frequency ;
 8001da6:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <TIM2_IRQHandler+0x11c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	1c19      	adds	r1, r3, #0
 8001dac:	20fe      	movs	r0, #254	; 0xfe
 8001dae:	0580      	lsls	r0, r0, #22
 8001db0:	f7fe fa4e 	bl	8000250 <__aeabi_fdiv>
 8001db4:	1c03      	adds	r3, r0, #0
 8001db6:	1c1a      	adds	r2, r3, #0
 8001db8:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <TIM2_IRQHandler+0x120>)
 8001dba:	601a      	str	r2, [r3, #0]
		  			usWidth = (total_perriod / Difference) * 100 ;
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <TIM2_IRQHandler+0x120>)
 8001dbe:	681c      	ldr	r4, [r3, #0]
 8001dc0:	4b17      	ldr	r3, [pc, #92]	; (8001e20 <TIM2_IRQHandler+0x114>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f7fe fe6b 	bl	8000aa0 <__aeabi_ui2f>
 8001dca:	1c03      	adds	r3, r0, #0
 8001dcc:	1c19      	adds	r1, r3, #0
 8001dce:	1c20      	adds	r0, r4, #0
 8001dd0:	f7fe fa3e 	bl	8000250 <__aeabi_fdiv>
 8001dd4:	1c03      	adds	r3, r0, #0
 8001dd6:	4916      	ldr	r1, [pc, #88]	; (8001e30 <TIM2_IRQHandler+0x124>)
 8001dd8:	1c18      	adds	r0, r3, #0
 8001dda:	f7fe fb53 	bl	8000484 <__aeabi_fmul>
 8001dde:	1c03      	adds	r3, r0, #0
 8001de0:	1c18      	adds	r0, r3, #0
 8001de2:	f7fe fa1d 	bl	8000220 <__aeabi_f2uiz>
 8001de6:	0002      	movs	r2, r0
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <TIM2_IRQHandler+0x128>)
 8001dea:	601a      	str	r2, [r3, #0]

		  		//	usWidth = Difference * mFactor;


		  			TIM2->CNT  = 0;
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	05db      	lsls	r3, r3, #23
 8001df0:	2200      	movs	r2, #0
 8001df2:	625a      	str	r2, [r3, #36]	; 0x24
		  			// __HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
		  			Is_First_Captured = 0; // set it back to false
 8001df4:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <TIM2_IRQHandler+0x108>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
		  		}
	        // Kesme bayrağını sıfırla
	        TIM2->SR &= ~(1 << 1); // CC1IF bayrağını temizle
 8001dfa:	2380      	movs	r3, #128	; 0x80
 8001dfc:	05db      	lsls	r3, r3, #23
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	05db      	lsls	r3, r3, #23
 8001e04:	2102      	movs	r1, #2
 8001e06:	438a      	bics	r2, r1
 8001e08:	611a      	str	r2, [r3, #16]
	    }
	// HAL_TIM_IRQHandler(&htim2);
}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	b003      	add	sp, #12
 8001e10:	bd90      	pop	{r4, r7, pc}
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	20000038 	.word	0x20000038
 8001e18:	2000002c 	.word	0x2000002c
 8001e1c:	20000030 	.word	0x20000030
 8001e20:	20000034 	.word	0x20000034
 8001e24:	49742400 	.word	0x49742400
 8001e28:	20000040 	.word	0x20000040
 8001e2c:	20000044 	.word	0x20000044
 8001e30:	42c80000 	.word	0x42c80000
 8001e34:	2000003c 	.word	0x2000003c

08001e38 <pwm_timer_init>:
void pwm_start(void);
void pwm_stop(void);


void pwm_timer_init(void)    // TIM3
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0

pwm_timer_gpıo_init();
 8001e3e:	f000 f8a3 	bl	8001f88 <pwm_timer_gpıo_init>

__HAL_RCC_TIM3_CLK_ENABLE();
 8001e42:	4b44      	ldr	r3, [pc, #272]	; (8001f54 <pwm_timer_init+0x11c>)
 8001e44:	69da      	ldr	r2, [r3, #28]
 8001e46:	4b43      	ldr	r3, [pc, #268]	; (8001f54 <pwm_timer_init+0x11c>)
 8001e48:	2102      	movs	r1, #2
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	61da      	str	r2, [r3, #28]
 8001e4e:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <pwm_timer_init+0x11c>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	2202      	movs	r2, #2
 8001e54:	4013      	ands	r3, r2
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
// RCC->APB1ENR |= (1<<1) ;   //TIM3 Clock Enabled

TIM3->PSC = 47; // 48.000.000 / 47 => 1.000.000 Hz -> 1MHz sinyal
 8001e5a:	4b3f      	ldr	r3, [pc, #252]	; (8001f58 <pwm_timer_init+0x120>)
 8001e5c:	222f      	movs	r2, #47	; 0x2f
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28

TIM3->ARR = 99; // 1.000.000 / 100 => 10.000 Hz -> 10KHz sinyal 10ms
 8001e60:	4b3d      	ldr	r3, [pc, #244]	; (8001f58 <pwm_timer_init+0x120>)
 8001e62:	2263      	movs	r2, #99	; 0x63
 8001e64:	62da      	str	r2, [r3, #44]	; 0x2c

TIM3->CCR1 = 49; // 1. KANAL %50 DUTY
 8001e66:	4b3c      	ldr	r3, [pc, #240]	; (8001f58 <pwm_timer_init+0x120>)
 8001e68:	2231      	movs	r2, #49	; 0x31
 8001e6a:	635a      	str	r2, [r3, #52]	; 0x34
TIM3->CCR2 = 40;
 8001e6c:	4b3a      	ldr	r3, [pc, #232]	; (8001f58 <pwm_timer_init+0x120>)
 8001e6e:	2228      	movs	r2, #40	; 0x28
 8001e70:	639a      	str	r2, [r3, #56]	; 0x38
TIM3->CCR3 = 70;
 8001e72:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <pwm_timer_init+0x120>)
 8001e74:	2246      	movs	r2, #70	; 0x46
 8001e76:	63da      	str	r2, [r3, #60]	; 0x3c
TIM3->CCR4 = 9;
 8001e78:	4b37      	ldr	r3, [pc, #220]	; (8001f58 <pwm_timer_init+0x120>)
 8001e7a:	2209      	movs	r2, #9
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40

TIM3->CCMR1 |= (1<<6);         //PWM MODE channel 1
 8001e7e:	4b36      	ldr	r3, [pc, #216]	; (8001f58 <pwm_timer_init+0x120>)
 8001e80:	699a      	ldr	r2, [r3, #24]
 8001e82:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <pwm_timer_init+0x120>)
 8001e84:	2140      	movs	r1, #64	; 0x40
 8001e86:	430a      	orrs	r2, r1
 8001e88:	619a      	str	r2, [r3, #24]
TIM3->CCMR1 |= (1<<5);
 8001e8a:	4b33      	ldr	r3, [pc, #204]	; (8001f58 <pwm_timer_init+0x120>)
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	4b32      	ldr	r3, [pc, #200]	; (8001f58 <pwm_timer_init+0x120>)
 8001e90:	2120      	movs	r1, #32
 8001e92:	430a      	orrs	r2, r1
 8001e94:	619a      	str	r2, [r3, #24]
TIM3->CCMR1 &= ~(1<<4);
 8001e96:	4b30      	ldr	r3, [pc, #192]	; (8001f58 <pwm_timer_init+0x120>)
 8001e98:	699a      	ldr	r2, [r3, #24]
 8001e9a:	4b2f      	ldr	r3, [pc, #188]	; (8001f58 <pwm_timer_init+0x120>)
 8001e9c:	2110      	movs	r1, #16
 8001e9e:	438a      	bics	r2, r1
 8001ea0:	619a      	str	r2, [r3, #24]

TIM3->CCMR1 |= (1<<14);         //PWM MODE channel 2
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <pwm_timer_init+0x120>)
 8001ea4:	699a      	ldr	r2, [r3, #24]
 8001ea6:	4b2c      	ldr	r3, [pc, #176]	; (8001f58 <pwm_timer_init+0x120>)
 8001ea8:	2180      	movs	r1, #128	; 0x80
 8001eaa:	01c9      	lsls	r1, r1, #7
 8001eac:	430a      	orrs	r2, r1
 8001eae:	619a      	str	r2, [r3, #24]
TIM3->CCMR1 |= (1<<13);
 8001eb0:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <pwm_timer_init+0x120>)
 8001eb2:	699a      	ldr	r2, [r3, #24]
 8001eb4:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <pwm_timer_init+0x120>)
 8001eb6:	2180      	movs	r1, #128	; 0x80
 8001eb8:	0189      	lsls	r1, r1, #6
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	619a      	str	r2, [r3, #24]
TIM3->CCMR1 &= ~(1<<12);
 8001ebe:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <pwm_timer_init+0x120>)
 8001ec0:	699a      	ldr	r2, [r3, #24]
 8001ec2:	4b25      	ldr	r3, [pc, #148]	; (8001f58 <pwm_timer_init+0x120>)
 8001ec4:	4925      	ldr	r1, [pc, #148]	; (8001f5c <pwm_timer_init+0x124>)
 8001ec6:	400a      	ands	r2, r1
 8001ec8:	619a      	str	r2, [r3, #24]

TIM3->CCMR2 |= (1<<6);         //PWM MODE channel 3
 8001eca:	4b23      	ldr	r3, [pc, #140]	; (8001f58 <pwm_timer_init+0x120>)
 8001ecc:	69da      	ldr	r2, [r3, #28]
 8001ece:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <pwm_timer_init+0x120>)
 8001ed0:	2140      	movs	r1, #64	; 0x40
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	61da      	str	r2, [r3, #28]
TIM3->CCMR2 |= (1<<5);
 8001ed6:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <pwm_timer_init+0x120>)
 8001ed8:	69da      	ldr	r2, [r3, #28]
 8001eda:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <pwm_timer_init+0x120>)
 8001edc:	2120      	movs	r1, #32
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	61da      	str	r2, [r3, #28]
TIM3->CCMR2 &= ~(1<<4);
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <pwm_timer_init+0x120>)
 8001ee4:	69da      	ldr	r2, [r3, #28]
 8001ee6:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <pwm_timer_init+0x120>)
 8001ee8:	2110      	movs	r1, #16
 8001eea:	438a      	bics	r2, r1
 8001eec:	61da      	str	r2, [r3, #28]

TIM3->CCMR2 |= (1<<14);         //PWM MODE channel 4
 8001eee:	4b1a      	ldr	r3, [pc, #104]	; (8001f58 <pwm_timer_init+0x120>)
 8001ef0:	69da      	ldr	r2, [r3, #28]
 8001ef2:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <pwm_timer_init+0x120>)
 8001ef4:	2180      	movs	r1, #128	; 0x80
 8001ef6:	01c9      	lsls	r1, r1, #7
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	61da      	str	r2, [r3, #28]
TIM3->CCMR2 |= (1<<13);
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <pwm_timer_init+0x120>)
 8001efe:	69da      	ldr	r2, [r3, #28]
 8001f00:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <pwm_timer_init+0x120>)
 8001f02:	2180      	movs	r1, #128	; 0x80
 8001f04:	0189      	lsls	r1, r1, #6
 8001f06:	430a      	orrs	r2, r1
 8001f08:	61da      	str	r2, [r3, #28]
TIM3->CCMR2 &= ~(1<<12);
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <pwm_timer_init+0x120>)
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <pwm_timer_init+0x120>)
 8001f10:	4912      	ldr	r1, [pc, #72]	; (8001f5c <pwm_timer_init+0x124>)
 8001f12:	400a      	ands	r2, r1
 8001f14:	61da      	str	r2, [r3, #28]


TIM3->CCER |= (1<<0);   //CAPTURE COMPARE  CHANNEL ENABLE
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <pwm_timer_init+0x120>)
 8001f18:	6a1a      	ldr	r2, [r3, #32]
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <pwm_timer_init+0x120>)
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	621a      	str	r2, [r3, #32]
TIM3->CCER |= (1<<4);
 8001f22:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <pwm_timer_init+0x120>)
 8001f24:	6a1a      	ldr	r2, [r3, #32]
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <pwm_timer_init+0x120>)
 8001f28:	2110      	movs	r1, #16
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	621a      	str	r2, [r3, #32]
TIM3->CCER |= (1<<8);
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <pwm_timer_init+0x120>)
 8001f30:	6a1a      	ldr	r2, [r3, #32]
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <pwm_timer_init+0x120>)
 8001f34:	2180      	movs	r1, #128	; 0x80
 8001f36:	0049      	lsls	r1, r1, #1
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	621a      	str	r2, [r3, #32]
TIM3->CCER |= (1<<12);
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <pwm_timer_init+0x120>)
 8001f3e:	6a1a      	ldr	r2, [r3, #32]
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <pwm_timer_init+0x120>)
 8001f42:	2180      	movs	r1, #128	; 0x80
 8001f44:	0149      	lsls	r1, r1, #5
 8001f46:	430a      	orrs	r2, r1
 8001f48:	621a      	str	r2, [r3, #32]

}
 8001f4a:	46c0      	nop			; (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b002      	add	sp, #8
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40000400 	.word	0x40000400
 8001f5c:	ffffefff 	.word	0xffffefff

08001f60 <pwm_start>:

void pwm_start(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0

TIM3->EGR |= (1<<0);   //update event generation eneble
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <pwm_start+0x24>)
 8001f66:	695a      	ldr	r2, [r3, #20]
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <pwm_start+0x24>)
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	615a      	str	r2, [r3, #20]
TIM3->CR1 |= (1<<0);    // counter enable
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <pwm_start+0x24>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <pwm_start+0x24>)
 8001f76:	2101      	movs	r1, #1
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]

}
 8001f7c:	46c0      	nop			; (mov r8, r8)
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	40000400 	.word	0x40000400

08001f88 <pwm_timer_gpıo_init>:
TIM3->CR1 &= ~(1<<0);  // counter disable

}

void pwm_timer_gpıo_init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
/*  TIM3 PA6 & PA7 to AF1   */
/*  TIM3 PB4 & PB5 to AF1   */

// PA6 has to be set AF1

RCC->AHBENR |= (1<<17);   //A clock enable
 8001f8c:	4b85      	ldr	r3, [pc, #532]	; (80021a4 <pwm_timer_gpıo_init+0x21c>)
 8001f8e:	695a      	ldr	r2, [r3, #20]
 8001f90:	4b84      	ldr	r3, [pc, #528]	; (80021a4 <pwm_timer_gpıo_init+0x21c>)
 8001f92:	2180      	movs	r1, #128	; 0x80
 8001f94:	0289      	lsls	r1, r1, #10
 8001f96:	430a      	orrs	r2, r1
 8001f98:	615a      	str	r2, [r3, #20]

GPIOA->MODER |= (1<<13);   //MODE AF PA6
 8001f9a:	2390      	movs	r3, #144	; 0x90
 8001f9c:	05db      	lsls	r3, r3, #23
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2390      	movs	r3, #144	; 0x90
 8001fa2:	05db      	lsls	r3, r3, #23
 8001fa4:	2180      	movs	r1, #128	; 0x80
 8001fa6:	0189      	lsls	r1, r1, #6
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
GPIOA->MODER &= ~(1<<12);
 8001fac:	2390      	movs	r3, #144	; 0x90
 8001fae:	05db      	lsls	r3, r3, #23
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	2390      	movs	r3, #144	; 0x90
 8001fb4:	05db      	lsls	r3, r3, #23
 8001fb6:	497c      	ldr	r1, [pc, #496]	; (80021a8 <pwm_timer_gpıo_init+0x220>)
 8001fb8:	400a      	ands	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]

GPIOA->OTYPER &= (1<<6);  // OUTPUT PUSHPULL
 8001fbc:	2390      	movs	r3, #144	; 0x90
 8001fbe:	05db      	lsls	r3, r3, #23
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	2390      	movs	r3, #144	; 0x90
 8001fc4:	05db      	lsls	r3, r3, #23
 8001fc6:	2140      	movs	r1, #64	; 0x40
 8001fc8:	400a      	ands	r2, r1
 8001fca:	605a      	str	r2, [r3, #4]

GPIOA->PUPDR &= ~(1<<12); // no pull up no pull down
 8001fcc:	2390      	movs	r3, #144	; 0x90
 8001fce:	05db      	lsls	r3, r3, #23
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	2390      	movs	r3, #144	; 0x90
 8001fd4:	05db      	lsls	r3, r3, #23
 8001fd6:	4974      	ldr	r1, [pc, #464]	; (80021a8 <pwm_timer_gpıo_init+0x220>)
 8001fd8:	400a      	ands	r2, r1
 8001fda:	60da      	str	r2, [r3, #12]
GPIOA->PUPDR &= ~(1<<13);
 8001fdc:	2390      	movs	r3, #144	; 0x90
 8001fde:	05db      	lsls	r3, r3, #23
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	2390      	movs	r3, #144	; 0x90
 8001fe4:	05db      	lsls	r3, r3, #23
 8001fe6:	4971      	ldr	r1, [pc, #452]	; (80021ac <pwm_timer_gpıo_init+0x224>)
 8001fe8:	400a      	ands	r2, r1
 8001fea:	60da      	str	r2, [r3, #12]

GPIOA->OSPEEDR |= (1<<12);   //HIGH speed
 8001fec:	2390      	movs	r3, #144	; 0x90
 8001fee:	05db      	lsls	r3, r3, #23
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	2390      	movs	r3, #144	; 0x90
 8001ff4:	05db      	lsls	r3, r3, #23
 8001ff6:	2180      	movs	r1, #128	; 0x80
 8001ff8:	0149      	lsls	r1, r1, #5
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	609a      	str	r2, [r3, #8]
GPIOA->OSPEEDR |= (1<<13);
 8001ffe:	2390      	movs	r3, #144	; 0x90
 8002000:	05db      	lsls	r3, r3, #23
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	2390      	movs	r3, #144	; 0x90
 8002006:	05db      	lsls	r3, r3, #23
 8002008:	2180      	movs	r1, #128	; 0x80
 800200a:	0189      	lsls	r1, r1, #6
 800200c:	430a      	orrs	r2, r1
 800200e:	609a      	str	r2, [r3, #8]

GPIOA->AFR[0] &= ~(1<<27);  //Alternative Function Register set as AF1
 8002010:	2390      	movs	r3, #144	; 0x90
 8002012:	05db      	lsls	r3, r3, #23
 8002014:	6a1a      	ldr	r2, [r3, #32]
 8002016:	2390      	movs	r3, #144	; 0x90
 8002018:	05db      	lsls	r3, r3, #23
 800201a:	4965      	ldr	r1, [pc, #404]	; (80021b0 <pwm_timer_gpıo_init+0x228>)
 800201c:	400a      	ands	r2, r1
 800201e:	621a      	str	r2, [r3, #32]
GPIOA->AFR[0] &= ~(1<<26);
 8002020:	2390      	movs	r3, #144	; 0x90
 8002022:	05db      	lsls	r3, r3, #23
 8002024:	6a1a      	ldr	r2, [r3, #32]
 8002026:	2390      	movs	r3, #144	; 0x90
 8002028:	05db      	lsls	r3, r3, #23
 800202a:	4962      	ldr	r1, [pc, #392]	; (80021b4 <pwm_timer_gpıo_init+0x22c>)
 800202c:	400a      	ands	r2, r1
 800202e:	621a      	str	r2, [r3, #32]
GPIOA->AFR[0] &= ~(1<<25);
 8002030:	2390      	movs	r3, #144	; 0x90
 8002032:	05db      	lsls	r3, r3, #23
 8002034:	6a1a      	ldr	r2, [r3, #32]
 8002036:	2390      	movs	r3, #144	; 0x90
 8002038:	05db      	lsls	r3, r3, #23
 800203a:	495f      	ldr	r1, [pc, #380]	; (80021b8 <pwm_timer_gpıo_init+0x230>)
 800203c:	400a      	ands	r2, r1
 800203e:	621a      	str	r2, [r3, #32]
GPIOA->AFR[0] |=  (1<<24);
 8002040:	2390      	movs	r3, #144	; 0x90
 8002042:	05db      	lsls	r3, r3, #23
 8002044:	6a1a      	ldr	r2, [r3, #32]
 8002046:	2390      	movs	r3, #144	; 0x90
 8002048:	05db      	lsls	r3, r3, #23
 800204a:	2180      	movs	r1, #128	; 0x80
 800204c:	0449      	lsls	r1, r1, #17
 800204e:	430a      	orrs	r2, r1
 8002050:	621a      	str	r2, [r3, #32]

/*pb1   */

RCC->AHBENR |= (1<<18);
 8002052:	4b54      	ldr	r3, [pc, #336]	; (80021a4 <pwm_timer_gpıo_init+0x21c>)
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <pwm_timer_gpıo_init+0x21c>)
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	02c9      	lsls	r1, r1, #11
 800205c:	430a      	orrs	r2, r1
 800205e:	615a      	str	r2, [r3, #20]

GPIOB->MODER |= (1<<3);   //MODE AF PB1
 8002060:	4b56      	ldr	r3, [pc, #344]	; (80021bc <pwm_timer_gpıo_init+0x234>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b55      	ldr	r3, [pc, #340]	; (80021bc <pwm_timer_gpıo_init+0x234>)
 8002066:	2108      	movs	r1, #8
 8002068:	430a      	orrs	r2, r1
 800206a:	601a      	str	r2, [r3, #0]
GPIOB->MODER &= ~(1<<2);
 800206c:	4b53      	ldr	r3, [pc, #332]	; (80021bc <pwm_timer_gpıo_init+0x234>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b52      	ldr	r3, [pc, #328]	; (80021bc <pwm_timer_gpıo_init+0x234>)
 8002072:	2104      	movs	r1, #4
 8002074:	438a      	bics	r2, r1
 8002076:	601a      	str	r2, [r3, #0]

GPIOB->OTYPER &= (1<<1);  // OUTPUT PUSHPULL
 8002078:	4b50      	ldr	r3, [pc, #320]	; (80021bc <pwm_timer_gpıo_init+0x234>)
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	4b4f      	ldr	r3, [pc, #316]	; (80021bc <pwm_timer_gpıo_init+0x234>)
 800207e:	2102      	movs	r1, #2
 8002080:	400a      	ands	r2, r1
 8002082:	605a      	str	r2, [r3, #4]

GPIOB->PUPDR &= ~(1<<2); // no pull up no pull down
 8002084:	4b4d      	ldr	r3, [pc, #308]	; (80021bc <pwm_timer_gpıo_init+0x234>)
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	4b4c      	ldr	r3, [pc, #304]	; (80021bc <pwm_timer_gpıo_init+0x234>)
 800208a:	2104      	movs	r1, #4
 800208c:	438a      	bics	r2, r1
 800208e:	60da      	str	r2, [r3, #12]
GPIOB->PUPDR &= ~(1<<3);
 8002090:	4b4a      	ldr	r3, [pc, #296]	; (80021bc <pwm_timer_gpıo_init+0x234>)
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	4b49      	ldr	r3, [pc, #292]	; (80021bc <pwm_timer_gpıo_init+0x234>)
 8002096:	2108      	movs	r1, #8
 8002098:	438a      	bics	r2, r1
 800209a:	60da      	str	r2, [r3, #12]

GPIOB->OSPEEDR |= (1<<2);   //HIGH speed
 800209c:	4b47      	ldr	r3, [pc, #284]	; (80021bc <pwm_timer_gpıo_init+0x234>)
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	4b46      	ldr	r3, [pc, #280]	; (80021bc <pwm_timer_gpıo_init+0x234>)
 80020a2:	2104      	movs	r1, #4
 80020a4:	430a      	orrs	r2, r1
 80020a6:	609a      	str	r2, [r3, #8]
GPIOB->OSPEEDR |= (1<<3);
 80020a8:	4b44      	ldr	r3, [pc, #272]	; (80021bc <pwm_timer_gpıo_init+0x234>)
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	4b43      	ldr	r3, [pc, #268]	; (80021bc <pwm_timer_gpıo_init+0x234>)
 80020ae:	2108      	movs	r1, #8
 80020b0:	430a      	orrs	r2, r1
 80020b2:	609a      	str	r2, [r3, #8]

GPIOB->AFR[0] &= ~(1<<7);  //Alternative Function Register set as AF1
 80020b4:	4b41      	ldr	r3, [pc, #260]	; (80021bc <pwm_timer_gpıo_init+0x234>)
 80020b6:	6a1a      	ldr	r2, [r3, #32]
 80020b8:	4b40      	ldr	r3, [pc, #256]	; (80021bc <pwm_timer_gpıo_init+0x234>)
 80020ba:	2180      	movs	r1, #128	; 0x80
 80020bc:	438a      	bics	r2, r1
 80020be:	621a      	str	r2, [r3, #32]
GPIOB->AFR[0] &= ~(1<<6);
 80020c0:	4b3e      	ldr	r3, [pc, #248]	; (80021bc <pwm_timer_gpıo_init+0x234>)
 80020c2:	6a1a      	ldr	r2, [r3, #32]
 80020c4:	4b3d      	ldr	r3, [pc, #244]	; (80021bc <pwm_timer_gpıo_init+0x234>)
 80020c6:	2140      	movs	r1, #64	; 0x40
 80020c8:	438a      	bics	r2, r1
 80020ca:	621a      	str	r2, [r3, #32]
GPIOB->AFR[0] &= ~(1<<5);
 80020cc:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <pwm_timer_gpıo_init+0x234>)
 80020ce:	6a1a      	ldr	r2, [r3, #32]
 80020d0:	4b3a      	ldr	r3, [pc, #232]	; (80021bc <pwm_timer_gpıo_init+0x234>)
 80020d2:	2120      	movs	r1, #32
 80020d4:	438a      	bics	r2, r1
 80020d6:	621a      	str	r2, [r3, #32]
GPIOB->AFR[0] |=  (1<<4);
 80020d8:	4b38      	ldr	r3, [pc, #224]	; (80021bc <pwm_timer_gpıo_init+0x234>)
 80020da:	6a1a      	ldr	r2, [r3, #32]
 80020dc:	4b37      	ldr	r3, [pc, #220]	; (80021bc <pwm_timer_gpıo_init+0x234>)
 80020de:	2110      	movs	r1, #16
 80020e0:	430a      	orrs	r2, r1
 80020e2:	621a      	str	r2, [r3, #32]


/*  PA7  */

GPIOA->MODER |= (1<<15);   //MODE AF PA7
 80020e4:	2390      	movs	r3, #144	; 0x90
 80020e6:	05db      	lsls	r3, r3, #23
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	2390      	movs	r3, #144	; 0x90
 80020ec:	05db      	lsls	r3, r3, #23
 80020ee:	2180      	movs	r1, #128	; 0x80
 80020f0:	0209      	lsls	r1, r1, #8
 80020f2:	430a      	orrs	r2, r1
 80020f4:	601a      	str	r2, [r3, #0]
GPIOA->MODER &= ~(1<<14);
 80020f6:	2390      	movs	r3, #144	; 0x90
 80020f8:	05db      	lsls	r3, r3, #23
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	2390      	movs	r3, #144	; 0x90
 80020fe:	05db      	lsls	r3, r3, #23
 8002100:	492f      	ldr	r1, [pc, #188]	; (80021c0 <pwm_timer_gpıo_init+0x238>)
 8002102:	400a      	ands	r2, r1
 8002104:	601a      	str	r2, [r3, #0]

GPIOA->OTYPER &= (1<<7);  // OUTPUT PUSHPULL
 8002106:	2390      	movs	r3, #144	; 0x90
 8002108:	05db      	lsls	r3, r3, #23
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	2390      	movs	r3, #144	; 0x90
 800210e:	05db      	lsls	r3, r3, #23
 8002110:	2180      	movs	r1, #128	; 0x80
 8002112:	400a      	ands	r2, r1
 8002114:	605a      	str	r2, [r3, #4]

GPIOA->PUPDR &= ~(1<<15); // no pull up no pull down
 8002116:	2390      	movs	r3, #144	; 0x90
 8002118:	05db      	lsls	r3, r3, #23
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	2390      	movs	r3, #144	; 0x90
 800211e:	05db      	lsls	r3, r3, #23
 8002120:	4928      	ldr	r1, [pc, #160]	; (80021c4 <pwm_timer_gpıo_init+0x23c>)
 8002122:	400a      	ands	r2, r1
 8002124:	60da      	str	r2, [r3, #12]
GPIOA->PUPDR &= ~(1<<14);
 8002126:	2390      	movs	r3, #144	; 0x90
 8002128:	05db      	lsls	r3, r3, #23
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	2390      	movs	r3, #144	; 0x90
 800212e:	05db      	lsls	r3, r3, #23
 8002130:	4923      	ldr	r1, [pc, #140]	; (80021c0 <pwm_timer_gpıo_init+0x238>)
 8002132:	400a      	ands	r2, r1
 8002134:	60da      	str	r2, [r3, #12]

GPIOA->OSPEEDR |= (1<<15);   //HIGH speed
 8002136:	2390      	movs	r3, #144	; 0x90
 8002138:	05db      	lsls	r3, r3, #23
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	2390      	movs	r3, #144	; 0x90
 800213e:	05db      	lsls	r3, r3, #23
 8002140:	2180      	movs	r1, #128	; 0x80
 8002142:	0209      	lsls	r1, r1, #8
 8002144:	430a      	orrs	r2, r1
 8002146:	609a      	str	r2, [r3, #8]
GPIOA->OSPEEDR |= (1<<14);
 8002148:	2390      	movs	r3, #144	; 0x90
 800214a:	05db      	lsls	r3, r3, #23
 800214c:	689a      	ldr	r2, [r3, #8]
 800214e:	2390      	movs	r3, #144	; 0x90
 8002150:	05db      	lsls	r3, r3, #23
 8002152:	2180      	movs	r1, #128	; 0x80
 8002154:	01c9      	lsls	r1, r1, #7
 8002156:	430a      	orrs	r2, r1
 8002158:	609a      	str	r2, [r3, #8]

GPIOA->AFR[0] &= ~(1<<31);  //Alternative Function Register set as AF1
 800215a:	2390      	movs	r3, #144	; 0x90
 800215c:	05db      	lsls	r3, r3, #23
 800215e:	6a1a      	ldr	r2, [r3, #32]
 8002160:	2390      	movs	r3, #144	; 0x90
 8002162:	05db      	lsls	r3, r3, #23
 8002164:	0052      	lsls	r2, r2, #1
 8002166:	0852      	lsrs	r2, r2, #1
 8002168:	621a      	str	r2, [r3, #32]
GPIOA->AFR[0] &= ~(1<<30);
 800216a:	2390      	movs	r3, #144	; 0x90
 800216c:	05db      	lsls	r3, r3, #23
 800216e:	6a1a      	ldr	r2, [r3, #32]
 8002170:	2390      	movs	r3, #144	; 0x90
 8002172:	05db      	lsls	r3, r3, #23
 8002174:	4914      	ldr	r1, [pc, #80]	; (80021c8 <pwm_timer_gpıo_init+0x240>)
 8002176:	400a      	ands	r2, r1
 8002178:	621a      	str	r2, [r3, #32]
GPIOA->AFR[0] &= ~(1<<29);
 800217a:	2390      	movs	r3, #144	; 0x90
 800217c:	05db      	lsls	r3, r3, #23
 800217e:	6a1a      	ldr	r2, [r3, #32]
 8002180:	2390      	movs	r3, #144	; 0x90
 8002182:	05db      	lsls	r3, r3, #23
 8002184:	4911      	ldr	r1, [pc, #68]	; (80021cc <pwm_timer_gpıo_init+0x244>)
 8002186:	400a      	ands	r2, r1
 8002188:	621a      	str	r2, [r3, #32]
GPIOA->AFR[0] |=  (1<<28);
 800218a:	2390      	movs	r3, #144	; 0x90
 800218c:	05db      	lsls	r3, r3, #23
 800218e:	6a1a      	ldr	r2, [r3, #32]
 8002190:	2390      	movs	r3, #144	; 0x90
 8002192:	05db      	lsls	r3, r3, #23
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	0549      	lsls	r1, r1, #21
 8002198:	430a      	orrs	r2, r1
 800219a:	621a      	str	r2, [r3, #32]

}
 800219c:	46c0      	nop			; (mov r8, r8)
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	40021000 	.word	0x40021000
 80021a8:	ffffefff 	.word	0xffffefff
 80021ac:	ffffdfff 	.word	0xffffdfff
 80021b0:	f7ffffff 	.word	0xf7ffffff
 80021b4:	fbffffff 	.word	0xfbffffff
 80021b8:	fdffffff 	.word	0xfdffffff
 80021bc:	48000400 	.word	0x48000400
 80021c0:	ffffbfff 	.word	0xffffbfff
 80021c4:	ffff7fff 	.word	0xffff7fff
 80021c8:	bfffffff 	.word	0xbfffffff
 80021cc:	dfffffff 	.word	0xdfffffff

080021d0 <memset>:
 80021d0:	0003      	movs	r3, r0
 80021d2:	1882      	adds	r2, r0, r2
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d100      	bne.n	80021da <memset+0xa>
 80021d8:	4770      	bx	lr
 80021da:	7019      	strb	r1, [r3, #0]
 80021dc:	3301      	adds	r3, #1
 80021de:	e7f9      	b.n	80021d4 <memset+0x4>

080021e0 <__libc_init_array>:
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	2600      	movs	r6, #0
 80021e4:	4c0c      	ldr	r4, [pc, #48]	; (8002218 <__libc_init_array+0x38>)
 80021e6:	4d0d      	ldr	r5, [pc, #52]	; (800221c <__libc_init_array+0x3c>)
 80021e8:	1b64      	subs	r4, r4, r5
 80021ea:	10a4      	asrs	r4, r4, #2
 80021ec:	42a6      	cmp	r6, r4
 80021ee:	d109      	bne.n	8002204 <__libc_init_array+0x24>
 80021f0:	2600      	movs	r6, #0
 80021f2:	f000 f819 	bl	8002228 <_init>
 80021f6:	4c0a      	ldr	r4, [pc, #40]	; (8002220 <__libc_init_array+0x40>)
 80021f8:	4d0a      	ldr	r5, [pc, #40]	; (8002224 <__libc_init_array+0x44>)
 80021fa:	1b64      	subs	r4, r4, r5
 80021fc:	10a4      	asrs	r4, r4, #2
 80021fe:	42a6      	cmp	r6, r4
 8002200:	d105      	bne.n	800220e <__libc_init_array+0x2e>
 8002202:	bd70      	pop	{r4, r5, r6, pc}
 8002204:	00b3      	lsls	r3, r6, #2
 8002206:	58eb      	ldr	r3, [r5, r3]
 8002208:	4798      	blx	r3
 800220a:	3601      	adds	r6, #1
 800220c:	e7ee      	b.n	80021ec <__libc_init_array+0xc>
 800220e:	00b3      	lsls	r3, r6, #2
 8002210:	58eb      	ldr	r3, [r5, r3]
 8002212:	4798      	blx	r3
 8002214:	3601      	adds	r6, #1
 8002216:	e7f2      	b.n	80021fe <__libc_init_array+0x1e>
 8002218:	080022f0 	.word	0x080022f0
 800221c:	080022f0 	.word	0x080022f0
 8002220:	080022f4 	.word	0x080022f4
 8002224:	080022f0 	.word	0x080022f0

08002228 <_init>:
 8002228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800222e:	bc08      	pop	{r3}
 8002230:	469e      	mov	lr, r3
 8002232:	4770      	bx	lr

08002234 <_fini>:
 8002234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002236:	46c0      	nop			; (mov r8, r8)
 8002238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800223a:	bc08      	pop	{r3}
 800223c:	469e      	mov	lr, r3
 800223e:	4770      	bx	lr
